			<cfinvoke component="#application.blog#" method="getPost" returnvariable="getPopularPosts">
					<cfinvokeargument name="showPopularPosts" value="true">
			</cfinvoke>
			<cfif arrayLen(getPost)>
				<h1 class="topContent" <cfif darkTheme>style="color:ivory"</cfif>>Popular Blogs</h1>
				<!-- Kendo Scrollwrap container -->
				<div class="k-card-deck-scrollwrap">
		
					<!-- Render the cards -->
					<button class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md k-icon-button k-button-scroll" aria-label="back" style="width: 35px; height:35px; border-radius: 50%; left:22px; top:130px; z-index:2;">
						<span class="k-button-icon k-icon k-i-arrow-chevron-left"></span>
					</button>
					<div class="k-card-deck">
					<!--- Loop through the array --->
					<cfloop from="1" to="#arrayLen(getPopularPosts)#" index="i">
						<!--- Note: this is nearly identical to the normal rendering of posts in card format, other than we are always using the thumbnail image. --->
						<cfif i lte arrayLen(getPopularPosts)>
						<cfsilent>	
						<!--- Preset vars --->
						<cfset promotedPost = ''>  
						<cfset postId = ''>  
						<cfset title = ''>
						<cfset author = ''>
						<cfset postUrl = ''>
						<cfset postContent = ''>
						<cfset enclosure = ''>
						<cfset thumbNail = ''>
						<cfset mediaId = ''>
						<cfset mediaType = ''>
						<cfset mediaUrl = ''>
						<cfset providerVideoId = ''>
						<cfset MediaVideoCoverUrl = ''>
						<cfset mediaVideoVttFileUrl = ''>
						<cfset enclosureMapIdList = ''>
						<cfset enclosureMapId = ''>
						<cfset enclosureCarouselId = ''>
						<cfset datePosted = ''>
						<!--- Also reset the thumbnailMedia and carousels generated by the Renderer obj --->
						<cfset thumbnailMedia = ''>
						<cfset thumbnailCarousel = ''>

						<!--- Get the data --->		
						<cfset thisBlogId = 1>
						<cfset promotedPost = getPopularPosts[i]["Promoted"]>
						<cfset postId = getPopularPosts[i]["PostId"]>
						<cfset title = getPopularPosts[i]["Title"]>
						<cfset author = getPopularPosts[i]["FullName"]>
						<cfset postUrl = application.blog.makeLink(getPopularPosts[i]["PostId"])>
						<cfset postContent = getPopularPosts[i]["Description"]>
						<cfset enclosure = getPopularPosts[i]["MediaUrl"]>
						<cfset thumbnail = getPopularPosts[i]["MediaThumbnailUrl"]>
						<cfset mediaId = getPopularPosts[i]["MediaId"]>
						<cfset mediaType = getPopularPosts[i]["MediaType"]>
						<cfset mediaUrl = getPopularPosts[i]["MediaUrl"]>
						<cfset providerVideoId = getPopularPosts[i]["ProviderVideoId"]>
						<cfset MediaVideoCoverUrl = getPopularPosts[i]["MediaVideoCoverUrl"]>
						<cfset mediaVideoVttFileUrl = getPopularPosts[i]["mediaVideoVttFileUrl"]>
						<!--- Set the enclosureMapIdList. We only need to get the value of the first item in the list as all of the values are the same --->
						<cfset enclosureMapIdList = getPopularPosts[1]["EnclosureMapIdList"]>
						<!--- Get the map Id of the current row in the list. --->
						<cfset enclosureMapId = getPopularPosts[i]["EnclosureMapId"]>
						<cfset enclosureCarouselId = getPopularPosts[i]["EnclosureCarouselId"]>
						<cfset datePosted = getPopularPosts[i]["DatePosted"]> 
						
						<!--- Get the categories for this post. --->
						<cfset getCategories = application.blog.getCategoriesByPostId(postId)>
						<!--- Get the top level category in the hiearchy. This will cause an error if the post has no category --->
						<cftry>
							<cfset parentCategory = getCategories[1]["Category"]>
							<cfcatch type="any">
								<cfset parentCategory = "">
							</cfcatch>
						</cftry>

						<!--- ************************* Handle enlosure ************************* --->
						<!--- For the popular posts widget, always use the thumbnail image --->
						<cfset cardImage = thumbnail>	
						<!--- There does not seem to be a enclosure image. Check to see if there is a facebook sharing image, and use the noImage.jpg if the share image or thumbnail does not exist (likely due to a cfinclude, errors or a blog upgrade) --->
						<cfif not len(cardImage)>
							<cfset facebookImageMetaTagValue = application.blog.getXmlKeywordValue(getPost[1]["PostHeader"], 'facebookImageUrlMetaData')>
							<cfif len(facebookImageMetaTagValue)>
								<cfset cardImage = facebookImageMetaTagValue>
							<cfelse>
								<cfset cardImage = application.baseUrl & "/images/thumbnails/noImage.jpg">
							</cfif>
						</cfif>

						<!--- ************************* Handle maps ************************* --->
						<!--- For desktop clients, handle multiple maps on a page. If there are multiple maps, we need to create a script that will load all of the maps at the top of the page. If we are using a mobile device and there are multiple maps- we will use an iframe to display the map. --->
						<cfif not session.isMobile and i eq 1 and listLen(enclosureMapIdList) gt 1>
							<!--- Invoke the renderLoadMapScript function --->
							<cfinvoke component="#RendererObj#" method="renderLoadMapScript" returnvariable="loadMapScript">
								<cfinvokeargument name="kendoTheme" value="#kendoTheme#">
								<cfinvokeargument name="enclosureMapIdList" value="#enclosureMapIdList#">
								<cfinvokeargument name="currentRow" value="#i#">
							</cfinvoke>
						<cfelse>
							<cfset loadMapScript = ''>
						</cfif>
						<!--- Render the map --->
						<cfif len(enclosureMapId)>
							<!--- Render the map. This returns a iframe renderMapPreview(mapId, thumbnail, renderKCardMediaClass, renderMediumCard, showSidebar) --->
							<cfset thumbnailMap = RendererObj.renderMapPreview(enclosureMapId, true, true, false, showSidebar)>
						</cfif>
						<!--- Render the carousel --->
						<cfif len(enclosureCarouselId)>
							<!--- renderCarousel(carouselId,renderCard) --->
							<cfset thumbnailCarousel = RendererObj.renderCarousel(enclosureCarouselId,true)>
						</cfif>

						<!--- ************************* Handle self hosted videos ************************* --->
						<cfif len(mediaId) and mediaType contains 'Video'>
							<!--- Note: this will return an iframe. --->
							<cfinvoke component="#RendererObj#" method="renderEnclosureVideoPreview" returnvariable="thumbnailMedia">
								<cfinvokeargument name="mediaUrl" value="#mediaUrl#">
								<cfinvokeargument name="mediaId" value="#mediaId#">
								<cfinvokeargument name="providerVideoId" value="#providerVideoId#">
								<cfinvokeargument name="posterUrl" value="#mediaVideoCoverUrl#">
								<cfinvokeargument name="videoCaptionsUrl" value="#mediaVideoVttFileUrl#">
								<cfinvokeargument name="renderThumbnail" value="true">
								<cfinvokeargument name="renderKCardMediaClass" value="true">
								<cfinvokeargument name="renderMediumCard" value="#renderMediumCard#">
								<cfinvokeargument name="showSidebar" value="#showSidebar#">
							</cfinvoke> 
						</cfif><!---<cfif len(mediaId) and mediaType contains 'Video'>--->

						<!--- Also see if a video should be rendered using xmlkeywords. This returns a structure. --->
						<cfset xmlKeywordStruct = application.blog.getXmlKeywordStruct(getPopularPosts[i]["PostHeader"])>
						<!--- Is there a video directive the xmlKeywords? --->
						<cfif len(xmlKeywordStruct.VideoDirective)>
							<!--- Get the smallest video if possible --->
							<cfif len(xmlKeywordStruct.smallVideoSourceUrl)>
								<cfset mediaUrl = xmlKeywordStruct.smallVideoSourceUrl>
							<cfelseif len(xmlKeywordStruct.mediumVideoSourceUrl)>
								<cfset mediaUrl = xmlKeywordStruct.mediumVideoSourceUrl>
							<cfelseif len(xmlKeywordStruct.largeVideoSourceUrl)>
								<cfset mediaUrl = xmlKeywordStruct.largeVideoSourceUrl>
							<cfelseif len(xmlKeywordStruct.youTubeUrl)>
								<cfset mediaUrl = xmlKeywordStruct.youTubeUrl>
							</cfif>

							<!--- Render the video from the directives --->
							<cfif len(mediaUrl)>	
								<!--- Render the video, this will return an iframe. --->
								<cfinvoke component="#RendererObj#" method="renderEnclosureVideoPreview" returnvariable="thumbnailMedia">
									<cfinvokeargument name="mediaUrl" value="#mediaUrl#">
									<!--- Galaxie Directives don't have a mediaId or a providerVideoId --->
									<cfinvokeargument name="mediaId" value="">
									<cfinvokeargument name="providerVideoId" value="">
									<cfinvokeargument name="posterUrl" value="#xmlKeywordStruct.videoPosterImageUrl#">
									<cfinvokeargument name="videoCaptionsUrl" value="#xmlKeywordStruct.videoCaptionsUrl#">
									<cfinvokeargument name="renderThumbnail" value="true">
									<cfinvokeargument name="renderKCardMediaClass" value="true">
									<!--- For popular posts, don't render the medium size card. --->
									<cfinvokeargument name="renderMediumCard" value="false">
									<cfinvokeargument name="showSidebar" value="#showSidebar#">
								</cfinvoke> 
								<cfdump var="#xmlKeywordStruct#">
							</cfif>
						</cfif>

						<!--- Remove HTML from the string --->
						<cfinvoke component="#application.jsoupComponentPath#" method="jsoupConvertHtmlToText" returnvariable="postContent">
							<cfinvokeargument name="html" value="#postContent#">
						</cfinvoke>

						<!--- Make the srint a bit longer white white space if it is too short --->
						<cfif len(postContent) lt 100>
							<cfset postContent = postContent & "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;">
						</cfif>
							
						</cfsilent>
							<!--- Note: this is using the k-card-deck image --->
							<div class="k-card k-card-type-rich<cfif promotedPost>highlightedWidget</cfif>" style="width:235px;">
								<a href="<cfoutput>#postUrl#</cfoutput>"><cfif len(enclosureMapId)><cfoutput>#thumbnailMap#</cfoutput><cfelseif len(enclosureCarouselId)><cfoutput>#thumbnailCarousel#</cfoutput><cfelseif len(thumbnailMedia)><cfoutput>#thumbnailMedia#</cfoutput><cfelse><div class="img-hover-zoom img-hover-brightzoom"><img class="fade lazied shown k-card-scroll-image" data-type="image" data-src="<cfoutput>#cardImage#</cfoutput>" alt="<cfoutput>#title#</cfoutput>" data-lazied="IMG" src="<cfoutput>#cardImage#</cfoutput>"></div></cfif></a>
								<div class="k-card-body">
									<!-- The font should be 14pt for this compact widget -->
									<h2 class="k-card-title" style="font-size: 14pt"><cfif promotedPost>&nbsp;<i class="fa fa-bullhorn" aria-hidden="true" title="Announcement"></i>&nbsp;&nbsp;</cfif><a href="<cfoutput>#postUrl#</cfoutput>" aria-label="<cfoutput>#title#</cfoutput>"><cfoutput>#title#</cfoutput></a></h4>
								</div>
								<div class="k-card-actions k-card-actions-stretched k-card-actions-vertical">
									<span class="k-card-action">
										<span class="k-button k-primary" onClick="window.open('<cfoutput>#postUrl#</cfoutput>', '_self')">Read More...</span>
									</span>
								</div>
							</div><!---<div class="k-card k-card-type-rich">--->
						</cfif><!---<cfif i lte arrayLen(getPost)>--->
						</cfloop>
					</div><!---<div class="k-card-deck">--->
					<button class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md k-icon-button k-button-scroll" aria-label="forward" style="width: 35px; height:35px; border-radius: 50%; right:5px; top:130px; z-index:2;">
						<span class="k-icon k-i-arrow-chevron-right"></span>
					</button>
				</div><!-- Scrollwrap container -->
				
				<script type="<cfoutput>#application.blog.getScriptTypeString()#</cfoutput>">
					function scrollButtonClick(e) {
						var button = $(e.currentTarget);
						var scrollToLeft = button.find(".k-i-arrow-chevron-left").length !== 0;
						var scrollContainer = $(".k-card-deck").eq(0);
						var lastCard = scrollContainer.find(".k-card").last();
						var cardWidth = lastCard.outerWidth(true);

						if (scrollToLeft) {
							scrollContainer.scrollLeft(scrollContainer.scrollLeft() - cardWidth);
						} else {
							scrollContainer.scrollLeft(scrollContainer.scrollLeft() + cardWidth);
						}
					};

					$(document).ready(function () {
						var cardDeck = $(".k-card-deck-scrollwrap").eq(0);
						cardDeck.on("click", ".k-button-scroll", scrollButtonClick);
					});
				</script>

				<style>
					#hero {
						/* display: flex; */
						justify-content: center;
					}

					.k-card-action > .k-button {
						width: 100%;
					}
					
					.k-card-deck-scrollwrap {
						/*max-width: 728px;*/
					}
					
					.k-card-deck-scrollwrap { 
						padding-right: 2px !important;/* Normally 16, but this screws things up */
						width: 95% !important; /* Without this, the scroll widget is to the very right of the container without any padding whatsoever */
					}
				</style>

			</cfif><!---<cfif arrayLen(getPost)>--->