"use strict";tinymce.PluginManager.add("iconfonts",function(t){var e=[".fa",".fab",".fal",".far",".fas",".glyphicon"].join(","),n=t.getParam("iconfonts_selector",e);return t.on("PreInit",function(){t.schema.addValidElements("i[class|contenteditable]")}),t.on("BeforeSetContent",function(t){for(var e=(new DOMParser).parseFromString(t.content,"text/html"),o=e.body.querySelectorAll(n),r=0;r<o.length;r++)o[r].getAttribute("data-mce-iconfont")||(o[r].setAttribute("data-mce-iconfont",!0),o[r].setAttribute("data-mce-iconfont-html",o[r].innerHTML),o[r].setAttribute("contenteditable",!1),o[r].innerHTML+="\x3c!-- icon --\x3e");t.content=e.body.innerHTML}),t.on("GetContent",function(t){for(var e=(new DOMParser).parseFromString(t.content,"text/html"),o=e.body.querySelectorAll(n),r=0;r<o.length;r++)o[r].getAttribute("data-mce-iconfont")&&(o[r].innerHTML=o[r].getAttribute("data-mce-iconfont-html"),o[r].removeAttribute("data-mce-iconfont"),o[r].removeAttribute("data-mce-iconfont-html"),o[r].removeAttribute("contenteditable"));t.content=e.body.innerHTML}),{getMetadata:function(){return{name:"Icon Fonts",url:"https://github.com/claviska/tinymce-iconfonts"}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi5qcyJdLCJuYW1lcyI6WyJ0aW55bWNlIiwiUGx1Z2luTWFuYWdlciIsImFkZCIsImVkaXRvciIsImRlZmF1bHRTZWxlY3RvciIsImpvaW4iLCJzZWxlY3RvciIsImdldFBhcmFtIiwib24iLCJzY2hlbWEiLCJhZGRWYWxpZEVsZW1lbnRzIiwiZXZlbnQiLCJkb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJjb250ZW50IiwibWF0Y2hlcyIsImJvZHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsInJlbW92ZUF0dHJpYnV0ZSIsImdldE1ldGFkYXRhIiwibmFtZSIsInVybCJdLCJtYXBwaW5ncyI6IkFBQUEsYUFTSUEsUUFBUUMsY0FBY0MsSUFBSSxZQUFhLFNBQUFDLEdBRXJDLElBQU1DLEVBQWtCLENBQ3RCLE1BQ0EsT0FBUSxPQUFRLE9BQVEsT0FDeEIsY0FDQUMsS0FBSyxLQUVEQyxFQUFXSCxFQUFPSSxTQUFTLHFCQUFzQkgsR0FpRXZELE9BOURBRCxFQUFPSyxHQUFHLFVBQVcsV0FDbkJMLEVBQU9NLE9BQU9DLGlCQUFpQiw4QkFlakNQLEVBQU9LLEdBQUcsbUJBQW9CLFNBQUFHLEdBSzVCLElBSkEsSUFDTUMsR0FEUyxJQUFJQyxXQUNBQyxnQkFBZ0JILEVBQU1JLFFBQVMsYUFDNUNDLEVBQVVKLEVBQUlLLEtBQUtDLGlCQUFpQlosR0FFakNhLEVBQUksRUFBR0EsRUFBSUgsRUFBUUksT0FBUUQsSUFDN0JILEVBQVFHLEdBQUdFLGFBQWEsdUJBQzNCTCxFQUFRRyxHQUFHRyxhQUFhLHFCQUFxQixHQUM3Q04sRUFBUUcsR0FBR0csYUFBYSx5QkFBMEJOLEVBQVFHLEdBQUdJLFdBQzdEUCxFQUFRRyxHQUFHRyxhQUFhLG1CQUFtQixHQUMzQ04sRUFBUUcsR0FBR0ksV0FBYSx1QkFJNUJaLEVBQU1JLFFBQVVILEVBQUlLLEtBQUtNLFlBZTNCcEIsRUFBT0ssR0FBRyxhQUFjLFNBQUFHLEdBS3RCLElBSkEsSUFDTUMsR0FEUyxJQUFJQyxXQUNBQyxnQkFBZ0JILEVBQU1JLFFBQVMsYUFDNUNDLEVBQVVKLEVBQUlLLEtBQUtDLGlCQUFpQlosR0FFakNhLEVBQUksRUFBR0EsRUFBSUgsRUFBUUksT0FBUUQsSUFDOUJILEVBQVFHLEdBQUdFLGFBQWEsdUJBQzFCTCxFQUFRRyxHQUFHSSxVQUFZUCxFQUFRRyxHQUFHRSxhQUFhLDBCQUMvQ0wsRUFBUUcsR0FBR0ssZ0JBQWdCLHFCQUMzQlIsRUFBUUcsR0FBR0ssZ0JBQWdCLDBCQUMzQlIsRUFBUUcsR0FBR0ssZ0JBQWdCLG9CQUkvQmIsRUFBTUksUUFBVUgsRUFBSUssS0FBS00sWUFHcEIsQ0FDTEUsWUFBYSxXQUNYLE1BQVEsQ0FDTkMsS0FBTSxhQUNOQyxJQUFLIiwiZmlsZSI6InBsdWdpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnbG9iYWw6IHRpbnltY2Vcbi8vXG4vLyBUaGlzIHBsdWdpbiBwcmV2ZW50cyBpY29uIGZvbnRzIGZyb20gYmVpbmcgcmVtb3ZlZCBpbiBUaW55TUNFLiBJdCBhbHNvIG1ha2VzIHRoZW0gc2VsZWN0YWJsZSBzb1xuLy8geW91IGNhbiBlYXNpbHkgY29weS9wYXN0ZS9kZWxldGUgdGhlbS5cbi8vXG4vLyBUaGUgYWJpbGl0eSB0byBjaGFuZ2UgYW4gaWNvbiBpcyBiZXlvbmQgdGhlIHNjb3BlIG9mIHRoaXMgcGx1Z2luLlxuLy9cbihmdW5jdGlvbigpIHtcbiAgY29uc3QgaWNvbmZvbnRzID0gKGZ1bmN0aW9uKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdGlueW1jZS5QbHVnaW5NYW5hZ2VyLmFkZCgnaWNvbmZvbnRzJywgZWRpdG9yID0+IHtcblxuICAgICAgY29uc3QgZGVmYXVsdFNlbGVjdG9yID0gW1xuICAgICAgICAnLmZhJywgLy8gRm9udCBBd2Vzb21lIDRcbiAgICAgICAgJy5mYWInLCAnLmZhbCcsICcuZmFyJywgJy5mYXMnLCAvLyBGb250IEF3ZXNvbWUgNVxuICAgICAgICAnLmdseXBoaWNvbicgLy8gR2x5cGhpY29uc1xuICAgICAgXS5qb2luKCcsJyk7XG5cbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZWRpdG9yLmdldFBhcmFtKCdpY29uZm9udHNfc2VsZWN0b3InLCBkZWZhdWx0U2VsZWN0b3IpO1xuXG4gICAgICAvLyBNYWtlIHN1cmUgPGk+IGlzIGEgdmFsaWQgZWxlbWVudFxuICAgICAgZWRpdG9yLm9uKCdQcmVJbml0JywgKCkgPT4ge1xuICAgICAgICBlZGl0b3Iuc2NoZW1hLmFkZFZhbGlkRWxlbWVudHMoJ2lbY2xhc3N8Y29udGVudGVkaXRhYmxlXScpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByZXBhcmUgaWNvbiBmb250IGVsZW1lbnRzIHdoZW4gY29udGVudCBpcyBzZXQuXG4gICAgICAvL1xuICAgICAgLy8gVGhpczpcbiAgICAgIC8vXG4gICAgICAvLyAgIDxpIGNsYXNzPVwiZmFyIGZhLWNoZWNrXCI+PC9pPlxuICAgICAgLy9cbiAgICAgIC8vIFdpbGwgYmVjb21lIHRoaXM6XG4gICAgICAvL1xuICAgICAgLy8gICA8aSBjbGFzcz1cImZhciBmYS1jaGVja1wiIGRhdGEtY21zLWljb249XCJ0cnVlXCIgY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIj5cbiAgICAgIC8vICAgICA8IS0tIGljb24gLS0+XG4gICAgICAvLyAgIDwvaT5cbiAgICAgIC8vXG4gICAgICBlZGl0b3Iub24oJ0JlZm9yZVNldENvbnRlbnQnLCBldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhldmVudC5jb250ZW50LCAndGV4dC9odG1sJyk7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBkb2MuYm9keS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1tY2UtaWNvbmZvbnQnKSkge1xuICAgICAgICAgICAgbWF0Y2hlc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWNlLWljb25mb250JywgdHJ1ZSk7XG4gICAgICAgICAgICBtYXRjaGVzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1tY2UtaWNvbmZvbnQtaHRtbCcsIG1hdGNoZXNbaV0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgIG1hdGNoZXNbaV0uc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXRjaGVzW2ldLmlubmVySFRNTCArPSAnPCEtLSBpY29uIC0tPic7IC8vIG1ha2UgaXQgbm90IGVtcHR5IHNvIFRpbnlNQ0Ugd29uJ3QgcmVtb3ZlIGl0XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQuY29udGVudCA9IGRvYy5ib2R5LmlubmVySFRNTDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZXN0b3JlIGljb24gZm9udHMgd2hlbiBjb250ZW50IGlzIGZldGNoZWQuXG4gICAgICAvL1xuICAgICAgLy8gVGhpczpcbiAgICAgIC8vXG4gICAgICAvLyAgIDxpIGNsYXNzPVwiZmFyIGZhLWNoZWNrXCIgZGF0YS1jbXMtaWNvbj1cInRydWVcIiBjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiPlxuICAgICAgLy8gICAgIDwhLS0gaWNvbiAtLT5cbiAgICAgIC8vICAgPC9pPlxuICAgICAgLy9cbiAgICAgIC8vIFdpbGwgZ28gYmFjayB0byB0aGlzOlxuICAgICAgLy9cbiAgICAgIC8vICAgPGkgY2xhc3M9XCJmYXIgZmEtY2hlY2tcIj48L2k+XG4gICAgICAvL1xuICAgICAgZWRpdG9yLm9uKCdHZXRDb250ZW50JywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgIGNvbnN0IGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZXZlbnQuY29udGVudCwgJ3RleHQvaHRtbCcpO1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gZG9jLmJvZHkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1jZS1pY29uZm9udCcpKSB7XG4gICAgICAgICAgICBtYXRjaGVzW2ldLmlubmVySFRNTCA9IG1hdGNoZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1jZS1pY29uZm9udC1odG1sJyk7XG4gICAgICAgICAgICBtYXRjaGVzW2ldLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1tY2UtaWNvbmZvbnQnKTtcbiAgICAgICAgICAgIG1hdGNoZXNbaV0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1jZS1pY29uZm9udC1odG1sJyk7XG4gICAgICAgICAgICBtYXRjaGVzW2ldLnJlbW92ZUF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQuY29udGVudCA9IGRvYy5ib2R5LmlubmVySFRNTDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRNZXRhZGF0YTogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiAge1xuICAgICAgICAgICAgbmFtZTogJ0ljb24gRm9udHMnLFxuICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL2NsYXZpc2thL3RpbnltY2UtaWNvbmZvbnRzJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0pKCk7XG59KSgpO1xuIl19