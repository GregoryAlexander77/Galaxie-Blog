<wddxPacket version='1.0'><header/><data><recordset rowCount='73' fieldNames='ID,TITLE,BODY,POSTED,MOREBODY,ALIAS,USERNAME,ALLOWCOMMENTS,ENCLOSURE,FILESIZE,MIMETYPE,VIEWS,RELEASED,MAILED' type='coldfusion.sql.QueryTable'><field name='ID'><string>A757CD9A-AB21-0856-F2D57758ABF49746</string><string>DCC492C6-9659-B96C-74E20EAF55230386</string><string>B26A166A-9B83-A223-52C1B2522DFB6B9F</string><string>B299B449-C852-7886-90E90871D4AB7DAC</string><string>D0484D1A-958C-874B-82D0BC600816774E</string><string>55DA4FBD-0775-2155-6249D95853F702B6</string><string>85DFCC40-E919-05B7-3C20CB7AF77F8CAF</string><string>5E93C029-A1DB-7374-FE6740B2CB2D8AEE</string><string>EA7A1F34-DE6E-DD1C-699A70130FE213FF</string><string>63C656E3-DF17-586A-6AD67A7D8FDC350D</string><string>F1711CD5-0BA4-0223-9A2947D1371BB2AA</string><string>9C4FACE7-F703-EF94-FE8ED5841C6A67D3</string><string>0D568D72-0615-716E-90F0B642D8BEB9E7</string><string>3865509D-EC8C-6F27-4D8BCC07C2253A44</string><string>0CAB3596-D5FC-2742-7132103412CAA865</string><string>114BA10E-D00C-8B4F-8C1B3853E0CF49BE</string><string>32364FFC-A834-4F20-18C94DAC55CB983A</string><string>E7211090-DBDC-F257-96B13ACD9DB41837</string><string>0738B7B8-F51E-AA02-EAA18BD9B2BD4AA0</string><string>4AEFF03F-E47A-6214-9850C087D1177F3F</string><string>B6420F6E-0A91-31C5-AD6DCFD5EF898000</string><string>DCB91064-C8AC-32F2-CBBB49EEA7BBB645</string><string>056BE825-E1AB-1CFC-B6A2850B6913D400</string><string>201E7078-D25F-61F9-1508BAC9A1DC924D</string><string>1B0FF1CE-00E0-47BE-CCE369F3D40837CE</string><string>B64A7ADA-A410-03E5-397FE5CBA384D67F</string><string>47E9E8CC-FA95-1200-FE92FA5B7111ADC5</string><string>76A0A653-F18D-2AE9-A5523CB78BA11CE5</string><string>3F0F3298-EB26-1A40-601734C5F49DEB68</string><string>16E01D79-C4FF-06DB-776CF99C0D9F25A4</string><string>BB0FAC45-C1F1-5C1A-3BCE42E222F411A5</string><string>10823EA5-FEAE-525B-892F7F120DDCA2E3</string><string>BC03F7C3-D826-E9DC-02C7853355237E45</string><string>361B1EDD-F97A-5C97-B02B2FE31D458431</string><string>366A9C47-0FF2-2B40-9CF436030F139593</string><string>D7B3ABE2-EEB0-EB63-2F3F1939D956AF8E</string><string>B907A42A-B0D7-4BD4-541CEC0B4A2A2856</string><string>5828C6EA-F126-DA7B-35A11BD04400069C</string><string>6D5059F0-FAC4-B12D-A13DB942AC8E3311</string><string>28DC8E64-A9B1-FCB8-B8E58DC8FC683381</string><string>3D6677A5-F25B-7AB1-FAB52D4D58B9B783</string><string>5E0EEB34-0533-F2BA-5BFEB7D535BAAB5E</string><string>6C04DC8C-FF58-C02F-8C38E2BEEBCA282B</string><string>94982C16-EFD0-93CC-042913498BC20BEE</string><string>A3454596-DCC7-1CD9-779795153518F8C9</string><string>0A225FD4-A2B3-BC38-F6C13BFC94186B41</string><string>6E04F8A4-0531-C1E7-8414AB0DFD39E3ED</string><string>C882824D-DF36-8C9B-3E059801E7496925</string><string>E18C4976-D6E3-7A6D-8388DA6E4F0131F9</string><string>7C12C6DC-BB3C-757A-83566B3A5E246042</string><string>AF3D655D-FB02-0658-4DFFCE91691117EF</string><string>E1A4173A-F199-F159-D2AF50BBA5019AF5</string><string>32F1D0B6-C4CF-767D-8BFBED57A8364361</string><string>70131D96-9F48-6707-4B3DBDE81475D992</string><string>D735A2C9-C024-8EA0-6B16041647209DDC</string><string>00FF1329-E9E9-AF41-4A91256B5076404C</string><string>45C6C4D6-974B-3026-01CC6B549E8F4824</string><string>D1C22BEB-ED5D-5B4C-F78E69B7B3692C77</string><string>04B9E874-0C52-764A-89999B0F27690158</string><string>8A07C7BC-DFA6-AE87-A55E91CB5DD8CB19</string><string>44DFCDA7-C952-1DFE-D80074A0152F12DD</string><string>7AA0C33E-D664-F316-0EDD32C5F77C303C</string><string>4820181A-FC0B-43A2-F5C474C50F4D7B0B</string><string>A5E4558E-E701-5DC6-D86F2DA98EEFADF9</string><string>0F088C4B-0289-7ADD-7083B6B88D305503</string><string>12658757-03EF-9E6C-EB5E556A2BEB1E36</string><string>14FB97B8-E772-9700-77F48ECEB923392C</string><string>B87E9C00-E2A1-6E6E-6A26E7F1633225F2</string><string>3A7D4334-A854-9B73-7B4630D71BCC409E</string><string>51176015-DCF3-5194-2C5C866C604B3467</string><string>BD05CC03-A1B8-F1DA-87048478A8985281</string><string>3801FCB1-021D-9A26-DDB0FE04296965AB</string><string>0A250D38-C57E-2D7B-BB00C92DBADA55BB</string></field><field name='TITLE'><string>Introductory purpose</string><string>Needed to develop a new proxy function</string><string>Localization Support Dropped</string><string>BlogCfc administration</string><string>Shorthand struct return</string><string>New HTML 5 Media Player</string><string>Done with the draft version of Galaxie Blog</string><string>Kendo Responsive Panel</string><string>Responsive Web Design</string><string>Kendo Server Side Validation</string><string>How to add additional descriptive elements to an element with 'data-'</string><string>Kendo scrollview</string><string>Reopen an existing Kendo window.</string><string>Kendo template with void to consume a function in an anchor link</string><string>Kendo tooltips with multiple classes and styles.</string><string>How to get both background and non-background images using the imagesLoaded library.</string><string>Set active kendo tab</string><string>JSON Parse Error in jQuery when using a Coldfusion function inside a .cfm page.</string><string>Data types may be different between ColdFusion and jQuery.</string><string>ColdFusion arrays can't use zero as an index.</string><string>Social Media Sharing with Galaxie Blog</string><string>Galaxie Blog default user name and password after fresh installation</string><string>ColdFusion error: "The current user is not authorized to invoke this method."</string><string>An open source version of Kendo Core is incorporated in Galaxie Blog</string><string>Using the Kendo pager anywhere within a page.</string><string>Installing Galaxie Blog on your own website.</string><string>Immediate steps after installation</string><string>Theme Settings in the administrative web interface.</string><string>Using a dynamic variable to set a dynamic path variable when dropping a cookie</string><string>Fine tuning your theme with Kendo Theme Builder</string><string>Explorer Search</string><string>Using top: auto will not work when vertically aligning text within multiple block level elements.</string><string>Introducing Galaxie Blog</string><string>My biggest SEO problem....</string><string>Galaxie Blog status update</string><string>How to speed up your site with lazy loading</string><string>Google Lighthouse Metrics for Galaxie Blog Version 1.35</string><string>Introducing Galaxie Blog 1.35 with a new Parallax Scene</string><string>Demonstrating the benefits of the new webp image format</string><string>Disqus has been incorporated into Galaxie Blog</string><string>Register your site with Disqus - Part 1</string><string>Obtaining a Disqus API Key - Part 2</string><string>Incorporate Disqus into Galaxy Blog - Part 3</string><string>Adding multiple Disqus comments on one page</string><string>Building your own Disqus Recent Comments Widget</string><string>Pressure cooked ‘KFC’ style chicken with the Magfesa star pressure cookers.</string><string>Enabling Search Engine Friendly Links with Url Re-write in Galaxie Blog</string><string>How to make the perfect social media sharing image - part 1 Background</string><string>How to make the perfect social media sharing image - part 2 Getting the Size Right</string><string>How to make the perfect social media sharing image - part 3 Get the code...</string><string>How to make the perfect social media sharing image - part 4 Image Examples</string><string>How to make the perfect social media sharing image - part 5 Essential Meta Tags</string><string>How to make the perfect social media sharing image - part 6 Validation tools and tips</string><string>Plyr, a HTML5 media player, is incorporated into Galaxie Blog</string><string>Integrating a HTML5 Media Player using Plyr</string><string>Sharing Video's to Facebook and Twitter</string><string>Plyr Themes now match Galaxie Blog's Kendo UI themes</string><string>ColdFusion Orm, a fantastic book by John Whish</string><string>ColdFusion ORM Error - java.lang.Integer, etc.</string><string>How to make a round Kendo UI button</string><string>Galaxie Blog XML Post Directives</string><string>Embedding a video from YouTube in Galaxie Blog</string><string>Embedding a Video from Vimeo in Galaxie Blog</string><string>Playing your own video content with Galaxie Blog</string><string>Introducing ColdFusion ORM</string><string>Understanding ColdFusion ORM Relationships</string><string>Using ColdFusion ORM to Populate the Database</string><string>Galaxie Blog Winter Update and Roadmap</string><string>Adding a dummy record in the first row of a recordset</string><string>Galaxie Blog Status Update</string><string>Happy New Year!</string><string>Extending Application.cfc's using mappings and proxies</string><string>CfBlogs.org - A New ColdFusion Blog Aggregator</string></field><field name='BODY'><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I am hoping to redesign Raymond Camden's BlogCfc, a blog based upon ColdFusion first introduced by Raymond, around 2003. This particular blog engine was last updated in late 2012. My purpose is to use a popular ColdFusion related blog and to convert the UI into a Telerik Kendo UI. Suffice it to say- this blog is for geeks. That said, I'll still write this with the intention of making it comfortable for the non-web developer to follow along (just in case there is a lightning bolt chance that one such non-tech will want to follow along!).&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2018/10/30/Introductory-purpose"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2018/10/30/Introductory-purpose",<char code='0d'/><char code='0a'/>  "headline": "Digging in to a major redesign",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/creation.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/creation.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/creation.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : I am hoping to redesign Raymond Camden's BlogCfc, a blog based upon ColdFusion first introduced by Raymond, around 2003. This particular blog engine was last updated in late 2012. My purpose is to use a popular ColdFusion related blog and to convert the UI into a Telerik Kendo UI. Suffice it to say- this blog is for geeks. That said, I'll still write this with the intention of making it comfortable for the non-web developer to follow along (just in case there is a lightning bolt chance that one such non-tech will want to follow along!).",<char code='0d'/><char code='0a'/>  "datePublished": "2018-10-30",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I am hoping to redesign Raymond Camden's BlogCfc, a blog based upon ColdFusion first introduced by Raymond, around 2003. This particular blog engine was last updated in late 2012. My purpose is to use a popular ColdFusion related blog and to convert the UI into a Telerik Kendo UI. Suffice it to say- this blog is for geeks. That said, I'll still write this with the intention of making it comfortable for the non-web developer to follow along (just in case there is a lightning bolt chance that one such non-tech will want to follow along!).<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have been using ColdFusion since 1998? It was version 2.5 I believe... I started off using ColdFusion's built in UI, and quickly became disappointed. It was fine for beginners, but problematic when using it for enterprise web applications. The ColdFusion UI was brittle, you could not expand the functionality, and you had to purchase a new version of ColdFusion in order to update it- if you could at all. The overall consensus among serious developers was to use something other than ColdFusion's built in UI.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I personally settled on using Telerik's Kendo library with jQuery. I found this UI to be powerful, and beautiful. One of the problems with current front end design is that the method in which to beautify the page requires very long and complex style sheets. Often, the style sheets are almost as complex as the server side code. I wanted to use a library that was powerful, looked really good, but did not require a lot of fuss in the UI.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Kendo offers me dozens of predefined themes that I can use for generic enterprise class web applications, and allows the front end to look really good with minimal fuss. Kendo also offers rich HTML5 web widgets, such as a beautiful grid that supports editing data sets with millions of rows. It also forces the developer to use modern HTML5 code. Kendo is not without issues though. As we will see, it is complex, and getting it to work can be tedious at times. I hope to annotate some of the challenges using Kendo, but it is in my opinion, one of the most powerful and elegant UI libraries around. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In regards to ColdFusion, another major issue with Kendo is that  It is also completely absent among ColdFusion developers. I can't find any body of information to go to when things go astray. Telerik does not offer any ColdFusion wrappers, and Telerik only markets and supports its product for .Net, PHP, and JSP. If at all possible, I hope that this blog can be a resource to ColdFusion developers to use Kendo, even if exploratively. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have admired the original author of the code base that powers this blog, and use his own blog examples of ColdFusion and code for my own professional use. Raymond Camden is a legend in the ColdFusion community. His posts on the internet have literally saved my professional bacon many times. I am happy to try to re-engineer one of his own older applications to fulfill this purpose. I'm going to make decisions with his original open source code, and hope to thoroughly rewrite it. And ironically, I will likely use his new blogging layout at https://www.raymondcamden.com/ as an example how to best re-design his older original code.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Raymond's approach was typical in the mid 2000's. He posted a form to a .cfm page, and the server processed server side logic as well as performing client side operations, like setting form values on the client. However, Ajax is a different beast. Most of our Kendo HTML5 interfaces do not post to another HTML page. Instead, the UI elements, such as the Kendo window, posts limited data to a function that has to perform all of the logic without refreshing the client page. However, for several reasons, the blog.cfc component does not have all of the information that I need to do this successfully.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2018/11/10/Digging-in-to-a-major-redesign"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2018/11/10/Digging-in-to-a-major-redesign",<char code='0d'/><char code='0a'/>  "headline": "Digging in to a major redesign",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/proxy.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/proxy.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/proxy.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : Raymond's approach was typical in the mid 2000's. He posted a form to a .cfm page, and the server processed server side logic as well as performing client side operations, like setting form values on the client. However, Ajax is a different beast. Most of our Kendo HTML5 interfaces do not post to another HTML page. Instead, the UI elements, such as the Kendo window, posts limited data to a function that has to perform all of the logic without refreshing the client page. However, for several reasons, the blog.cfc component does not have all of the information that I need to do this successfully.",<char code='0d'/><char code='0a'/>  "datePublished": "2018-11-09",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Raymond's approach was typical in the mid 2000's. He posted a form to a .cfm page, and the server processed server side logic as well as performing client side operations, like setting form values on the client. However, Ajax is a different beast. Most of our Kendo HTML5 interfaces do not post to another HTML page. Instead, the UI elements, such as the Kendo window, posts limited data to a function that has to perform all of the logic without refreshing the client page. However, for several reasons, the blog.cfc component does not have all of the information that I need to do this successfully.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>First, we can't get session vars in the main blog.cfc. Raymond (and et-al) had another application.cfm in the org/cambden/blog folder that prevented this component from having access to the session variables set on the /blogCfc/application.cfm template. Cfc's should have access to the session scope unless it finds another application.cfm (or cfc) template, and here, this is the case.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This poses some problems with ajax. I do not want to have to hard code authentication variables, like the isAdmin, in a javascript ajax post. This is quite insecure.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I tried in vain to get the blog.cfc component to work for my purposes. After finding and eliminating the 'other' application.cfm template which caused problems accessing the session scope, I was able to obtain session variables, but the elimination of the application.cfm template in the same directory caused new problems. One example is that the isUserInRole function is now erroring out with an 'You have attempted to dereference a scalar variable of type class java.lang.String as a structure with members.'. This new error was raised throughout the blog.cfc template.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Another issue is that I suspect that the /blogCfc/org/delmore/coldfishconfig.xml file is not working when the application.cfm template is disabled. This file most likely deals with the cfauthentication tag. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In order to have the session scope, and in order to potentially cache the code after an ajax operation, I had to develop a new template to act as a proxy. I am not using a .cfc component for ajax post operations as I need the session variables and need to perform client side operations, such as setting form values, and caching the output of the page. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Goals: The proxy  template will use Raymond's blog.cfc to perform all database operations. Whenever possible, I will perform server side business logic using Raymonds Blog.cfc.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I am going to forgo using Raymond's localization support for this version. In one of the next versions, if someone wants to assist me in translating the English into the supported languages, I may revisit this decision and incorporate localization into the code.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2018/12/9/Localization-Support-Dropped"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2018/12/9/Localization-Support-Dropped",<char code='0d'/><char code='0a'/>  "headline": "I need to rewrite BlogCfc administration interface at a later time",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/languages.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/languages.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/languages.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I am going to forgo using Raymond's localization support for this version. In one of the next versions, if someone wants to assist me in translating the English into the supported languages, I may revisit this decision and incorporate localization into the code.",<char code='0d'/><char code='0a'/>  "datePublished": "2018-12-08",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I am going to forgo using Raymond's localization support for this version. To incorporate a few languages, Raymond uses the resourceBundle.cfc template that was originally coded by Paul Hastings. I believe that it supports two variants Dutch and German languages, along with English of course. Raymond labels his buttons and text messages in the different languages in 4 different .properties files, and uses the 'rb('message var') function to display the text and messages. <char code='0d'/><char code='0a'/>I have decided not to incorporate the localization as I can't translate between English and the other languages, and this blog is also intended to be a living example how to use Kendo with ColdFusion. Using 'rb('pleaseWait') in my code will be confusing to the reader wanting to know how I am using ColdFusion and Kendo. It is much easier to read: &lt;code&gt;'$.when(kendo.ui.ExtWaitDialog.show({ title: "Please wait...", message: "Searching.", icon: "k-ext-information" }));'&lt;/code&gt; than &lt;code&gt;'$.when(kendo.ui.ExtWaitDialog.show({ title: "&lt;cfoutput&gt;#rb(pleaseWait)#&lt;/cfoutput&gt;", message: "&lt;cfoutput&gt;#rb(searching)#&lt;/cfoutput&gt;", icon: "k-ext-information" }));'&lt;/code&gt; for example.<char code='0d'/><char code='0a'/>In one of the next versions, if someone wants to assist me in translating the English into the supported languages, I may revisit this decision and incorporate localization into the code.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Unfortunately, there is a conflict with BlogCfc's original jQuery UI and Kendo libraries, so I will not be able to incorporate Kendo into the administration section in a timely manner without a complete administration re-write. While I do intend to re-writing the admin section, it is my intention on this first version to focus on different themes, and launch the new BlogCfc with a minimum amount of change.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2018/12/14/BlogCfc-administration"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2018/12/14/BlogCfc-administration",<char code='0d'/><char code='0a'/>  "headline": "I need to rewrite BlogCfc administration interface at a later time",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/procrastinate.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/procrastinate.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/procrastinate.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Unfortunately, there is a conflict with BlogCfc's original jQuery UI and Kendo libraries, so I will not be able to incorporate Kendo into the administration section in a timely manner without a complete administration re-write. While I do intend to re-writing the admin section, it is my intention on this first version to focus on different themes, and launch the new BlogCfc with a minimum amount of change.",<char code='0d'/><char code='0a'/>  "datePublished": "2018-12-13",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Unfortunately, there is a conflict with BlogCfc's original jQuery UI and Kendo libraries, so I will not be able to incorporate Kendo into the administration section in a timely manner without a complete administration re-write. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This decision has an impact the preview of the pods in the administration section. The pods can't be rendered correctly as the Kendo and new jQuery libraries are not available on the administration interface. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While I do intend to re-writing the admin section, it is my intention on this first version to focus on different themes, and launch the new BlogCfc with a minimum amount of change. I am hoping that others can quickly install the new blog software and hopefully provide some feedback before the next version. I am going to continue to focus on the client UI and hope to release a .75 version soon without an administrator re-write.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:There are many ways to return multiple values from a cfc. Typically we return a query object, a json string, an array, or a structure, but one of my favorite ways to return multiple bits of data is using a shorthand structure. It is much easier and intuitive to use on both the back and front end than using an array. Here is a simple example.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2018/12/14/Shorthand-struct-return"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Using shorthand structures in your ColdFusion code",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/code.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/code.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/code.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2018/12/14/Shorthand-struct-return",<char code='0d'/><char code='0a'/>  "articleBody" : "There are many ways to return multiple values from a cfc. Typically we return a query object, a json string, an array, or a structure, but one of my favorite ways to return multiple bits of data is using a shorthand structure. It is much easier and intuitive to use on both the back and front end than using an array. Here is a simple example.",<char code='0d'/><char code='0a'/>  "datePublished": "2018-12-14",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are many ways to return multiple values from a cfc. Typically we return a query object, a json string, an array, or a structure, but one of my favorite ways to return multiple bits of data is using a shorthand structure. It is much easier and intuitive to use on both the back and front end than using an array. Here is a simple example:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Cfc:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- There are two types of routing titles. The original design used an routing title that was used to populate a contract and this title was not the official title, but something more generic that was easily identifiable on a written contract. The other title is the official title that is coming from the workday database We will use the original routing title if the user was assigned a routing title that is found in the routing database, otherwise, we will use the official workday title. ---&gt;<char code='0d'/><char code='0a'/>              &lt;cffunction name="getTitleByEmail" access="remote" returntype="struct"  hint="Determines the approver title. This will be either the routing title that was used in previous contracts, or the official title found in workday. We need to return multiple values, so this returns a one dimension array instead of a string."&gt;<char code='0d'/><char code='0a'/>                    &lt;cfargument name="email" type="string" required="yes" hint="Supply the email."&gt;<char code='0d'/><char code='0a'/>                    <char code='0d'/><char code='0a'/>                    &lt;cfparam name="title" default=""&gt;<char code='0d'/><char code='0a'/>                    <char code='0d'/><char code='0a'/>                    &lt;!---Format the email---&gt;<char code='0d'/><char code='0a'/>                    &lt;cfinvoke component="#WorkdayUsersObj#" method="formatUwEmail" returnvariable="uwEmail"&gt;<char code='0d'/><char code='0a'/>                    <char code='09'/>&lt;cfinvokeargument name="email" value="#arguments.email#"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfinvoke&gt;<char code='0d'/><char code='0a'/>                    <char code='0d'/><char code='0a'/>                    &lt;!--- Query the Approval database to see if the title exists. ---&gt;<char code='0d'/><char code='0a'/>                    &lt;cfquery name="approvalTitle" datasource="Contracts"&gt;<char code='0d'/><char code='0a'/>                    <char code='09'/>SELECT TOP (1)     <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>ApproverTitle<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>FROM dbo.Approval<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>WHERE  (Email = &lt;cfqueryparam value="#uwEmail#" cfsqltype="cf_sql_varchar"&gt;) <char code='0d'/><char code='0a'/>                    &lt;/cfquery&gt;<char code='0d'/><char code='0a'/>                    &lt;!---Set the ApproverTitle---&gt;<char code='0d'/><char code='0a'/>                    &lt;cfset ApproverTitle = approvalTitle.ApproverTitle&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>    &lt;!---Get the workday job title. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>    &lt;cfinvoke component="#WorkdayUsersObj#" method="getEmployeeJobTitle" returnvariable="workdayTitle"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfinvokeargument name="email" value="#email#"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>    &lt;/cfinvoke&gt;<char code='0d'/><char code='0a'/>                    <char code='0d'/><char code='0a'/>                    &lt;!---Build the shorthand struct ---&gt;<char code='0d'/><char code='0a'/>                    &lt;cfset titleStruct = {workdayTitle = #workdayTitle#, ApproverTitle = #ApproverTitle#}&gt;<char code='0d'/><char code='0a'/>                    <char code='0d'/><char code='0a'/>                    &lt;cfreturn titleStruct&gt;<char code='0d'/><char code='0a'/>                <char code='0d'/><char code='0a'/>                &lt;/cffunction&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>On the client side, simply use the following to output the value:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfset thisRoutingTitle = getTitleByEmail(thisApproverEmail).ApproverTitle&gt;<char code='0d'/><char code='0a'/>&lt;cfset thisWorkdayTitle = getTitleByEmail(thisApproverEmail).WorkdayTitle&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;videoType:.mp4&gt;&lt;/videoType&gt;<char code='0d'/><char code='0a'/>&lt;videoPosterImageUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg&gt;&lt;/videoPosterImageUrl&gt;<char code='0d'/><char code='0a'/>&lt;smallVideoSourceUrl:https:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4&gt;&lt;/smallVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;mediumVideoSourceUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4&gt;&lt;/mediumVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;largeVideoSourceUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4&gt;&lt;/largeVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCaptionsUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt&gt;&lt;/videoCaptionsUrl&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "View from a Blue Moon",<char code='0d'/><char code='0a'/>  "description": "See the sport of surfing as its never been captured before in John Florence and Blake Vincent Kueny's second signature release, this time in association with the award-winning film studio, Brain Farm.",<char code='0d'/><char code='0a'/>  "thumbnailUrl": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer1_1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer14_3.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer16_9.jpg"<char code='0d'/><char code='0a'/>   ],<char code='0d'/><char code='0a'/>  "uploadDate": "2019-11-15",<char code='0d'/><char code='0a'/>  "duration": "PT3M03S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4",<char code='0d'/><char code='0a'/>  "embedUrl": "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/>Instead of the original flash plug-in, I have incorporated a new Kendo HTML 5 media player.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:It is the first day of the New Year, and I am happy to say that I am done incorporating the features that I wanted into the new desk-top oriented blog. It was a pleasure to use Raymond's back-end logic, and I am glad that I made the choice to use BlogCfc as the back-end when re-writing this application.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/1/2/Done-with-the-draft-version-of-Gregorys-blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Done with the first version of Galaxie Blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/newYear.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/newYear.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/newYear.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/1/2/Done-with-the-draft-version-of-Gregorys-blog",<char code='0d'/><char code='0a'/>  "articleBody" : "It is the first day of the New Year, and I am happy to say that I am done incorporating the features that I wanted into the new desk-top oriented blog. It was a pleasure to use Raymond's back-end logic, and I am glad that I made the choice to use BlogCfc as the back-end when re-writing this application.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-01-01",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>It is the first day of the New Year, and I am happy to say that I am done incorporating the features that I wanted into the new desk-top oriented blog. After working with Raymond's back-end code, I am quite impressed with the logic that it contains and how he anticipated functional logic, even though the logic was not used within the original BlogCfc UI. For example, the getEntries method allows passing in a string of categories when you are using the search interface, even though the original blogCfc only allowed one category to be selected at a time. With the new interface that I have programmed, I designed the search to use one or more categories with a Kendo multi-select drop down box. I had thought that I would need to revise Raymond's original getEntries method to allow one or more categories, but found out that I can pass more than one category value as a list. This is just how I would have designed this if I had the time, but Raymond already designed his function to be used for multiple arguments, even though the UI did not use that logic in the original interface. I also looked for various functions that I had thought to write, and I found them in Raymond's code-base, often with the same name that I would have used as if I had wrote them myself. I found Raymond's back-end logic both powerful and intuitive. It was a pleasure to use Raymond's back-end logic, and I am glad that I made the choice to use BlogCfc as the back-end when re-writing this application. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I intend to work on getting my own personal site up, developing the responsive mobile blog, and then go through more testing before launching this new blog software. This is a part-time weekend project. I have a lot of other stuff vying for my attention, as well as being married, having kids, and a working a full time job; this may take several months.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Gregory</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:While working on the mobile site, I had a few challenges with the Kendo responsive panel that I solved with the blog today, and wanted to make a post about it as I could not find any other solution on the web.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/2/10/Kendo-Responsive-Panel"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Tricks and Tips for the Kendo Responsive Panel",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/responsivePanel.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/responsivePanel.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/responsivePanel.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/2/10/Kendo-Responsive-Panel",<char code='0d'/><char code='0a'/>  "articleBody" : "I am spending quite a bit of time making the new blog responsive. My goal is to make the mobile site fully functional and to make it look as nice as the application on the web. I ran into some major hurdles and will share how to solved them.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-02-09",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While working on the mobile site, I had a few challenges with the Kendo responsive panel that I solved with the blog today, and wanted to make a post about it as I could not find any other solution on the web. I ran into someone posting the same scrolling question as I was looking to solve on stack overflow, but could not find anything else on the web. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The responsive panel is used to provide a slide-out menu on mobile devices when you click on what is commonly known as a 'hamburger. The panel is used in responsive web design and is triggered when the device reaches a certain minimum screen width. Here is the code that I developed for this blog:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;nav id="sidebarPanel" class="k-content"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!---Suppply the sideBarType argument before loading the side bar---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset sideBarType = "panel"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfinclude template="includes/layers/sidebar.cfm"&gt;<char code='0d'/><char code='0a'/>&lt;/nav&gt;&lt;!---&lt;nav id="sidebar"&gt;---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;!--- This script must be placed underneath the layer that is being used in order to effectively work as a flyout menu.---&gt;<char code='0d'/><char code='0a'/>Javascript<char code='0d'/><char code='0a'/><char code='09'/>$("#sidebarPanel").kendoResponsivePanel({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>breakpoint: 1280,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>orientation: "left",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>autoClose: true<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>})<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>.on("click", "a", function(e) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>$("#sidebarPanel").kendoResponsivePanel("close");<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There were several challenges that I ran into when developing this. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>First, I tried to use the same div element that I use on the right side of the page to hold the various widgets, such as the calendar, subscribe, recent posts, etc. However, I noticed that if I tried to use the same div for the responsive menu, I could no longer apply certain css properties to the panel, and it was stuck at the top of the page.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>To solve this, I used a different div at the end of the application to serve as the responsive panel, duplicated the logic from the right column, and put it into the new panel at the end of the page. I also created a script to show the new responsive panel when the screen size hit the breakpoint setting (1280 pixels), and hid the original div that is on the right column. Here is the relevant portions of the code:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Handle the sidebar and the sideBarPanels<char code='0d'/><char code='0a'/><char code='09'/>if (windowWidth &lt;= 1280){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Hide the sidepanel (the responsive panel will takeover here).<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$( "#sidebar" ).hide();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Show the responsive panel<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$( "#sidebarPanel" ).show();<char code='0d'/><char code='0a'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Show the sidebar, and hide the responsive panel<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$( "#sidebar" ).show();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$( "#sidebarPanel" ).hide();<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Second, the hamburger showed up, but it closed as soon as I tried to open it. I found the following solution while searching the web:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Important note: this is a workaround with a google chrome bug and mobile devices. <char code='0d'/><char code='0a'/>// This prevents the following error: "Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive."<char code='0d'/><char code='0a'/>// See https://github.com/telerik/kendo-ui-core/issues/3556<char code='0d'/><char code='0a'/>$(".k-rpanel-toggle").on("touchend", function(e) { <char code='0d'/><char code='0a'/><char code='09'/> e.preventDefault();<char code='0d'/><char code='0a'/>});<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Third, I ran into problems where to put the resonsivePanel initiation script. I found out that it must be at underneath the actual element that it will be placed into. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>It now works, however, there is a big problem. I could not scroll down the responsive panel when it was triggered. It just stayed in a fixed position and only showed the top part of the page. I looked everywhere in the Kendo site, and then on the internet, looking for some arcane argument that I could use, such as scrollable: true, but couldn't find any. I then looked at the similar jQuery UI menu, and inspected Telerik's production page which has a responsive panel and found that they both used the css declaration: position: absolute;<char code='0d'/><char code='0a'/>&lt;code&gt;position: absolute;&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Fourth. Ok, that fixed that problem, but now the div layer disappeared at the bottom of the page. I tried setting height to 100%, but that failed too. So I looked at both jQuery and Kendo's panels again, and noticed that they also used: height: auto;  <char code='0d'/><char code='0a'/>&lt;code&gt;height: auto; &lt;/code&gt;<char code='0d'/><char code='0a'/>Also, use the autoclose argument to be false on the responsive panel widget, otherwise you won't be able to able to keep the layer open when scrolling past the bottom of the first page. <char code='0d'/><char code='0a'/>That worked! The panel can be scrolled now. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The final working code is pasted below:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>CSS:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>/* The side bar panel is essentially a duplicate of the sidebar div, however, it is a responsive panel used when the screen size gets small. */<char code='0d'/><char code='0a'/>#sidebarPanel {<char code='0d'/><char code='0a'/>/* We are going to eliminate this sidebar for larger devices, and activate it when the screen size gets to a certain size. */<char code='0d'/><char code='0a'/>display: none;<char code='0d'/><char code='0a'/>/* Note: the panel will not scroll with the blog content unless there is a css position: absolute. */<char code='0d'/><char code='0a'/>position: absolute;<char code='0d'/><char code='0a'/>margin: 0;<char code='0d'/><char code='0a'/>/* Apply more padding to the right to keep things uniform. */<char code='0d'/><char code='0a'/>padding: 20px 40px 20px 20px;<char code='0d'/><char code='0a'/>width: 45%;<char code='0d'/><char code='0a'/>/* Note: if you don't set 'height: auto', the panel will not be displayed below the bottom of the page. */<char code='0d'/><char code='0a'/>height: auto;<char code='0d'/><char code='0a'/>vertical-align: top;<char code='0d'/><char code='0a'/>overflow: visible;<char code='0d'/><char code='0a'/>border-right: thin;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>/* Put a drop shadow on the panel when it is expanded. */<char code='0d'/><char code='0a'/>#sidebarPanel.k-rpanel-expanded {<char code='0d'/><char code='0a'/>         box-shadow: 0 0 10px rgba(0,0,0,.3);<char code='0d'/><char code='0a'/> }<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>CFML:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!---This is the sidebar responsive navigation panel that is triggered when the screen gets to a certain size. It is a duplicated of the sidebar div above, however, I can't properly style the sidebar the way that I want to within the blog content, so it is duplicated without the styles here.---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;!--- Side bar is to the right of the main panel container. It is also used as a responsive panel below when the screen size is small. ---&gt;<char code='0d'/><char code='0a'/>&lt;nav id="sidebarPanel" class="k-content"&gt;<char code='0d'/><char code='0a'/>&lt;!---Suppply the sideBarType argument before loading the side bar---&gt;<char code='0d'/><char code='0a'/>&lt;cfset sideBarType = "panel"&gt;<char code='0d'/><char code='0a'/>&lt;cfinclude template="includes/layers/sidebar.cfm"&gt;<char code='0d'/><char code='0a'/>&lt;/nav&gt;&lt;!---&lt;nav id="sidebar"&gt;---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>Javascript:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;!--- This script must be placed underneath the layer that is being used in order to effectively work as a flyout menu.---&gt;<char code='0d'/><char code='0a'/><char code='09'/>$("#sidebarPanel").kendoResponsivePanel({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>breakpoint: 1280,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>orientation: "left",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>autoClose: false // set this to false if you want the layer to stay up when you want to sroll down.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>})<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>.on("click", "a", function(e) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>$("#sidebarPanel").kendoResponsivePanel("close");<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Important note: this is a workaround with a google chrome bug and mobile devices. <char code='0d'/><char code='0a'/>// This prevents the following error: "Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive."<char code='0d'/><char code='0a'/>// See https://github.com/telerik/kendo-ui-core/issues/3556<char code='0d'/><char code='0a'/><char code='09'/>$(".k-rpanel-toggle").on("touchend", function(e) { <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>e.preventDefault();<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I am spending quite a bit of time making the new blog responsive. My goal is to make the mobile site fully functional and to make it look as nice as the application on the web. I ran into some major hurdles and will share how to solved them.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/2/12/Responsive-Web-Design"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "How to develop a responsive web site",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/responsiveSite.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/responsiveSite.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/responsiveSite.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/2/12/Responsive-Web-Design",<char code='0d'/><char code='0a'/>  "articleBody" : "I am spending quite a bit of time making the new blog responsive. My goal is to make the mobile site fully functional and to make it look as nice as the application on the web. I ran into some major hurdles and will share how to solved them.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-02-12",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I am spending quite a bit of time making the new blog responsive. My goal is to make the mobile site fully functional and to make it look as nice as the application on the web. I ran into some major hurdles. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>For example, the original code formatter, developed by Jason Delmore, expanded beyond the mobile device size. I re-wrote quite a bit of the logic in the formatter, but I did not want to re-write the core logic that provides the formatted code and lines. I had wanted to re-write every inner div and span that used position: absolute underneath the constraining parent div that had position, relative, but gave up as there were so many div's and spans. There is so much logic in the formatter that I gave up thinking about making the code responsive and instead I constrained the content like so:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>CSS:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>/* The constrainer table will constrain one or many different div's and spans to a certain size. It is handy to use when you are trying to contain the size of elements created by an older libary that does not use responsive design. */<char code='0d'/><char code='0a'/>#constrainerTable {<char code='0d'/><char code='0a'/><char code='09'/>/* The parent element (this table) should be positioned relatively. */<char code='0d'/><char code='0a'/><char code='09'/>position: relative;<char code='0d'/><char code='0a'/><char code='09'/>/* Use the root width var */<char code='0d'/><char code='0a'/><char code='09'/>width: var(--contentWidth);<char code='0d'/><char code='0a'/><char code='09'/>/* Now that the parent element has a width setting, make sure that the width does not ever exceed this */<char code='0d'/><char code='0a'/><char code='09'/>max-width: 100%;<char code='0d'/><char code='0a'/>}<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>/* Helper function to the constrainerTable to break the text when it exceeds the table dimensions */<char code='0d'/><char code='0a'/>#constrainerTable .constrainContent {<char code='0d'/><char code='0a'/><char code='09'/>max-width: 100%<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>th {<char code='0d'/><char code='0a'/><char code='09'/>max-width: var(--contentWidth);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>td {<char code='0d'/><char code='0a'/><char code='09'/>word-break: break-word;<char code='0d'/><char code='0a'/><char code='09'/>min-width: 50px;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>And the HTML:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!-- Post content --&gt; <char code='0d'/><char code='0a'/>&lt;!--- Note: Delmore's code formatter is not mobile friendly and it does not use responsive design. This table will constrain the content to a certain variable size. ---&gt;<char code='0d'/><char code='0a'/>&lt;table id="constrainerTable" class="constrainContent"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Blog post. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>#application.blog.renderEntry(body,false,enclosure)#<char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/>&lt;/table&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Fixed background image settings for mobile devices:<char code='0d'/><char code='0a'/>To use a fixed background, the main arguments here are display: block, position: fixed, z-index:-10<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>body:before {<char code='0d'/><char code='0a'/><char code='09'/>content: "";<char code='0d'/><char code='0a'/><char code='09'/>display: block;<char code='0d'/><char code='0a'/><char code='09'/>position: fixed;<char code='0d'/><char code='0a'/><char code='09'/>left: 0;<char code='0d'/><char code='0a'/><char code='09'/>top: 0;<char code='0d'/><char code='0a'/><char code='09'/>width: 100%;<char code='0d'/><char code='0a'/><char code='09'/>height: 100%;<char code='0d'/><char code='0a'/><char code='09'/>z-index: -10;<char code='0d'/><char code='0a'/><char code='09'/>background: url(&lt;cfoutput&gt;#blogBackgroundImage#&lt;/cfoutput&gt;) no-repeat center center;<char code='0d'/><char code='0a'/><char code='09'/>-webkit-background-size: cover;<char code='0d'/><char code='0a'/><char code='09'/>-moz-background-size: cover;<char code='0d'/><char code='0a'/><char code='09'/>-o-background-size: cover;<char code='0d'/><char code='0a'/><char code='09'/>background-size: cover;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Opacity settings for mobile devices: <char code='0d'/><char code='0a'/>The web application has a nice opacity effect where the theme's background image bleeds through into the interface. To accomplish the same effect for iOs devices, I used: opacity: .92 and visibility: true.<char code='0d'/><char code='0a'/>&lt;code&gt; <char code='0d'/><char code='0a'/>/* Opacity for iOs */<char code='0d'/><char code='0a'/>opacity: 0.&lt;cfoutput&gt;#siteOpacity#&lt;/cfoutput&gt;;<char code='0d'/><char code='0a'/>visibility: visible; <char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:This post describes how to use Kendo's validator for server side validation. There are very few posts showing how to use Kendo's validator with server side validation (none of them are really clear), it took me a bit of time to figure it out, and want to share my approach and will provide extensive comments.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/3/1/Kendo-Server-Side-Validation"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/3/1/Kendo-Server-Side-Validation",<char code='0d'/><char code='0a'/>  "headline": "Kendo Server Side Validation",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/serverSideValidation.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/serverSideValidation.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/serverSideValidation.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "his post describes how to use Kendo's validator for server side validation. There are very few posts showing how to use Kendo's validator with server side validation (none of them are really clear), it took me a bit of time to figure it out, and want to share my approach and will provide extensive comments.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-3-01",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This post describes how to use Kendo's validator for server side validation. There are very few posts showing how to use Kendo's validator with server side validation (none of them are really clear), it took me a bit of time to figure it out, and want to share my approach and will provide extensive comments.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>One of the reasons that there are very few posts concerning server side validation with the Kendo validator is that it is not really built to do this. Unlike the majority of the other Kendo widgets which allow for customization, the validator was meant for simple validation. The built in validation is quite useful for simple client side validation, but it is not an extensive validation library and anytime that you need to extend it you will find yourself wanting more. I felt like I was trying to hammer a square peg into a circle while coding this. However, since one of the main goals of this blog is to share how ColdFusion can use the Kendo UI, I felt the need to dig into the kendo validator.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have a captcha form on this blog that is used to verify that the user is an actual user, and it encrypts a token and passes it off to the server side for validation. You can see this in action by making a comment on this post below.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The meat and potatoes of this function, like most of the other Kendo widgets, lies in the Javascript. This script is heavily commented. Click the more button below to inspect the script.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:While coding logic for a Kendo tooltip, I had to send both the anchor's title and other information that the Kendo tooltip would display. I wanted to display the location where the image was taken, and a description of the image. However, the anchor tag only has a 'title' and an alt tag to store this information. If you want to store additional information in an element does not support, you can easily use the 'data-' + name prefix like so:&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/3/29/How-to-add-additional-descriptive-elements-to-an-element-with-data"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/3/29/How-to-add-additional-descriptive-elements-to-an-element-with-data",<char code='0d'/><char code='0a'/>  "headline": "Passing extra information to the Kendo Tooltip",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/yellowStoneTooltip.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/yellowStoneTooltip.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/yellowStoneTooltip.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : ":While coding logic for a Kendo tooltip, I had to send both the anchor's title and other information that the Kendo tooltip would display. I wanted to display the location where the image was taken, and a description of the image. However, the anchor tag only has a 'title' and an alt tag to store this information. If you want to store additional information in an element does not support, you can easily use the 'data-' + name prefix like so:",<char code='0d'/><char code='0a'/>  "datePublished": "2019-03-29",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While coding logic for a Kendo tooltip, I had to send both the anchor's title and other information that the Kendo tooltip would display. I wanted to display the location where the image was taken, and a description of the image like this:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>"Grand Prismatic Spring, Yellowstone National Park.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The vibrant colors of this spring is best captured from over-head. Wouldn't it be cool to fly a drone over this and take a few pictures?"<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I wanted both elements to be separated with a horizontal rule, and I needed to isolate the location and the description. However, the anchor tag only has a 'title' and an alt tag to store this information. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If you want to store additional information in an element does not support, you can easily use the 'data-' + name prefix like so:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;span title="Grand Prismatic Spring, Yellowstone National Park." data-desc="The vibrant colors of this spring is best captured from over-head. Wouldn't it be cool to fly a drone over this and take a few pictures?"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>To get the information that the data element contains, in this case, a Kendo template, use the data- prefix. You can name the prefix anything you want, and within the javascript template, don't need to specify the actual data tag- just leave it blank but name the variable after the 'data-' element (see '#=target.data('desc')#: below).<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Kendo tooltip template---&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag id="aboutTemplate" type="text/x-kendo-template"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;div class="template-wrapper"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;h3&gt; #=target.data('title')# &lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;p&gt;#=target.data('desc')#&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This is a neat way to store additional data into HTML elements, such as a span tag, or any other element as well.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I have been using the scroll view on my personal site at gregoryalexander.com quite a bit, and wanted to pass along a few tips.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/4/16/Kendo-scrollview-button-size"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/4/16/Kendo-scrollview-button-size",<char code='0d'/><char code='0a'/>  "headline": "I have been using the scroll view and wanted to pass along a few tips.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/kendoScroll.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/kendoScroll.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/kendoScroll.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I have been using the scroll view on my personal site at gregoryalexander.com quite a bit, and wanted to pass along a few tips.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-04-016",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have been using the scroll view on my home site at gregoryalexander.com quite a bit, and wanted to pass along a few tips. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If you want to change the button size on the scroll view, use the following css. The default font-size is around 2em, to make the right and left arrows bigger, use anywhere from 6-8em, and 1em to make the arrows a bit smaller. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>#nameOfScrollViewDiv .k-scrollview-next span, .k-scrollview-prev span {<char code='0d'/><char code='0a'/><char code='09'/>font-size: 8em;<char code='0d'/><char code='0a'/>} <char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>To use the scrollview to display a lot of text, I used the following approach.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>First, we need to use data-role='page' and create a 'white-space:normal' style for every element in order to allow for the text to wrap properly instead of going off of the scrollview page:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;div id="developmentScrollView" class="blueGradient"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- This is used for every page --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;div class="getConnected" data-role="page" style="white-space:normal;"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/> To constrain the text and allow the arrows to be seen visibility on the right and left, I created a css class for the div that contains the actual scrollview, and wrapper classes that constrain the text information in the proper spot. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The class for the scrollview div (the outer class in this case):<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>/* Scroll view outer containers within the content blocks. */<char code='0d'/><char code='0a'/>#developmentScrollView {<char code='0d'/><char code='0a'/><char code='09'/>/* Text color */<char code='0d'/><char code='0a'/><char code='09'/>color: rgba(255, 255, 255, 0.9); <char code='0d'/><char code='0a'/><char code='09'/>height: var(--scrollViewHeight);<char code='0d'/><char code='0a'/><char code='09'/>width: var(--scrollViewWidth); /* Don't use dynamic css vars set when the page loads. It screws stuff up. */<char code='0d'/><char code='0a'/><char code='09'/>margin: auto;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>z-index: 2; /* This needs to be higher than the nav blocks */<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>And the three wrapper classes: the first class (firstScrollviewWrapper) is used on the first slide, and the second class (scrollviewWrapper) controls all of the slides after the first and last slide, and the last class (lastScrollviewWrapper) is used for the very last slide. These are used to keep the text separated from the arrows in order to make the arrows more visible. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>.firstScrollviewWrapper {<char code='0d'/><char code='0a'/><char code='09'/>position: relative;<char code='0d'/><char code='0a'/><char code='09'/>display: table;<char code='0d'/><char code='0a'/><char code='09'/>left: 0%; /* The 2nd and x slides there after start to the right of the left arrow. */<char code='0d'/><char code='0a'/><char code='09'/>right: 10%; <char code='0d'/><char code='0a'/><char code='09'/>margin: auto;<char code='0d'/><char code='0a'/><char code='09'/>width: 80%; /* the width of the scroll view container. */<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/><char code='09'/>font-family: var(--scrollViewFont);<char code='0d'/><char code='0a'/><char code='09'/>font-size: var(--scrollViewFontSize);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>.scrollviewWrapper {<char code='0d'/><char code='0a'/><char code='09'/>position: relative;<char code='0d'/><char code='0a'/><char code='09'/>display: table;<char code='0d'/><char code='0a'/><char code='09'/>left: 0%; /* The 2nd and x slides there after start to the right of the left arrow. */<char code='0d'/><char code='0a'/><char code='09'/>right: 10%; <char code='0d'/><char code='0a'/><char code='09'/>margin: auto;<char code='0d'/><char code='0a'/><char code='09'/>width: 80%; /* the width of the scroll view container. */<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/><char code='09'/>font-family: var(--scrollViewFont);<char code='0d'/><char code='0a'/><char code='09'/>font-size: var(--scrollViewFontSize);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>.lastScrollviewWrapper {<char code='0d'/><char code='0a'/><char code='09'/>position: relative;<char code='0d'/><char code='0a'/><char code='09'/>display: table;<char code='0d'/><char code='0a'/><char code='09'/>left: 0%; /* The 2nd and x slides there after start to the right of the left arrow. */<char code='0d'/><char code='0a'/><char code='09'/>right: 0%; /* The last slide does not have a right arrow that we need to leave room for. */<char code='0d'/><char code='0a'/><char code='09'/>margin: auto;<char code='0d'/><char code='0a'/><char code='09'/>width: 80%; /* the width of the scroll view container. */<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/><char code='09'/>font-family: var(--scrollViewFont);<char code='0d'/><char code='0a'/><char code='09'/>font-size: var(--scrollViewFontSize);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>A demonstration of my approach can be seen on my www.gregoryalexander.com/index.cfm home page.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Note: I am using css variables for the font family and font size.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I have been coding thousands of Kendo windows throughout the last several years, and ran into a problem that I have never seen before, and could not find a solution (or even a hit) on google. While coding a window that will hold a Kendo map, I ran into the following error when I opened the window, closed it, and then tried to open it again: Cannot call method 'destroy' of kendoWindow before it is initialized. This error is just not found.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/4/19/Reopening-existing-Kendo-window-to-solve-a-weird-error"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/4/19/Reopening-existing-Kendo-window-to-solve-a-weird-error",<char code='0d'/><char code='0a'/>  "headline": "Reopen existing Kendo Window",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/window.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/window.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/window.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I have been coding thousands of Kendo windows throughout the last several years, and ran into a problem that I have never seen before, and could not find a solution (or even a hit) on google. While coding a window that will hold a Kendo map, I ran into the following error when I opened the window, closed it, and then tried to open it again: Cannot call method 'destroy' of kendoWindow before it is initialized. This error is just not found.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-04-19",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have been coding thousands of Kendo windows throughout the last several years, and ran into a problem that I have never seen before, and could not find a solution (or even a hit) on google. While coding a window that will hold a Kendo map, I ran into the following error when I opened the window, closed it, and then tried to open it again: Cannot call method 'destroy' of kendoWindow before it is initialized. This error is just not found.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Type in "Cannot call method 'destroy' of kendoWindow before it is initialized" into google, you won't find a single result. You'll find many other topics, but not one that matches this particular error message. Here is a solution on how I overcame this error, and why I think that it may have happened in the first place.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>My personal website uses a Greensock animation carriage. It is my guess that the errors are due to having a lot of subtle animations there, and it is resource intensive as it has extensive scroll and touch listeners. Along with the Kendo map widget, the site is very resource intensive on the client end. This is probably freezing the destroy methods that are used to typically close a Kendo window. Whatever the actual reason, when I try to destroy the window that contains the map, as I usually do, I run into multiple errors and the window will not open again. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>My approach was to build a function that would check if the window was previously opened, and then closed, to simply re-open it and then refresh the content (it has dynamic content). <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If the window was not already created (by someone opening it), then I would create the window, as usual, but I eliminated Kendo's destroy method when the window is closed. I don't want to destroy it- in fact- I can't. It causes errors. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If the window was opened, and closed (making the window hidden since it does not have the destroy method), I would re-open the existing window. Here is the code:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>function openMapWindow() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>$( document ).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>/*  This is a totally weird approach to open a kendo window. I have coded kendo windows for several years, and have probably coded several hundred windows, but using a Kendo window in this greensock platform, especially with Kendo maps, just does not work. Here, I am testing to see if the window is: <char code='0d'/><char code='0a'/><char code='09'/>1) defined (the first mapWindow line of code will error out if the window has not already been opened)<char code='0d'/><char code='0a'/><char code='09'/>2) and if the window is defined, is it hidden (it will be- I am not destroying the window like I always do in other code as I have problems with that here.)<char code='0d'/><char code='0a'/><char code='09'/>If both conditions ARE true, then I merely reopen the existing window that was hidden when the user clicked on the 'x' at the top of the window.<char code='0d'/><char code='0a'/><char code='09'/>If both conditions are NOT true, then I create the window as usual (but I don't destroy it as usual as I had problems there too). <char code='0d'/><char code='0a'/><char code='09'/>Essentially what I am doing is:<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>- Creating the window if the window was not first opened and then closed.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>- Or reopening the window if it was opened and then closed. <char code='0d'/><char code='0a'/><char code='09'/>*/<char code='0d'/><char code='0a'/><char code='09'/>// This must be put into a try block as the 'var mapWindow = <char code='09'/><char code='09'/>$("#mapWindow").data("kendoWindow");' will cause errors if the window has not already bee already opened.<char code='0d'/><char code='0a'/><char code='09'/>try {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get a reference to the opened window.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var mapWindow = $("#mapWindow").data("kendoWindow");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Determine if the window was closed...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var mapWindowIsHidden = mapWindow.element.is(":hidden"); //returns true or false<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// If the window was closed (and now hidden), re-open the existing window.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (mapWindowIsHidden){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Change the title<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>mapWindow.title(getMapDataByScene(sceneIndex));<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Open it.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>mapWindow.open();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// And refresh the window.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>mapWindow.bind("refresh", window_refresh);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Otherwise create the window (for the first time)...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} catch(e) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Initialize the window.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var mapWindow = $('#mapWindow').kendoWindow({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>title: getMapDataByScene(sceneIndex),<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>actions: ["Refresh", &lt;cfif not session.isMobile&gt;"Minimize", &lt;/cfif&gt;"Close"],<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>modal: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>resizable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>draggable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>pinned: true, // Note: we must pin this window, or it will open at the top of the page at all times when we use this approach.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>position: { top: 100 },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>width: getGrizzlyWindowWidth(),<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>height: getGrizzlyWindowHeight(),<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>iframe: false, // Don't use iframes unless it is content derived outside of your own site. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>content: "/includes/layers/map.cfm?sceneIndex=" + sceneIndex,// Make sure to create an absolute path here. I had problems with a cached page.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif session.isMobile&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>animation: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>close: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>effects: "slideIn:right",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>reverse: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>duration: 500<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/>}).data('kendoWindow').center();// Center the window.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>  <char code='0d'/><char code='0a'/><char code='09'/>}//..try<char code='0d'/><char code='0a'/>});<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>}//..function openMapWindow() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Additionally, if you don't need a dynamic window where the content changes, you can simply use the following simple approach:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>// Dynamic window for the approval routing picker. <char code='0d'/><char code='0a'/><char code='09'/>// This window also has an id variable.<char code='0d'/><char code='0a'/><char code='09'/>// Original inspiration provided by Ona Bai (http://dojo.telerik.com/@OnaBai/ekIba/2). <char code='0d'/><char code='0a'/><char code='09'/>// To use, first create a div at the top of the page like so: &lt;div id="dynamicDetailWindow"&gt;&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/>function dynamicRoutingPickerWindow(id, id2, name, width, height) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var thisWin = $("#" + name).data("kendoWindow");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (thisWin) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>thisWin.open();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>thisWin = $("&lt;div id='" + name + "'&gt;&lt;/div&gt;").kendoWindow({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>actions: ["Minimize", "Maximize", "Refresh", "Close"],<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>title: "Contract Details",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>content: "includes/routingPicker.cfm?contractId=" + id,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>width: width,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>height: height,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>modal: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>resizable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>draggable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Open the window near the top of the page.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>position:{<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>top:"15%",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>appendTo: "#dynamicRoutingPickerWindow",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>visible: true<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}).data("kendoWindow").center();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;descMetaTag:I have a Kendo template that is used to display real time statuses for contracts, and programmed an a href tag that was intended to consume a javascript function rather than opening up a link. However, I was outputting ColdFusion variables into the link with # signs that caused errors, and figured out how to use void instead.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/4/24/Kendo-template-with-void-in-an-anchor-link"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/4/24/Kendo-template-with-void-in-an-anchor-link",<char code='0d'/><char code='0a'/>  "headline": "Escape the pound symbol in a Kendo template",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/link.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/link.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/link.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I have a Kendo template that is used to display real time statuses for contracts, and programmed an a href tag that was intended to consume a javascript function rather than opening up a link. However, I was outputting ColdFusion variables into the link with # signs that caused errors, and figured out how to use void instead.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-4-24",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have a Kendo template that is used to display real time statuses for contracts, and programmed an a href tag that was intended to consume a javascript function rather than opening up a link. On my first attempt, I was having problems as I could not program a pound symbol into the Kendo template (like ColdFusion, a pound symbol indicates a variable within a Kendo template), so I escaped it using two pounds, and found myself struggling to figure out why my window was suddenly being refreshed. I spent around ten minutes stepping through my code only to find out that the a href tag refreshing the entire page, even though it was blank as the double pound sign was escaped. On further introspection, this is understandable as I just had inadvertently programmed a typical link. To fix this issue, I used a simple javascript:void(0); within the link, and the javascript function is called without the default a href tag opening up the link. Essentially, the void(0) code prevents the default behavior of the link, and it acts like a a href="#". I would not typically use void in other code, but using it within a Kendo MVVM template is an appropriate place. Here is the code:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="text/x-kendo-template" id="myApprovalTemplate"&gt;<char code='0d'/><char code='0a'/><char code='09'/>/* Note: dynamic vars can be displayed like so: #: myApprovalDs.total() # */<char code='0d'/><char code='0a'/><char code='09'/> /* Alternate row colors. */<char code='0d'/><char code='0a'/><char code='09'/># if(window.altRow) { #<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr class='k-alt'&gt;<char code='0d'/><char code='0a'/><char code='09'/># } else { #<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr class='k-content'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/> # } #<char code='0d'/><char code='0a'/>         # if(ApprovalId &gt; 0){ #<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;input type="checkbox" name="approved#: ApprovalId #" id="approved#: ApprovalId #" value="1" /&gt;&lt;/td&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;#: ApproverTitle #&lt;/td&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;&lt;a href="javascript:void(0);" onClick="openContractDetailWindow(#: ContractId #, #: ApprovalId #, '')"&gt;#: Contract #&lt;/a&gt;&lt;/td&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;#: Contractor #&lt;/td&gt; <char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;pdf&lt;/td&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td class="border"&gt;&lt;/td&gt; <char code='0d'/><char code='0a'/>         #} else {#<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;td colspan="6"&lt;!---  class="k-loading-image k-loading-color" ---&gt;&gt;<char code='0d'/><char code='0a'/>          <char code='09'/>&lt;br/&gt;There are no contracts eligible for you to approve<char code='0d'/><char code='0a'/>         <char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/>         #}#<char code='0d'/><char code='0a'/><char code='09'/> &lt;/tr&gt;<char code='0d'/><char code='0a'/>        &lt;!--- Toggle the window variable. ---&gt;<char code='0d'/><char code='0a'/>        # window.altRow = !window.altRow; #<char code='0d'/><char code='0a'/> &lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;descMetaTag:I had thought that I figured out how to use the Kendo tooltip widget as illustrated in another post, however, I quickly found out that by over-riding the k-tooltip Kendo base class that I could only have one tooltip style for the whole page. I finally solved this annoying issue, and will share my approach.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/8/Kendo-tooltips-with-multiple-classes-and-styles"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/8/Kendo-tooltips-with-multiple-classes-and-styles",<char code='0d'/><char code='0a'/>  "headline": "Multiple Kendo Tooltip styles on one page",<char code='0d'/><char code='0a'/>  "articleBody" : "I had thought that I figured out how to use the Kendo tooltip widget as illustrated in another post, however, I quickly found out that by over-riding the k-tooltip Kendo base class that I could only have one tooltip style for the whole page. I finally solved this annoying issue, and will share my approach",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-8",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I had thought that I figured out how to use the Kendo tooltip widget as illustrated in another post, however, I quickly found out that by over-riding the k-tooltip Kendo base class that I could only have one tooltip style for the whole page. Unlike most other Kendo widgets, you can't specify a unique css rule with #divName .k-tooltip { rules... }. As soon as I put in the element name in front of .k-tooltip, everything broke. I thought that I must have made a silly mistake, and tried everything, including the element name after the .k-tooltip class, trying to put in the parent element name, trying to create new custom classes, and appending the class to .k-tooltip, etc, but nothing worked. Time to search the web with google.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Apparently, Telerik's tooltip design prevents this type of chaining. You can't manually add a class to the tooltip. Instead, we have to use jQuery's addClass to add a class in a function. This particular approach has some issues when the first tooltip is raised (the cutout does not immediately point to the element, and the correct background color may not immediately  appear), but otherwise, it works for the most part. I am finally able to have multiple Kendo tooltip styles. Here is my approach. There are a few ColdFusion tags in the example, but the code and comments should be illustrative. A working example of this code is found on my home site at gregoryalexander.com/<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>HTML<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Tooltip on the left side of the page. ---&gt;<char code='0d'/><char code='0a'/>&lt;div id="aboutThisImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;span id="leftTooltip" title="Jenny Lake, Grand Teton National Park." data-desc="This is a majestic trail. But pay attention.... you may come face to face with a Grizzly bear..." class="leftTooltip"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;img src="/images/symbol/aboutGreen.gif" align="center" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/span&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;&lt;!---&lt;div id="aboutThisImage"&gt;---&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!--- Tooltip on the right side of the page. ---&gt;<char code='0d'/><char code='0a'/>&lt;div id="imageLocation"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Don't show the tooltip on mobile devices. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif not session.isMobile&gt;&lt;span title="Click to view an interactive map." data-desc="Click on this button to view an interactive map of the Jenny Lake trail." class="rightTooltip"&gt;&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;img src="/images/symbol/mapMarkerButton.gif" align="left" onClick="openMapWindow(0)"/&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif not session.isMobile&gt;&lt;/span&gt;&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;&lt;!---&lt;div id="imageLocation"&gt;---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>CSS:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>/* Custom classes for the tooltips. These classes will be used to override the base k-tooltip class. */<char code='0d'/><char code='0a'/>.leftTooltipStyle {<char code='0d'/><char code='0a'/><char code='09'/>background: #046FA1 !important;   /* Blue matching the left part of the logo */<char code='0d'/><char code='0a'/><char code='09'/>width: var(--toolTipWidth);<char code='0d'/><char code='0a'/><char code='09'/>height: var(--toolTipHeight);<char code='0d'/><char code='0a'/><char code='09'/>font-size: var(--toolTipFontSize);<char code='0d'/><char code='0a'/><char code='09'/>border-radius: 10px;<char code='0d'/><char code='0a'/><char code='09'/>/* Subtle drop shadow on the main layer */<char code='0d'/><char code='0a'/><char code='09'/>box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>/* Custom classes for the tooltips. These classes will be used to override the base k-tooltip class. */<char code='0d'/><char code='0a'/>.rightTooltipStyle {<char code='0d'/><char code='0a'/><char code='09'/>background: #698A50 !important; /* Green matching the right part of the logo */<char code='0d'/><char code='0a'/><char code='09'/>width: var(--toolTipWidth);<char code='0d'/><char code='0a'/><char code='09'/>height: var(--toolTipHeight);<char code='0d'/><char code='0a'/><char code='09'/>font-size: var(--toolTipFontSize);<char code='0d'/><char code='0a'/><char code='09'/>border-radius: 10px;<char code='0d'/><char code='0a'/><char code='09'/>/* Subtle drop shadow on the main layer */<char code='0d'/><char code='0a'/><char code='09'/>box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>.tooltipTemplateWrapper h3 {<char code='0d'/><char code='0a'/><char code='09'/>font-size: &lt;cfif session.isMobile&gt;12px&lt;cfelse&gt;1em&lt;/cfif&gt;;<char code='0d'/><char code='0a'/><char code='09'/>font-weight: bold;<char code='0d'/><char code='0a'/><char code='09'/>padding: 0px 10px 5px;<char code='0d'/><char code='0a'/><char code='09'/>border-bottom: 1px solid #e2e2e2;<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>.tooltipTemplateWrapper p {<char code='0d'/><char code='0a'/><char code='09'/>font-size: &lt;cfif session.isMobile&gt;12px&lt;cfelse&gt;1em&lt;/cfif&gt;;<char code='0d'/><char code='0a'/><char code='09'/>padding-top: 0px;<char code='0d'/><char code='0a'/><char code='09'/>padding-right: 10px;<char code='0d'/><char code='0a'/><char code='09'/>padding-bottom: 10px;<char code='0d'/><char code='0a'/><char code='09'/>padding-left: 10px;<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>And finally, the javascript:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>var leftTooltipIntro = $("#intro").kendoTooltip({<char code='0d'/><char code='0a'/><char code='09'/>// A class can also be used to trigger the popup.<char code='0d'/><char code='0a'/><char code='09'/>filter: ".leftTooltip",<char code='0d'/><char code='0a'/><char code='09'/>position: "right",<char code='0d'/><char code='0a'/><char code='09'/>// Note: we need to use a template as we have created a popup matching the blue notification popups on the right side of the page.<char code='0d'/><char code='0a'/><char code='09'/>content: kendo.template($("#aboutTemplate").html()),<char code='0d'/><char code='0a'/><char code='09'/>show: function(e) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// We also need to override the k-tooltip style with our own class. Otherwise, all of the other tooltips will have the same style. We are differentiating the look of both the right and left tooltip. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>this.popup.element.addClass("leftTooltipStyle");<char code='0d'/><char code='0a'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/>// Add animation effects.<char code='0d'/><char code='0a'/><char code='09'/>animation: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>open: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>effects: "zoom",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>duration: 150<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>}).data("kendoTooltip");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>var rightTooltipIntro = $("#intro").kendoTooltip({<char code='0d'/><char code='0a'/><char code='09'/>// A class can also be used to trigger the popup. We can have as many classes as we want separated by comma's.<char code='0d'/><char code='0a'/><char code='09'/>filter: ".rightTooltip",<char code='0d'/><char code='0a'/><char code='09'/>position: "left",<char code='0d'/><char code='0a'/><char code='09'/>// Note: we need to use a template as we have created a popup matching the blue notification popups on the right side of the page.<char code='0d'/><char code='0a'/><char code='09'/>content: kendo.template($("#locationTemplate").html()),<char code='0d'/><char code='0a'/><char code='09'/>show: function(e) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// We also need to override the k-tooltip style with our own class. Otherwise, all of the other tooltips will have the same style. We are differentiating the look of both the right and left tooltip. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>this.popup.element.addClass("rightTooltipStyle");<char code='0d'/><char code='0a'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/>// Add animation effects.<char code='0d'/><char code='0a'/><char code='09'/>animation: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>open: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>effects: "zoom",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>duration: 150<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>}).data("kendoTooltip");<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I use the imagesLoaded javascript library to determine when and what images are loaded and to provide a status on a pre-loader status screen. If you need to get both background and non-background images, just run it twice switching the background arguments.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/9/How-to-get-all-of-the-images-with-the-imagesLoaded-library"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/9/How-to-get-all-of-the-images-with-the-imagesLoaded-library",<char code='0d'/><char code='0a'/>  "headline": "You can run the imagesLoaded library more than one time",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/loadImages.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/loadImages.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/loadImages.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I use the imagesLoaded javascript library to determine when and what images are loaded and to provide a status on a pre-loader status screen. If you need to get both background and non-background images, just run it twice switching the background arguments.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-8",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I use the imagesLoaded javascript library to determine when and what images are loaded and to provide a status on a pre-loader status screen. The imagesLoaded library has the ability to gather information on background images, and non-background images using the 'background: true/false' argument. If you need to get both background and non-background images, just run it twice switching the background arguments. I highly recommend using this library when you want to provide a 'please wait' dialog and show the load progress of a graphically intense site.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Get the parallax images (non-background images).<char code='0d'/><char code='0a'/>$('.images').imagesLoaded({<char code='0d'/><char code='0a'/><char code='09'/>background: false<char code='0d'/><char code='0a'/>}).progress( function( instance, image ) {<char code='0d'/><char code='0a'/><char code='09'/>loadProgress();<char code='0d'/><char code='0a'/>});<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Get the background images in the scenes.<char code='0d'/><char code='0a'/>$('.bcg').imagesLoaded({<char code='0d'/><char code='0a'/><char code='09'/>background: true<char code='0d'/><char code='0a'/>}).progress( function( instance, image ) {<char code='0d'/><char code='0a'/><char code='09'/>loadProgress();<char code='0d'/><char code='0a'/>});<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:There are two standard ways to activate a Kendo tab: 1) via Javascript, or 2) appending the k-state-active class to the HTML list. <char code='0d'/><char code='0a'/>Both approaches are useful, and will discuss both options here.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/9/Set-active-kendo-tab"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/9/Set-active-kendo-tab",<char code='0d'/><char code='0a'/>  "headline": "We will discus two options to set the active Kendo tab",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/tab.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/tab.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/tab.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "There are two standard ways to activate a Kendo tab: 1) via Javascript, or 2) appending the k-state-active class to the HTML list. <char code='0d'/><char code='0a'/>Both approaches are useful, and will discuss both options here.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-9",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are two standard ways to activate a Kendo tab: 1) via Javascript, or 2) appending the k-state-active class to the HTML list. <char code='0d'/><char code='0a'/>Both approaches are useful. However, I have had troubles using a javascript function to set the active tab when I had a button open up a new Kendo window, and then set the active tab based upon the URL variable that I sent along when opening up the Kendo window. For some odd reason, when I used the javascript method it would not process the scripts in the second tab. I could not figure out how, or even why, this method failed, but appending the k-state-active class to set the to tab worked just fine. I will share both options below.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Option 1, use javascript and the select(tabIndex) method:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Set the active tab if it was passed into the URL.<char code='0d'/><char code='0a'/>var tabName = &lt;cfoutput&gt;'#URL.tabName#'&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/>// Set the active tab if the tab argument is not a null string<char code='0d'/><char code='0a'/>if (tabName !=''){<char code='0d'/><char code='0a'/><char code='09'/>// Set the tab<char code='0d'/><char code='0a'/><char code='09'/>setContractDetailTab(tabName);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>// function to select the appropriate detail tab.<char code='0d'/><char code='0a'/>function setContractDetailTab(tabName){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>if (tabName == 'contractDetail'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get the index. We are starting at 0, so the first tab will have a zero index.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var tabIndex = 0;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} else if (tabName == 'routing'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var tabIndex = 1;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} else if (tabName == 'attachment'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var tabIndex = 2;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Don't perform any actions until the dom is loaded.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Get a reference to the tab.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var detailTabSrip = $("#detailTabSrip").kendoTabStrip().data("kendoTabStrip");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Select the tab. Make sure to use a timeout otherwise an error will occur and the kendo dropdowns will not be instantiated.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>detailTabSrip.select(tabIndex);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}, 500);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/> <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='09'/>//document.ready<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Option 2) use the k-state-active Kendo class to select the active tab:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;div id="detailTabSrip" style="height:925px"&gt;<char code='0d'/><char code='0a'/>    &lt;!--- Tab names. ---&gt;<char code='0d'/><char code='0a'/>    &lt;ul&gt;<char code='0d'/><char code='0a'/>        &lt;li id="contractDetail" &lt;cfif not isDefined("URL.tabName") or URL.tabName eq ""&gt;class="k-state-active"&lt;/cfif&gt;&gt;<char code='0d'/><char code='0a'/>        <char code='09'/>&lt;p&gt;Contract Detail&lt;/p&gt;<char code='0d'/><char code='0a'/>        &lt;/li&gt;<char code='0d'/><char code='0a'/>        &lt;li id="routing" &lt;cfif isDefined("URL.tabName") and URL.tabName eq 'routing'&gt;class="k-state-active"&lt;/cfif&gt;&gt;<char code='0d'/><char code='0a'/>        <char code='09'/>&lt;p&gt;Routing&lt;/p&gt;<char code='0d'/><char code='0a'/>        &lt;/li&gt;<char code='0d'/><char code='0a'/>        &lt;li id="attachment" &lt;cfif isDefined("URL.tabName") and URL.tabName eq 'attachment'&gt;class="k-state-active"&lt;/cfif&gt;<char code='0d'/><char code='0a'/>            &lt;p&gt;Attachment&lt;/p&gt;<char code='0d'/><char code='0a'/>        &lt;/li&gt;         <char code='0d'/><char code='0a'/>    &lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Late at night, I put a function inside a .cfm template and tried to consume it from Ajax, but I received a json parse error that was displayed in Chrome's console when trying to invoke a function within a .cfm page. I had forgot that ajax functions should not be consuming a .cfm page, and placed the exact same function within a component with a .cfc extension, and the issue went away. I'll explain why this happened.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/18/JSON-Parse-Error-in-jQuery-when-using-a-Coldfusion-function-inside-a-cfm-page"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/18/JSON-Parse-Error-in-jQuery-when-using-a-Coldfusion-function-inside-a-cfm-page",<char code='0d'/><char code='0a'/>  "headline": "jQuery will not work when you consume a function in a .cfm page",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/challengeAjax.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/challengeAjax.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/challengeAjax.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Late at night, I put a function inside a .cfm template and tried to consume it from Ajax, but I received a json parse error that was displayed in Chrome's console when trying to invoke a function within a .cfm page. I had forgot that ajax functions should not be consuming a .cfm page, and placed the exact same function within a component with a .cfc extension, and the issue went away. I'll explain why this happened.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-18",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Late at night, I put a function inside a .cfm template and tried to consume it from Ajax, but I received a json parse error that was displayed in Chrome's console when trying to invoke a function within a .cfm page. I had forgot that ajax functions should not be consuming a .cfm page, and placed the exact same function within a component with a .cfc extension, and the issue went away. When a function is within a component with the access remote argument, ColdFusion will autogenerate a web services stub, but it does not do this within a .cfm page. If you receive a json parse error using logic that is known to create a valid json object within a .cfm page, try putting the same code in a .cfc component and consume it there. It may solve this parse error for you as well. The code below has a 'proxyControllerUrl' variable that was initially using a template with a .cfm extension, and it failed. However, when I put the same function within a .cfc extension, it worked.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>function getAllThemeSettingsFromIniStore(themeId){<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Get all of the theme properties stored in the ini configuration file.<char code='0d'/><char code='0a'/><char code='09'/>$.ajax({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>type: "get",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>url: "&lt;cfoutput&gt;#application.proxyControllerUrl#?&lt;/cfoutput&gt;method=getAllThemeSettingsFromIniStore",//Works with a .cfc component, fails when the method is inside a .cfm template.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>data: { // method and the arguments<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>themeId: themeId<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>dataType: "json",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>cache: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>success: function (data){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Pass the data to the getAllThemeSettingsResult function. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>getAllThemeSettingsResult(data);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>error: function(xhr, textStatus, error){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>console.log(xhr.statusText);//Parse error shows up here when inside a .cfm template. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>console.log(textStatus);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>console.log(error);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/>}//... function<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I developed code that gets and sets theme settings from a .ini file. I am using getProfileString and setProfile string to set the various theme properties in a ColdFusion component on the server side. Depending upon the approach that I use, the datatypes that are being returned to the client are different. For example, if I invoke the function from a .cfm page, the values that I am getting are stored in strings, and are being returned as either a 'yes' or 'no'. However, if I invoke the same function from ajax, the value is being returned as a boolean value, i.e. true or false.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/18/Data-types-returned-in-structures-may-behave-differently"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/18/Data-types-returned-in-structures-may-behave-differently",<char code='0d'/><char code='0a'/>  "headline": "Datatypes may be different between ColdFusion and jQuery",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/womanDatatype.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/womanDatatype.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/womanDatatype.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I developed code that gets and sets theme settings from a .ini file. I am using getProfileString and setProfile string to set the various theme properties in a ColdFusion component on the server side. Depending upon the approach that I use, the datatypes that are being returned to the client are different. For example, if I invoke the function from a .cfm page, the values that I am getting are stored in strings, and are being returned as either a 'yes' or 'no'. However, if I invoke the same function from ajax, the value is being returned as a boolean value, i.e. true or false.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-18",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I developed code that gets and sets theme settings from a .ini file. I am using getProfileString and setProfile string to set the various theme properties in a ColdFusion component on the server side. Depending upon the approach that I use, the datatypes that are being returned to the client are different. For example, if I invoke the function from a .cfm page, the values that I am getting are stored in strings, and are being returned as either a 'yes' or 'no'. However, if I invoke the same function from ajax, the value is being returned as a boolean value, i.e. true or false. The component and the method are the same, but the evaluation of the return value is different between ColdFusion and jQuery. Be aware that if you don't declare and set the datatype of the structure elements independently; the datatypes can be interpreted differently depending upon where they are being evaluated.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!---&lt;div id="fxZoom"&gt;&lt;img src="/blog/doc/settings/adminUserLink.png" /&gt;&lt;/div&gt;---&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I should have known better, but I had forgot that you can't use a zero as an index when constructing a ColdFusion array. I wanted to use a zero as an index and received the following error: 'A scalar value of type java.lang.String cannot be assigned to a 2-dimensional ColdFusion array.' The problem was solved when I used 1 instead of 0 as the first index. I have always thought that this was odd as assigning a zero index should work. Most other languages default to a zero on the first array item, and still mistakenly assumed that this would work here.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/25/ColdFusion-arrays-cant-use-zero-as-an-index"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/25/ColdFusion-arrays-cant-use-zero-as-an-index",<char code='0d'/><char code='0a'/>  "headline": "ColdFusion does not support 0 index arrays",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/array.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/array.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/array.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I should have known better, but I had forgot that you can't use a zero as an index when constructing a ColdFusion array. I wanted to use a zero as an index and received the following error: 'A scalar value of type java.lang.String cannot be assigned to a 2-dimensional ColdFusion array.' The problem was solved when I used 1 instead of 0 as the first index. I have always thought that this was odd as assigning a zero index should work. Most other languages default to a zero on the first array item, and still mistakenly assumed that this would work here.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-25",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I should have known better, but I had forgot that you can't use a zero as an index when constructing a ColdFusion array. On this blog, I have 14 different themes, and 39 settings for each theme, and created an array stored in the application scope to store the values in. I wanted to use a zero as an index to identify the name of the theme, and then use 1 through 39 as the theme setting. However, when I tried this approach I received the following error: "A scalar value of type java.lang.String cannot be assigned to a 2-dimensional ColdFusion array." The problem was solved when I used 1 instead of 0 as the first index. I have always thought that this was odd as assigning a zero index &lt;b&gt;should&lt;/b&gt; work. Most other languages default to a zero on the first array item, and still mistakenly assumed that this would work here. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Here was my original code that caused this error:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Theme ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.arrThemeSettingsFromIniStore[1][0] = "black"&gt;&lt;!--- black ---&gt;<char code='0d'/><char code='0a'/>&lt;!--- Theme variables ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.arrThemeSettingsFromIniStore[1][1] = trim(getSettingsByTheme('black').useCustomTheme)&gt;&lt;!--- useCustomTheme ---&gt;<char code='0d'/><char code='0a'/>more custom theme settings...<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The code should not use a zero based index like so:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Theme ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.arrThemeSettingsFromIniStore[1][1] = "black"&gt;&lt;!--- black ---&gt;<char code='0d'/><char code='0a'/>&lt;!--- Theme variables ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.arrThemeSettingsFromIniStore[1][2] = trim(getSettingsByTheme('black').useCustomTheme)&gt;&lt;!--- useCustomTheme ---&gt;<char code='0d'/><char code='0a'/>more custom theme settings...<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:This post is intended to allow the owner of the blog to incorporate social media using Galaxie Blog. I am using 'addThis' as my library, and there is a 'Add This Social Integration' form in the settings section of the administrative interface. Social media sharing is set up by default in Galaxie Blog, but you need to create your own addThis personal account and register an ID with. This does not require any code changes, you can do this yourself and put in the key that you have created using a web interface. This is easy to do if you follow along.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/5/27/Social-Media-Sharing-with-Gregorys-Blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/5/27/Social-Media-Sharing-with-Gregorys-Blog",<char code='0d'/><char code='0a'/>  "headline": "Social Media Sharing with Galaxie Blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/socialMediaWoman1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/socialMediaWoman1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/socialMediaWoman1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "This post is intended to allow the owner of the blog to incorporate social media using Galaxie Blog. I am using 'addThis' as my library, and there is a 'Add This Social Integration' form in the settings section of the administrative interface. Social media sharing is set up by default in Galaxie Blog, but you need to create your own addThis personal account and register an ID with. This does not require any code changes, you can do this yourself and put in the key that you have created using a web interface. This is easy to do if you follow along.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-5-27",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This post is intended to allow the owner of the blog to incorporate social media using Galaxie Blog. I am using 'addThis' as my library, and there is a 'Add This Social Integration' form in the settings section of the administrative interface. Social media sharing is set up by default in Galaxie Blog, but you need to create your own addThis personal account and register an ID with. This does not require any code changes, you can do this yourself and put in the key that you have created using a web interface. This is easy to do if you follow along.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>To set up your own social media share buttons for your own site using your own account, go to the addThis.com website, and set up a new account. Once you're set up, you should see a 'tools' option on their website. Click on 'add a new tool', you should see a new 'select a new tool' interface.<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/1signUp.gif" data-fancybox-group="addThis" title="Sign up"&gt;&lt;img data-src="/blog/doc/addThis/1signUpThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/2addNewTool.gif" data-fancybox-group="addThis" title="Add New Tool"&gt;&lt;img data-src="/blog/doc/addThis/2addNewToolThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/3shareButtons.gif" data-fancybox-group="addThis" title="Share Buttons"&gt;&lt;img data-src="/blog/doc/addThis/3shareButtonsThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Click on the 'share buttons' icon- it should be the first icon in the list. Once you have selected the inline tool, click on the blue button labeled 'continue' at the bottom of the page. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>You should see a new 'sharing services' interface. Select choose 'inline' for the tool type, click continue, and then in the 'sharing services' interface, click on the 'selected by you' radio button. Choose 'facebook', 'twitter', 'pinterest' 'linkedIn' and 'tumblr'. You can sort these options by dragging and dropping the icons underneath 'Selected Sharing Services'. Sort the icons in your own desired order. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/4inline.gif" data-fancybox-group="addThis" title="Inline Buttons"&gt;&lt;img data-src="/blog/doc/addThis/4inlineThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/5selectedByYou.gif" data-fancybox-group="addThis" title="Selected by you"&gt;&lt;img data-src="/blog/doc/addThis/5selectedByYouThumb.gif" alt=""class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/6mySelections.gif" data-fancybox-group="addThis" title="My Selections"&gt;&lt;img data-src="/blog/doc/addThis/6mySelectionsThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have tested all of these services and they should work. Choose any other services that you want here, but I have not tested anything other than these services. If you want to add more services, they may or may not work, you may have to add more code on your own, your mileage may vary. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Once your services are selected, click on the design icon, and design the addThis buttons to your liking. I chose to round the corners quite a bit, but kept all of the other settings that were shown as default. Once you're satisfied with the look and feel of the buttons, click on the 'activate tool' button. You should now see a 'get the code' button. Click on it, the code should be similar to the following code below. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!-- Go to www.addthis.com/dashboard to customize your tools --&gt; <char code='0d'/><char code='0a'/>&lt;InvalidTag type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5cad55abc3dea5c2"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/7getTheCode.gif" data-fancybox-group="addThis" title="Get the code"&gt;&lt;img data-src="/blog/doc/addThis/7getTheCodeThumb.gif" alt="" class="fade thumbnail" /&gt;/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Copy the string between 'pubid=' and the closing tag '"&gt;'. The default string that I use is 'ra-5cad55abc3dea5c2'. Enter this string in the 'Add This Social Integration' section in the settings interface in the administrative section of the site (typically found in using the '/blogCfc/client/admin/' URL), click on the 'save settings' button, and you should be good to go. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/8pasteIdInSettings.gif" data-fancybox-group="addThis" title="Paste API Key in Settings"&gt;&lt;img data-src="/blog/doc/addThis/8pasteIdInSettingsThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/addThis/9done.gif" data-fancybox-group="addThis" title="Done!"&gt;&lt;img data-src="/blog/doc/addThis/9doneThumb.gif" alt=""class="fade thumbnail" /&gt;&lt;/a&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In order to log into the administrative section of the blog after installation, use 'admin' as the user name, and 'admin' as the password. Be sure to change the password after logging in for the first time. In this version, the administrative section is nearly identical to the original BlogCfc administration interface with a lot more settings included. I will likely change this in the next version.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/1/Gregorys-Blog-default-user-name-and-password-after-fresh-installation"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/1/Gregorys-Blog-default-user-name-and-password-after-fresh-installation",<char code='0d'/><char code='0a'/>  "headline": "Change the default user credentials after installing Galaxie Blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanInstall.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanInstall.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanInstall.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In order to log into the administrative section of the blog after installation, use 'admin' as the user name, and 'admin' as the password. Be sure to change the password after logging in for the first time. In this version, the administrative section is nearly identical to the original BlogCfc administration interface with a lot more settings included. I will likely change this in the next version.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-1",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In order to log into the administrative section of the blog after installation, use 'admin' as the user name, and 'admin' as the password. Be sure to change the password after logging in for the first time. In this version, the administrative section is nearly identical to the original BlogCfc administration interface with a lot more settings included. I will likely change this in the next version.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I wanted to document this as this error is not often found using google, but if you receive a ColdFusion error "The current user is not authorized to invoke this method.", it could be due to using the roles attribute in a cfffunction tag that don't match the roles that you set using the cflogin tag upon successful login.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/2/The-current-user-is-not-authorized-to-invoke-this-method"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/2/The-current-user-is-not-authorized-to-invoke-this-method",<char code='0d'/><char code='0a'/>  "headline": "ColdFusion - the current user is not authorized to invoke this method error",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/frustratedGirl1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/frustratedGirl1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/frustratedGirl1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I wanted to document this as this error is not often found using google, but if you receive a ColdFusion error "The current user is not authorized to invoke this method.", it could be due to using the roles attribute in a cffunction tag that don't match the roles that you set using the cflogin tag upon successful login.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-2",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I wanted to document this as this error is not often found using google, but if you receive a ColdFusion error "The current user is not authorized to invoke this method.", it could be due to using the roles attribute in a cffunction tag that don't match the roles that you set using the cflogin tag upon successful login. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I received this error when converting the original application.cfm tag in BlogCfc to use an application.cfc instead. During the conversion processes, I noticed that there was a 'roles' argument on the cffunction that did not match up with the new role that I had just programmed in the cflogin logic. When I searched for this error, I found a bunch of errors relating to using ColdFusions built in administrative user interface, and could not find that it was due to the role restrictions on the cffunction tag and thought to document it. It is a relatively intuitive error, but I am surprised that Adobe did not elaborate and write something like 'The role on the function does not match the cflogin role'. ColdFusion has always been good at that.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If you receive this error, check the roles attributes that you have used. It will likely fix the problem.</string><string>&lt;pageData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I have incorporated the open source version of Telerik's Kendo UI into Galaxie Blog. The reasons for this are numerous. ColdFusion on the server side is great, but in my opinion, relying upon ColdFusion for the UI was a zero sum game- its outdated, proprietary, and just plain buggy. Several years ago, I ditched using ColdFusion's UI, and moved on using Kendo with jQuery.&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/3/Kendo-UI-in-Gregorys-Blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/3/Kendo-UI-in-Gregorys-Blog",<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog uses an open source version of Kendo UI",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/openSourceHeader.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/openSourceHeader.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/openSourceHeader.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I have incorporated the open source version of Telerik's Kendo UI into Galaxie Blog. The reasons for this are numerous. ColdFusion on the server side is great, but in my opinion, relying upon ColdFusion for the UI was a zero sum game- its outdated, proprietary, and just plain buggy. Several years ago, I ditched using ColdFusion's UI, and moved on using Kendo with jQuery.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-3",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have incorporated the open source version of Telerik's Kendo UI into Galaxie Blog. The reasons for this are numerous. ColdFusion on the server side is great, but in my opinion, relying upon ColdFusion for the UI was a zero sum game- its outdated, proprietary, and just plain buggy. Several years ago, I ditched using ColdFusion's UI, and moved on using Kendo with jQuery.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I plan on continuing to release new versions of Galaxie Blog that support the open source version of Kendo UI Core. However, the open source version of Kendo does not support all of the HTML5 widgets that I plan on using, such as the adaptive grid. I intend to release multiple versions of Galaxie Blog, one that uses the open source edition of Kendo, and another that uses the full version of Kendo. Both should function just fine, but the open source version will be a bit more limited. &lt;b&gt;The only feature that is currently lacking in the open source version of Galaxie Blog is the HTML5 media player&lt;/b&gt;. Everything else that you see on this site is available to you. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Although it is not necessary to include the commercial edition of Kendo, if you have your own license for Kendo, you can incorporate your own Kendo library. In the source code, I have the following argument "application.kendoCommercial"as a Boolean flag that is used to include Kendo's open source core version, or include the full commercial version using your own Kendo library. If you have your own license, you will need to set this flags to true in your code, and set the 'application.kendoSourceLocation' argument to match the path to your own Kendo libraries.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:The kendoPager is a beautiful widget that typically allows the user to navigate through a Kendo grid. It has fast forward and forward buttons to go to the first item and the previous item, displays the current page, which you can click to select another page, and forward and fast forward buttons to select the next and the last grid page. It is an intuitive control that is adaptive and themable. This article will show you how to use the Kendo Pager anywhere on a page.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/8/Using-the-Kendo-pager-anywhere-in-a-page"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/8/Using-the-Kendo-pager-anywhere-in-a-page",<char code='0d'/><char code='0a'/>  "headline": "Using the Kendo Pager anywhere on a page",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/kendoPager.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/kendoPager.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/kendoPager.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "The kendoPager is a beautiful widget that typically allows the user to navigate through a Kendo grid. It has fast forward and forward buttons to go to the first item and the previous item, displays the current page, which you can click to select another page, and forward and fast forward buttons to select the next and the last grid page. It is an intuitive control that is adaptive and themable. This article will show you how to use the Kendo Pager anywhere on a page.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-7",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The kendoPager is a beautiful widget that typically allows the user to navigate through a Kendo grid. It has fast forward and forward buttons to go to the first item and the previous item, displays the current page, which you can click to select another page, and forward and fast forward buttons to select the next and the last grid page. It is an intuitive control that is adaptive and themable. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/kendoPager/kendoPager.gif" title="kendoPager"&gt;&lt;img data-src="/blog/doc/kendoPager/kendoPagerThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Although there is no official documentation on this, we can also use this control in &lt;b&gt;any&lt;/b&gt; page. You're &lt;b&gt;not&lt;/b&gt; limited to only using this in the grid!&lt;br/&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I'll show you my approach. You can see this Kendo pager in action by &lt;a href="javascript:scrollToBottom();"&gt;scrolling to the very bottom of this page&lt;/a&gt; below.&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>First create an element for the pager.&lt;br/&gt;<char code='0d'/><char code='0a'/>2) Create the datasource. Provide the URL in the pagerUrl element, and the page number.&lt;br/&gt;<char code='0d'/><char code='0a'/>3) Instantiate the pager control, and provide a change method. We will pass the complete datasource to the change method that we will invoke next.&lt;br/&gt;<char code='0d'/><char code='0a'/>4) Read the datasource to populate the kendoPager control.&lt;br/&gt;<char code='0d'/><char code='0a'/>5) Invoke the onPagerChange method, extract the values from the passed datasource, and redirect the user using javascript. &lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Here is the code:&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;div id="pager" data-role="pager" class="k-pager-wrap k-widget k-floatwrap k-pager-lg"&gt;<char code='0d'/><char code='0a'/>&amp;lt;script&gt;<char code='0d'/><char code='0a'/><char code='09'/>// Create the datasource with the URL and page number.<char code='0d'/><char code='0a'/><char code='09'/>var pagerDataSource = new kendo.data.DataSource({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>data: [<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>{ pagerUrl: "&amp;startRow=0&amp;page=1", page: "1" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>{ pagerUrl: "&amp;startRow=10&amp;page=2", page: "2" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>{ pagerUrl: "&amp;startRow=20&amp;page=3", page: "3" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>{ pagerUrl: "&amp;startRow=30&amp;page=4", page: "4" }<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>],<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>pageSize: 1,// Leave this at 1.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>page: 4 // Specify the currently selected page using a server side language.<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>var pager = $("#pager").kendoPager({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>dataSource: pagerDataSource,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Pass the datasource to an onChange method outside of this function.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>change: function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>onPagerChange(this.dataSource.data());<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>}).data("kendoPager");<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>// Read the datasource. <char code='0d'/><char code='0a'/><char code='09'/>pagerDataSource.read();<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Extract passed data from the datasource and redirect the user.<char code='0d'/><char code='0a'/><char code='09'/>function onPagerChange(data){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get the current page of the pager. The method to extract the current page is 'page()'.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var currentPage = pager.page();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// We are going to get the data item held in the datasource using its zero index array, but first we need to subtract 1 from the page value.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var index = currentPage-1;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get the url that is stored in the datsource using our new index.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var pagerUrl = "?" + data[index].pagerUrl;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Open the page.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>window.location.href = pagerUrl;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>&amp;lt;/script&gt;<char code='0d'/><char code='0a'/> &lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Requirements: You will need to have a hosting provider that supports ColdFusion. I have tested the software on both ColdFusion 2016 and 2018 and the software should work on all recent ColdFusion servers. However, if you want to use captcha to prevent spam, you should be running on ColdFusion 2016. You will also need to have a database. It is recommended that you use Microsoft SQL Server, or MySql, but this blog should also work with Oracle and Microsoft Access.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/10/Installing-Gregorys-Blog-on-your-own-website"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/10/Installing-Gregorys-Blog-on-your-own-website",<char code='0d'/><char code='0a'/>  "headline": "Installing Galaxie Blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanInstall2.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanInstall2.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanInstall2.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Requirements: You will need to have a hosting provider that supports ColdFusion. I have tested the software on both ColdFusion 2016 and 2018 and the software should work on all recent ColdFusion servers. However, if you want to use captcha to prevent spam, you should be running on ColdFusion 2016. You will also need to have a database. It is recommended that you use Microsoft SQL Server, or MySql, but this blog should also work with Oracle and Microsoft Access.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-10",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Requirements&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>You will need to have a hosting provider that supports ColdFusion. I have tested the software on both ColdFusion 2016 and 2018 and the software should work on all recent ColdFusion servers. However, if you want to use captcha to prevent spam, you should be running on ColdFusion 2016. Peter Farrel used sun Java classes which are deprecated in ColdFusion 2018 and Java 7. I will rewrite Peter's logic in a future version.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>You will also need to have a database. It is recommended that you use Microsoft SQL Server, or MySql, but this blog should also work with Oracle and Microsoft Access.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Download the installation zip file&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>The installation package is found near the top right section of Galaxie Blog. Click on the download button, and a new window will open. The content within the window will have a brief installation instructions along with credits and license information. Please read through it and click on the download button at the very bottom of the window. The browser should download the file, be patient, it may take several minutes for the zip file to download.<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/1download.gif" data-fancybox-group="installBlog" title="Download Software"&gt;&lt;img data-src="/blog/doc/install/1downloadThumb.gif" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/2license.gif" data-fancybox-group="installBlog" title="Galaxie Blog Liscense"&gt;&lt;img data-src="/blog/doc/install/2licenseThumb.gif" alt=""class="fade thumbnail"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/3zip.gif" data-fancybox-group="installBlog" title="Zip File"&gt;&lt;img data-src="/blog/doc/install/3zipThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Once the file has been downloaded, you need to extract the zip package to a directory that you will upload the files to your server using an FTP client. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/4extract.gif" data-fancybox-group="installBlog" title="Extract files from ZIP"&gt;&lt;img data-src="/blog/doc/install/4extractThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Decide your blog structure&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>After downloading and extracting the installation package, you will see the Apache 2.0 license and two folders, blog and install. You now need to step back and make a choice what folder structure you want on your own blog. Do you want the blog in the root directory, or in a different folder? This is an important consideration before you move forward. If you don't plan this correctly and change your mind at a later time, you're going to have to start everything over.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>For example, I have two installations of Galaxie Blog, one installation is found under www.gregoryalexander.com where I have other sites. My own personal site takes precedence and is installed in the root directory, and Galaxie Blog is stored in the www.gregoryalexander.com/blog folder. However, my test blog site is installed under the www.gregorysblog.org URL. Here, it makes no sense to create a blog folder- typing in www.gregorysblog.org/blog/ is redundant, so I store the blog in the root directory. When a user navigates to the gregorysblog.org URL, they immediately see the blog without having to type in an extraneous folder. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Once you determine the structure of your blog, rename the blog folder to anything that you would like.  If you want to install the blog in your &lt;b&gt;root&lt;/b&gt; folder, copy and paste all of the files outside of the blog folder- and then remove the blog folder. You don't need to keep the same structure that was in place that you downloaded. Galaxie Blog will adjust the paths as necessary when running the web based installer. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Upload the files&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>After you have the structure that you want, upload all of these files to your web server using your preferred ftp client. It is a large package, and it will take some time. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Run the installer&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Once the files have been uploaded to your own web server, you need to navigate to the installer. Unless you have renamed or removed the blog folder, the default path would be &lt;b&gt;'/blog/installer/'&lt;/b&gt;. If you changed the default structure, navigate to the 'installer' folder on your website. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Once you have navigated to the installer, A 'welcome' screen should appear. Read through it and click on the 'get started' button at the end of the page.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>You will be asked whether to continue or cancel. Unless you know what you're doing and have a previously installed version of BlogCfc or Galaxie Blog, click on the continue link inside this page.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>After clicking on the continue link, you will be asked to enter the DSN and Crypto settings. You will need to get the database information from your hosting provider, or server administrator. Unless you have a really good reason to change the security algorithms, leave the 'Crypto' settings as is. Once the DSN information is entered, click on the 'Verify and continue' button. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/5installerWelcome.gif" data-fancybox-group="installBlog" title="Welcome Screen"&gt;&lt;img data-src="/blog/doc/install/5installerWelcomeThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/5serverFtpStructure.gif" data-fancybox-group="installBlog" title="Galaxie Blog FTP Structure"&gt;&lt;img data-src="/blog/doc/install/5serverFtpStructureThumb.gif" alt="" class="fade thumbnail"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/7installerStep2.gif" data-fancybox-group="installBlog" title="DSN"&gt;&lt;img data-src="/blog/doc/install/7installerStep2Thumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Run scripts&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Step 3 will ask you a question. If you have never installed BlogCfc or Galaxie Blog, click on the 'set up my database'. If you have a working BlogCfc or Galaxie Blog database, click on the 'move to settings' button.<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/8installerRunScripts.gif" data-fancybox-group="installBlog" title="Run Scripts"&gt;&lt;img data-src="/blog/doc/install/8installerRunScriptsThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Settings&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>The next screen is more complex. Here you will be asked to provide additional settings. The 2nd setting is important. Enter the name of the the exact URL that points to your blog, along with the index.cfm page that is placed by default into the /blog/ folder (domain name + /blog/index.cfm). In my installation on the gregoryalexander.com site, the URL is http://www.gregoryalexander.com/blog/index.cfm. On my test server, where I eliminated the 'blog' folder and put everything in the root directory, the URL is http://www.gregorysblog/index.cfm. If you only allow SSL, replace 'http' with 'https'. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>You will have to contact your hosting provider or server administrator in order to enter the email settings. Keep the default settings in the drop down menu's, and click on the 'save settings' button. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/9installerStep4.gif" data-fancybox-group="installBlog" title="Galaxie Blog Installation Settings"&gt;&lt;img data-src="/blog/doc/install/9installerStep4Thumb.gif" alt="" / class="fade thumbnail"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>After the installation process, you will need to delete the installer folder (the installer disables it once everything is installed, but it is best to delete the installer folder from the server as well) and fine tune the settings using the blog's administrative interface. The default administrative interface is found under /blog/admin/' There are articles on this web site that explains the settings in detail. If you have a problem, please email me, or make a comment on this website, and I will try to help you.<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/install/10installerComplete.gif" data-fancybox-group="installBlog" title="Complete"&gt;&lt;img data-src="/blog/doc/install/10installerCompleteThumb.gif" alt="" / class="fade thumbnail"&gt;&lt;/a&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:This article discusses the steps that should be taken immediately after a new installation of Galaxie Blog. After installing a new version of Galaxie Blog using the installer, there are several essential settings that need to be set and other tasks that should be performed.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/13/Immediate-steps-after-installation"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/13/Immediate-steps-after-installation",<char code='0d'/><char code='0a'/>  "headline": "Immediate steps after Galaxie Blog installation",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanInstall1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanInstall1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanInstall1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "This article discusses the steps that should be taken immediately after a new installation of Galaxie Blog. After installing a new version of Galaxie Blog using the installer, there are several essential settings that need to be set and other tasks that should be performed.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-13",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This article discusses the steps that should be taken immediately after a new installation of Galaxie Blog. &lt;br&gt;<char code='0d'/><char code='0a'/>After installing a new version of Galaxie Blog using the installer, there are several essential settings that need to be set and other tasks that should be performed. &lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;First off, be sure to &lt;b&gt;delete the 'installer' folder&lt;/b&gt; found on your server. The installer disables the installer folder after a successful install, however, for safety, it is best to delete this. If you need to reinstall in the future, you can always upload the installer again or download a new installer from my blog. &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Navigate the administrative site&lt;/b&gt;. The administrative section is found by removing the 'index.cfm' string and appending /admin/ to your URL. If this looks familiar to you- you probably have noticed that I am using the original BlogCfc interface created by Raymond Camden, but with a lot of new settings.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt; To &lt;b&gt;log in&lt;/b&gt; after a new install, type in admin as the user name and the password.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;Click on the 'update password' link in the administrative interface to &lt;b&gt;update your user credentials&lt;/b&gt;. Type in admin as the 'old password', and enter your new password twice. Click on the 'update' button once you're done. &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Change the default blog user name&lt;/b&gt;. Click on the 'users' link to open the user interface and click on the admin link to open the user editor. In the user editor, you can ignore everything other than the 'name' entry. Change the name to the default name that you want displayed when you make an entry and click on the save button. If you don't change the name here, any blog entry that you will make will show the name as 'name'. &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;Lets make a quick test entry to &lt;b&gt;verify a few things&lt;/b&gt;... Click on the 'Add entry' link to open the Entry Editor. Note your local time, type in a quick title, and add a sentence or two in the Body section. Type in anything for the category, and click on the save button. This should create a new test entry. Once complete, go to your home page outside of the administrative section. See if the name next to the entry is the same name that you changed in the previous step. Also, check the time of the post to see if it matches your own local time. &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Synchronize server and local time&lt;/b&gt;. If the posted time does not match your local time, your hosting provider or server is located in a different time zone. To create an offset value, subtract or add hours in order for the time to match up. If the time on your post is greater than your own local time you need to append a minus (-) sign to the value. If your local time is greater than the posted time, you need to append a plus (+) sign to the figure. &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;<char code='0d'/><char code='0a'/>    &lt;ol&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;I'll use my own test post to explain. My hosting provider is located two time zones away. I posted this test post at 7:11 PM PST. However, the time stamp on the post indicates 9:11 PM. 9 minus 7 is 2, and my time is less than the hosting servers time, so my offset string will be &amp;quot;-2&amp;quot;. Finally, to &lt;b&gt;synchronize the time&lt;/b&gt;, click on the settings link, and find the content section. There is an offset entry. Here I changed the offset value from 0 to -2, and clicked on the save button.&lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;/ol&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;The next post will discuss how to &lt;b&gt;modify your themes&lt;/b&gt;.&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog has 14 different beautiful default themes that you can choose from. Each theme can be easily customized using a web interface. You can have as many themes as you want, or design a single theme, but you should first choose a default theme from which to start with. All of the default themes can be viewed by clicking on the themes link at the top of each page. Once you choose a theme, you can adjust the settings of the theme, such as changing the header properties, page display settings, changing Logos, etc. After modifying the default theme to your liking, you can further fine tune the look and feel using a web based theme builder interface.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/24/Theme-Settings-in-the-administrative-web-interface"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/24/Theme-Settings-in-the-administrative-web-interface",<char code='0d'/><char code='0a'/>  "headline": "How to customize Galaxie Blog themes.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/kendoThemeHeaderBig1.gif",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/kendoThemeHeaderBig1.gif",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/kendoThemeHeaderBig1.gif"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Galaxie Blog has 14 different beautiful default themes that you can choose from. Each theme can be easily customized using a web interface. You can have as many themes as you want, or design a single theme, but you should first choose a default theme from which to start with. All of the default themes can be viewed by clicking on the themes link at the top of each page. Once you choose a theme, you can adjust the settings of the theme, such as changing the header properties, page display settings, changing Logos, etc. After modifying the default theme to your liking, you can further fine tune the look and feel using a web based theme builder interface.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-24",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Galaxie Blog&lt;/b&gt; has 14 different beautiful default themes that you can choose from. Each theme can be easily customized using a web interface. You can have as many themes as you want, or design a single theme, but you should first choose a default theme from which to start with. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>All of the default themes can be viewed by clicking on the themes link at the top of each page. Once you choose a theme, you can adjust the settings of the theme, such as changing the header properties, page display settings, changing Logos, etc. After modifying the default theme to your liking, you can further fine tune the look and feel using a web based theme builder interface. I will cover how to use the theme builder in later posts. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/themeDropdownMenu.jpg" data-fancybox-group="settings" title="Theme Dropdown Menu"&gt;&lt;img data-src="/blog/doc/themes/themeDropdownMenuThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/kendoThemeBuilder.gif" data-fancybox-group="settings" title="Kendo Theme Builder"&gt;&lt;img data-src="/blog/doc/themes/kendoThemeBuilderThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/accentColor.gif" data-fancybox-group="settings" title="Kendo Theme Builder"&gt;&lt;img data-src="/blog/doc/themes/accentColorThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Once you have selected your preferred theme, you can disable the other themes by deselecting the &lt;b&gt;Use theme?&lt;/b&gt; checkbox under the &lt;b&gt;Default Themes&lt;/b&gt; section in the administrative settings interface. Don't worry about losing a theme, you can always enable any theme by checking the checkbox next to the disabled theme. <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/defaultKendoTheme.gif" data-fancybox-group="settings" title="Disabling Default Themes"&gt;&lt;img data-src="/blog/doc/themes/defaultKendoThemeThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are 39 unique theme settings that can be independently applied to each theme. Theme settings are applied using the Settings page in the Blog administrative site. I will briefly go over each new setting here. It it safe to play around with these settings. If you make a mistake, you can always reset the default settings for the particular theme by clicking on the &lt;b&gt;reset theme&lt;/b&gt; button at the bottom of the settings administrative page.<char code='0d'/><char code='0a'/>&lt;i&gt;Notes: this blog is highly optimized for mobile, and some of these settings will not apply. I have indicated what settings are not available to mobile devices in the notes section below.&lt;/i&gt;<char code='0d'/><char code='0a'/>The following three settings are global, and affect all themes.<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/customizeThemes.gif" data-fancybox-group="settings" title="Theme Settings"&gt;&lt;img data-src="/blog/doc/themes/customizeThemesThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Parent Site Name and Link&lt;/b&gt;: The parent site name and parent site link form elements controls the behavior of the menu found at the top of the header. It allows the user to add an option in the menu that links to their home site.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;The &lt;b&gt;Parent Site Name&lt;/b&gt; will display the title of the site within the menu. On my site, the text is &lt;b&gt;Gregory Alexander - Web Design&lt;/b&gt;. The &lt;b&gt;Parent Site Link&lt;/b&gt; can be any link to another site. The link is triggered when a user clicks on the menu option. On this site, the link is www.gregoryalexander.com.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Default Font Size&lt;/b&gt; will set the font size for the blog content. You can choose any value between 8 and 26 points. Note: the &lt;b&gt;Default Font Size&lt;/b&gt; will not change the size of the text in the header. I manually set the header text to be at 16 point in the menu on desktop devices, and 12 points for mobile devices.&lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/settings/blogInformation.gif" data-fancybox-group="settings" title="Blog Information Settings"&gt;&lt;img data-src="/blog/doc/settings/blogInformationThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>All of the settings below can be set by theme. Each theme operates independently, and can have its own unique settings. You can modify or create 14 different themes.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;The &lt;b&gt;Modify Default Themes&lt;/b&gt; checkbox is used when the owner of the blog is ready to modify the default themes. Until this button is checked, the site will operate as it is intended here, with the default settings intact.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;The &lt;b&gt;Kendo Base Theme&lt;/b&gt; allows the blog owner to review all of the default blog settings. Blog owners can look and see where the current images are stored, what library paths are used, and determine the element properties of the containers on the site. It is recommended that you browse the existing themes, and choose the theme that is closest to the theme that you want to create. In order to modify a theme, click on the default theme that you are interested in, and modify the settings that are displayed in the form.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Kendo Theme .css Location&lt;/b&gt; (string): if you want to create your own Kendo less based theme and replace the existing .less based theme, use the &lt;a href="https://demos.telerik.com/kendo-ui/themebuilder/"&gt;Kendo Theme Builder&lt;/a&gt; to modify the base theme, upload it, and change the default path and point it to the new .less file that you created using the Kendo theme builder.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Kendo Mobile Theme .css location&lt;/b&gt; (string): when you create your own Kendo theme, make sure to also specify the new path of the mobile theme as well.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Custom Theme Name&lt;/b&gt; (string): provide the theme name that you want others to see when they look at your own site. This setting has no effect on the 1.1 version, but is a placeholder for the next major release.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Dark Theme&lt;/b&gt; (true/false): Galaxie Blog has built in logic to pull in different resources depending upon the overall color of the theme. If the theme has a dark background for example, Galaxie Blog will pull in a different version of the code highlighter. There are quite a few different adjustments that are made, but it is up to you to determine whether Galaxie Blog should adjust its logic for to adapt to a light or a darker screen background. You can see this in action by comparing the following two default themes: &lt;b&gt;Blue Wave&lt;/b&gt; (a light theme with dark text) and &lt;b&gt;Blue Wave Dark&lt;/b&gt;, a dark theme with white text.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/defaultThemes/blueWave.jpg" data-fancybox-group="settings" title="Blue Wave Theme"&gt;&lt;img data-src="/blog/doc/themes/defaultThemes/blueWaveThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/defaultThemes/blueWaveDark.jpg" data-fancybox-group="settings" title="Blue Wave Dark Theme"&gt;&lt;img data-src="/blog/doc/themes/defaultThemes/blueWaveDarkThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Blog Content Width&lt;/b&gt; (numeric): The current blog content is set at 66% of the screen and should be left at this setting unless you set it much higher. When you're looking at the blog, you can see that the blog content portion in the center of the screen. The blog content section may contain the header (we will go over this later), the blog content that contains the blog posts, the side bar to the right which contains the links to the various parts of the site (such as the subscribe interface), and the footer. The blog owner can adjust this as they see fit, they can set it to 100% if they don't want any background image at all. However, unless you want to set this quite a bit higher, it is strongly recommended to leave this particular setting at 66%. If this setting is set at 66%, the background width is programmatically optimized and will change depending upon the screen width of the device. Note: this setting has no effect on mobile devices. To illustrate, the blog content width set at 100% is shown below (the 'Main Container' and 'Pod Container' widths were kept at default settings (65% and 35%)). <char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/contentWidthAt100.jpg" data-fancybox-group="settings" title="Content Width 100%"&gt;&lt;img data-src="/blog/doc/themes/contentWidthAt100Thumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Main Container Width&lt;/b&gt; (numeric): the main container holds all of the blog posts. It is currently set at 65% of the Blog Content Width (see above). If you set this higher, or lower, the side bar (also known as the 'pod width') to the right will also be adjusted accordingly. This setting has no effect on mobile devices. Note: the Main Container Width plus the Pod Container width will always equal 100.<char code='0d'/><char code='0a'/>  <char code='0d'/><char code='0a'/>  The following image has the following settings: <char code='0d'/><char code='0a'/>  &lt;ol&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Blog Content Width: 50%&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Main Container Width: 50%&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Pod Container Width: 50%&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/blogContentAtFiftyPercent.jpg" data-fancybox-group="settings" title="Content Width 50%"&gt;&lt;img data-src="/blog/doc/themes/blogContentAtFiftyPercentThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/widthDiagram.gif" data-fancybox-group="settings" title="Width Diagram"&gt;&lt;img data-src="/blog/doc/themes/widthDiagramThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Pod Container Width&lt;/b&gt; (numeric): the pod container is the section to the right of the main container. It contains the subscribe interface, tags, recent posts, etc. The current setting is set to 35%, but you can adjust it as you see fit. Notes: if you change this setting, the Main Container Width will be adjusted accordingly. This setting has no effect on mobile devices. The Main Container Width plus the Pod Container width will always equal 100.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Opacity&lt;/b&gt; (numeric): If you look carefully at the site, you can see a faint trace of the background image underneath. I prefer this look as it creates visual interest. The opacity settings are different depending upon the theme, but you can change this setting to your own liking. You can set it at 100% to eliminate the opacity, or set it lower than the current setting if you want the background to bleed through.<char code='0d'/><char code='0a'/><char code='09'/>  The image to the left has opacity set at 80%, and the right image is set at 99%.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/opacity80.jpg" data-fancybox-group="settings" title="Opacity set at 80%"&gt;&lt;img data-src="/blog/doc/themes/opacity80Thumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/opacity99.jpg" data-fancybox-group="settings" title="Opacity set at 99%"&gt;&lt;img data-src="/blog/doc/themes/opacity99Thumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Background Image&lt;/b&gt; (string): enter the absolute path to the image that you want shown as the background image for the desired theme. If you prefer the look of a clean site without any background, or don't want any background at all, leave this blank. Additionally, you can specify an image that will create a background pattern, and use the next variable, &lt;b&gt;Background Image Repeat .css&lt;/b&gt;, to create a unique pattern as a background.<char code='0d'/><char code='0a'/>  The image below does not have a background image set&lt;br/&gt;<char code='0d'/><char code='0a'/>  &lt;a class="fancybox-effects" href="/blog/doc/themes/noBackground.jpg" data-fancybox-group="settings" title="No Background Image"&gt;&lt;img data-src="/blog/doc/themes/noBackgroundThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Background Image Repeat .css&lt;/b&gt; (string): you can use any valid background image repeat .css. This was built into the themes as a blog owner may want to create sophisticated pattern objects for the background.<char code='0d'/><char code='0a'/>  The pattern shown below image has the following settings: <char code='0d'/><char code='0a'/>    &lt;ol&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Background Image Repeat: repeat&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/backgroundImageRepeat.jpg" data-fancybox-group="settings" title="Pattern with background repeat"&gt;&lt;img data-src="/blog/doc/themes/backgroundImageRepeatThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Background Image Position .Css&lt;/b&gt; (string): setting your favorite background 'hero' image using the default 'center center' is not always the best approach. The background image position rule allows you to set the background image to exact coordinates to make sure that it looks good on all screen sizes. See background position for more information.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Stretch Header across Page&lt;/b&gt; (true/false): if you want your header to consume the entire width of the page, set this to true. The default setting is false. On mobile devices, this setting is automatically set at 100%.<char code='0d'/><char code='0a'/><char code='09'/>  The image below is set to true.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/stretchHeaderAccrossPage.jpg" data-fancybox-group="settings" title="Stretch header across page"&gt;&lt;img data-src="/blog/doc/themes/stretchHeaderAccrossPageThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/stretchHeaderAccrossPageDiagram.gif" data-fancybox-group="settings" title="Diagram of the stretch header across page"&gt;&lt;img data-src="/blog/doc/themes/stretchHeaderAccrossPageDiagramThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Align Header with Content&lt;/b&gt; (true/false): the default setting is true for all of the current default themes, but setting this to false allows the header to be set at the far left or right of the page, or the absolute center. Leaving this to true adjusts the size of the header to fit the width of the content width (see Blog Content Width).&lt;br/&gt;<char code='0d'/><char code='0a'/> The image below has the Align Header with Content set at false with menu align center. &lt;br/&gt;<char code='0d'/><char code='0a'/>  Note: this setting is only relevant if the Stretch Header across Page is set to true.<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Menu Align&lt;/b&gt; (left, center, right): you can align the header to the left, center, or right. Use this in conjunction with the &lt;b&gt;Align Header with Content&lt;/b&gt; and &lt;b&gt;Stretch Header across Page&lt;/b&gt; properties to create the look that you like.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/noAlignHeaderWithContent.jpg" data-fancybox-group="settings" title="Align Header with Content set to false"&gt;&lt;img data-src="/blog/doc/themes/noAlignHeaderWithContentThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;Header Background Image&lt;/b&gt; (string): currently, I use simple images with various gradient fills that are used as the header background. You can set the header background to use any image. You can get creative here, perhaps you want an image that is filled with a pattern, or a header that displays lots of floating bubbles, it is your call.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/background/orangeSatin.jpg" data-fancybox-group="settings" title="Orange Satin Background"&gt;&lt;img data-src="/blog/doc/background/orangeSatinThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/orangeSatinHeaderBg.jpg" data-fancybox-group="settings" title="Header with Orange Satin Background"&gt;&lt;img data-src="/blog/doc/themes/orangeSatinHeaderBgThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Cover Menu with Menu Background Image&lt;/b&gt; (true/false): this setting is a bit complex. For my personal &lt;b&gt;Zion&lt;/b&gt; and &lt;b&gt;Orion&lt;/b&gt; themes, I wanted a the color scheme on the menu to match the color scheme of the background images and the .less theme file that controls the forms and widgets. In order to have the selected menu item match the orange color scheme, I 'covered' the Kendo menu with the background image that I used on the header with .css. This setting allows the menu background image to be shown within the Kendo menu itself. All of the other current themes have this setting set at false. Setting this to false should be sufficient in most cases; the menu is already tailored to the .less based theme that is set. However, there are reasons that a blog owner may want to set this to true on occasion. For example, if a blog owner creates a menu image with a lot of little floating bubbles, setting this to true will also allow the menu items to show these little bubbles as well.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Mobile Logo Image&lt;/b&gt; (string): You will want your mobile logo image to be much smaller than the logo image for desktop devices. Enter the absolute location of the image.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Mobile Logo Image Width&lt;/b&gt; (numeric (pixel width): this typically is set to be 60 pixels or less.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Desktop Logo Image&lt;/b&gt; (string): enter the absolute path pointing to the location of your logo that will be shown on desktop devices.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Logo Padding&lt;/b&gt; (top, right, bottom, left)': you can fine tune the logo placement with these settings. The default settings are left at 0px.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Blog Name Text Color&lt;/b&gt; (hexadecimal string): this setting controls the text color of all of the items in the menu. Use any valid hexadecimal or valid HTML color value. If using a hexadecimal value, make sure to put a pound in front of the hexadecimal string it as well.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Header Divider Image&lt;/b&gt; (string). This is the horizontal image divider that separates the header and the blog content, and the blog content and the footer. Currently, it is a little grey bar, but you can design your own and specify it here using an absolute path.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:ColdFusion sometimes drives me a bit wonky when I try to set a dynamic variable inside a tag. Most ColdFusion tags support embedded dynamic variables, but quite a few tags don't support this. If you try to use a dynamic variable using a cfcookie tag, you will get the following nasty error: Attribute validation error for tag CFCOOKIE. It has an invalid attribute combination. To get around this, simply use the cookie scope instead in order to set the dynamic path value.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/28/Using-a-dynamic-variable-to-set-a-dynamic-path-variable-when-dropping-a-cookie"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/28/Using-a-dynamic-variable-to-set-a-dynamic-path-variable-when-dropping-a-cookie",<char code='0d'/><char code='0a'/>  "headline": "Using a dynamic variable to set a ColdFusion cookie.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/bakingCookies.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/bakingCookies.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/bakingCookies.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "ColdFusion sometimes drives me a bit wonky when I try to set a dynamic variable inside a tag. Most ColdFusion tags support embedded dynamic variables, but quite a few tags don't support this. If you try to use a dynamic variable using a cfcookie tag, you will get the following nasty error: Attribute validation error for tag CFCOOKIE. It has an invalid attribute combination. To get around this, simply use the cookie scope instead in order to set the dynamic path value.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;ColdFusion sometimes drives me a bit wonky when I try to set a dynamic variable inside a tag. Most ColdFusion tags support embedded dynamic variables, but quite a few tags don't support this. Probably the most frustrating issue is when you want to use a &lt;a href="https://www.bennadel.com/blog/2115-extending-the-application-cfc-coldfusion-framework-component-with-a-relative-path-proxy.htm"&gt;dynamic variable to extend an application&lt;/a&gt; in a sub-folder using two or more application.cfc templates. It seems that every other time I do this I slap my head and think 'Oops! its time to set up proxy extensions', sigh... but this frustrating issue requires a very long blog entry for a different day. Back to my point...&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you try to use a dynamic variable using a cfcookie tag, you will get the following nasty error:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcookie name="isAdmin" value="true" path="#application.baseUrl#" expires="never"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;Attribute validation error for tag CFCOOKIE.<char code='0d'/><char code='0a'/>It has an invalid attribute combination: expires,name,path,value. Possible combinations are:<char code='0d'/><char code='0a'/>Required attributes: 'name'. Optional attributes: 'domain,encodevalue,expires,httponly,preservecase,secure,value'.<char code='0d'/><char code='0a'/>Required attributes: 'domain,name,path'. Optional attributes: 'encodevalue,expires,httponly,preservecase,secure,value'.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;To get around this, simply use the cookie scope instead in order to set the dynamic path value.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Using the cfcookie tag does not work with dynamic vars in the path. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset cookie.isAdmin = { value="true", path="#application.baseUrl#", expires=30 }&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Both cfcookie and the cookie scope do the same thing, &lt;a href="https://www.bennadel.com/blog/1913-setting-coldfusion-cookies-with-cfcookie-vs-cookie-scope.htm"&gt;send a cookie to the client&lt;/a&gt;, but at least the cookie scope allows you to embed dynamic variables for in the path name.&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog is built from scratch to be fully themeable, and using the Kendo theme builder in addition with the built in theme settings allows you to have full control over the look and feel of your own theme. It was my goal to have dozens of themes and interfaces built into Galaxie Blog that would help to allow you to build a theme that you love- or to get you 95% of the way. If the theme does not perfectly match the look and feel of your site, using the Kendo UI Theme builder should be able to take you the rest of the way there.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/6/28/Fine-tuning-your-theme-with-Kendo-Theme-Builder"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/6/28/Fine-tuning-your-theme-with-Kendo-Theme-Builder",<char code='0d'/><char code='0a'/>  "headline": "Using the Kendo Theme Builder to Modify a Galaxie Blog Theme",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/kendoThemeHeaderBig.gif",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/kendoThemeHeaderBig.gif",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/kendoThemeHeaderBig.gif"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Galaxie Blog is built from scratch to be fully themeable, and using the Kendo theme builder in addition with the built in theme settings allows you to have full control over the look and feel of your own theme. It was my goal to have dozens of themes and interfaces built into &lt;/b&gt;Galaxie Blog&lt;/b&gt; that would help to allow you to build a theme that you love- or to get you 95% of the way. If the theme does not perfectly match the look and feel of your site, using the &lt;b&gt;Kendo UI Theme builder&lt;/b&gt; should be able to take you the rest of the way there.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-09"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Galaxie Blog is built from scratch to be fully themeable, and using the Kendo theme builder in addition with the built in theme settings allows you to have full control over the look and feel of your own theme.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;It was my goal to have dozens of themes and interfaces built into &lt;/b&gt;Galaxie Blog&lt;/b&gt; that would help to allow you to build a theme that you love- or to get you 95% of the way. If the theme does not perfectly match the look and feel of your site, using the &lt;b&gt;Kendo UI Theme builder&lt;/b&gt; should be able to take you the rest of the way there.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;a href="https://demos.telerik.com/kendo-ui/themebuilder/"&gt;&lt;b&gt;Kendo UI Theme Builder&lt;/b&gt;&lt;/a&gt; enables you to modify Kendo UI themes to perfectly match the look and feel of your website or application. Without scripting or using HTML, you will have complete control over the design of the buttons, backgrounds, windows, widgets, such as the calendar and HTML5 media player, dialog's, and even alternating color schemes with an easy to use interface.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;To modify the .less based theme file, first preview and choose one of Galaxie Blog default themes that comes close to the look and feel of your site. The base Kendo theme can be found by either looking at the URL, or on the settings page in the administrative interface.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/defaultKendoTheme.gif" data-fancybox-group="kendoUiThemeBuilder" title="Base Kendo Theme in Settings Page"&gt;&lt;img data-src="/blog/doc/themes/defaultKendoThemeThumb.gif" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/baseKendoThemeUrl.jpg" data-fancybox-group="kendoUiThemeBuilder" title="Base Kendo Theme in URL"&gt;&lt;img data-src="/blog/doc/themes/baseKendoThemeUrlThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;Once you jot down the name of your desired theme, head over to the &lt;a href="https://demos.telerik.com/kendo-ui/themebuilder/"&gt;Kendo UI Theme Builder&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;On the far left of the interface, click on the Kendo theme that you have chosen. Here, you have hundreds of different options to choose from, but first start out by changing the accent and widget base colors. You'll notice that any changes that you have made will be shown to you on the right immediately. The first dozen or settings are important, you don't need to check out the series colors, most of these are for various charts. Investigate and set everything as you would like, and when you're ready, click on the &lt;b&gt;download&lt;/b&gt; button at the top of the page.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/widgets.jpg" data-fancybox-group="kendoUiThemeBuilder" title="Kendo UI Theme Builder"&gt;&lt;img data-src="/blog/doc/themes/widgetsThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/kendoThemeBuilderDownload.jpg" data-fancybox-group="kendoUiThemeBuilder" title=Download"&gt;&lt;img data-src="/blog/doc/themes/kendoThemeBuilderDownloadThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;After downloading the files and extracting the .zip file, you should see 3 different files: kendo.custom.css: kendo.custom.dataviz.json, and kendo.custom.less. Upload the two .css and .less files to your server. I suggest saving these two files in a new folder named 'myStyles' in the /common/libs/kendoCore directory, but you can save them anywhere on your server that you would like.&lt;br/&gt;<char code='0d'/><char code='0a'/>Note: you don't need to do anything with the .json file. &lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/customThemeFiles.jpg" data-fancybox-group="kendoUiThemeBuilder" title=Theme Builder Files"&gt;&lt;img data-src="/blog/doc/themes/customThemeFilesThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;After uploading the file to your server, jot down the path that you uploaded the kendo.custom.css file to, and head over to Galaxie Blog administrative interface and click on the settings link.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In the settings page, look for the &lt;b&gt;Customize Kendo Themes&lt;/b&gt; section. Click on the &lt;b&gt;modify themes&lt;/b&gt; checkbox, and type in the path and file name that you uploaded the kendo.custom.css file to. Don't worry about the mobile theme location setting, the mobile settings should work with the custom .css file. Leave the rest of the forms as is, and click on the &lt;b&gt;save&lt;/b&gt; button at the bottom of the page. You may have to iterate through the same steps again if you want to continue to dink around with the look and feel of the theme.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/themes/kendoThemeCssLocation.jpg" data-fancybox-group="kendoUiThemeBuilder" title="Kendo Theme .css Location Setting"&gt;&lt;img data-src="/blog/doc/themes/kendoThemeCssLocationThumb.jpg" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Happy Theming!&lt;/b&gt;&lt;/p&gt;</string><string>"*(a)*"<char code='0d'/><char code='0a'/>~"*(a+)*"</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Using top: auto, margin: auto, margin-top: -50%, etc, will not work when vertically aligning text within multiple block level elements.<char code='0d'/><char code='0a'/>The problem with these css declarations in block level elements is that the values would be calculated as zero when they are calculated relative to the width of outer blocks.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/7/12/Using-verticalalign-middle-top-auto-margintop-50-will-not-work-when-vertically-aligning-tex"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/7/12/Using-verticalalign-middle-top-auto-margintop-50-will-not-work-when-vertically-aligning-tex",<char code='0d'/><char code='0a'/>  "headline": "Aligning text with CSS within multiple block level elements.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/css2.gif"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Using top: auto, margin: auto, margin-top: -50%, etc, will not work when vertically aligning text within multiple block level elements.<char code='0d'/><char code='0a'/>The problem with these css declarations in block level elements is that the values would be calculated as zero when they are calculated relative to the width of outer blocks. ",<char code='0d'/><char code='0a'/>  "datePublished": "2019-6-12",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Using top: auto, margin: auto, margin-top: -50%, etc, will not work when vertically aligning text within multiple block level elements.<char code='0d'/><char code='0a'/>The problem with these css declarations in block level elements is that the values would be calculated as zero when they are calculated relative to the width of outer blocks. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>CSS2 specifies that block level elements are stacked vertically from top to bottom in normal flow. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If you only have one block level element, the the top and bottom margins will be zero and these declarations will be calculated correctly. For example, the following code will work to vertically align the text:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>.slide#slide02 .wrapper {<char code='0d'/><char code='0a'/><char code='09'/>top: auto;<char code='0d'/><char code='0a'/><char code='09'/>left: 5%;<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/><char code='09'/>padding: 0; <char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>However, if you have more than one block level element in the same flow, the code will not work as the auto margins will not be calculated correctly.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>When you're using multiple block level elements, use absolute positioned elements to vertically align the text like so:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>.slide#slide02 .wrapper {<char code='0d'/><char code='0a'/><char code='09'/>position: absolute;<char code='0d'/><char code='0a'/><char code='09'/>top: 50%;<char code='0d'/><char code='0a'/><char code='09'/>display: table-cell;<char code='0d'/><char code='0a'/><char code='09'/>vertical-align: middle;<char code='0d'/><char code='0a'/><char code='09'/>left: 5%;<char code='0d'/><char code='0a'/><char code='09'/>text-align: left;<char code='0d'/><char code='0a'/><char code='09'/>padding: 0; <char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;titleMetaTag:Galaxie Blog is a free open source ColdFusion based blog. It is intended to be the most beautiful and functional open sourced ColdFusion based blog in the world.&gt;&lt;/titleMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog is a free open source ColdFusion Blog has a stunning interface and is eminently themeable. Galaxie Blog is a responsive website that offers nearly identical functionality for both desktop and mobile devices.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog is a next generation blog platform and is the most beautiful and functional open sourced ColdFusion blog in the world. &lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:/blog/enclosures/facebook/delicateArch.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:/blog/enclosures/twitter/delicateArch.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "WebPage",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/7/16/Introducing-Gregorys-Blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/7/16/Introducing-Gregorys-Blog",<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog - the most beautiful open source ColdFusion blog in the world",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/delicateArch.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/delicateArch.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/delicateArch.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Galaxie Blog is a free open source ColdFusion Blog has a stunning interface and is eminently themeable. Galaxie Blog is a responsive website that offers nearly identical functionality for both desktop and mobile devices.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-7-15",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/>&lt;cfincludeTemplate:/blog/includes/postContent/parallax/parallaxScript.cfm&gt;&lt;/cfincludeTemplate&gt;</string><string>&lt;descMetaTag:Content... who in the hell is going to read anything about ColdFusion and Telerik Kendo integration anyway!? Sigh....&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Content...&lt;/b&gt; who in the hell is going to read anything about ColdFusion and Telerik Kendo integration anyway!? Sigh....</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I have not been blogging for awhile now... and had wanted to wait to post anything until I got out another incremental version of the Blog before posting- but I am still working on it.<char code='0d'/><char code='0a'/>Ben Nadel, Charlie Arehart, Wil Genovese, and other major bloggers have the ColdFusion blog world covered- and I  like developing. I'm also a reluctant blogger. But, I digress- I wanted to write up a quick status update...&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/9/1/Galaxie-Blog-status-update"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/9/1/Galaxie-Blog-status-update",<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog update and name change",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/8_31.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/8_31.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/8_31.png"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I have not been blogging for awhile now... and had wanted to wait to post anything until I got out another incremental version of the Blog before posting- but I am still working on it.<char code='0d'/><char code='0a'/>Ben Nadel, Charlie Arehart, Wil Genovese, and other major bloggers have the ColdFusion blog world covered- and I  like developing. I'm also a reluctant blogger. But, I digress- I wanted to write up a quick status update...",<char code='0d'/><char code='0a'/>  "datePublished": "2019-09-01",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;I have not been blogging for awhile now... and had wanted to wait to post anything until I got out another incremental version of the Blog before posting- but I am still working on it.<char code='0d'/><char code='0a'/>Ben Nadel, Charlie Arehart, <char code='0d'/><char code='0a'/>Wil Genovese, and other major bloggers have the ColdFusion blog world covered- and I  like developing. I'm also a reluctant blogger. But, I digress- I wanted to write up a quick status update...<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>One of you out there (there has got to be one of you out there, right!?) may have noticed that I used the term 'Galaxie Blog', not 'Gregory's Blog', right? Why yes, &lt;i&gt;that's right! I renamed it to Galaxie Blog!&lt;/i&gt; This blog has not had much attention, and it may be due to the perception that this is my own personal blog, which its not. its a major free open source ColdFusion project needing some love and attention!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I had multiple conversations with Charlie, and one of his suggestions was to change the name of this blog to 'Galaxie Blog'. And after some thought- I agree with him, thus the name change...<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have been working on a &lt;b&gt;lot of things&lt;/b&gt; other than the easy branding change... <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The new version, still in development, is &lt;b&gt;2-3x faster&lt;/b&gt; than this site. Google lighthouse is scoring the new development version &lt;b&gt;between 70 and 90&lt;/b&gt; percent on &lt;b&gt;performance&lt;/b&gt;. The performance range is all over the place. I could get a 72 score, run it again, and get a 98 two seconds later (which is shown in the photo above). However, I got consistent results between 70 and 90. &lt;i&gt;For comparison, the industry &lt;b&gt;average performance score&lt;/b&gt; of the top ecommerce sites is is around &lt;b&gt;22%&lt;/b&gt;&lt;/i&gt; (https://www.practicalecommerce.com/70-leading-retailers-lighthouse-scores-revealed).<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The Google lighthouse &lt;b&gt;accessibility&lt;/b&gt; score is consistent at &lt;b&gt;100%.&lt;/b&gt; The average score of the top e-commerce sites is around 60%.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;SEO&lt;/b&gt; (search engine optimization) score is still at &lt;b&gt;100%&lt;/b&gt;, but I made a deeper dive into current SEO practices and made several other improvements. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Best Practices&lt;/b&gt; is at &lt;b&gt;86%&lt;/b&gt;. The only major hits here were not using the http2 protocol (my ISP does not yet allow http2 calls yet, or the score would be much higher). Industry average is about 61%.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I am also quite close to being able to having Galaxie Blog (it feels weird writing that!) as a Progressive Web App. A &lt;b&gt;Progressive Web App&lt;/b&gt; is a web application that is installable. It will still run when the user does not have an internet connection (via cache) and then send push notifications when the client is back online. However, I am still not sure if I will be able to finish this in this particular version.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I have a lot more stuff that I have made improvements upon, and I should have this new version out relatively soon... please bear with me.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Suggestions and comments would be quite welcomed!&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Gregory<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Lame PS &lt;i&gt;Hello? Hello? Is anyone out there! Please feel free to say hello!&lt;/i&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:&lt;b&gt;Lazy loading&lt;/b&gt; is a process where you defer loading your non-essential scripts and media until after the page loads. With lazy loading, you don't load everything at once, however, you defer the loading of images and scripts until they are actually needed. This is essential if you're trying to improve the load time of your site. In this technical article, I will show you the process that I used in order to vastly improve the performance of this blog site.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/9/9/How-to-speed-up-your-site-with-lazy-loading"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/9/9/How-to-speed-up-your-site-with-lazy-loading",<char code='0d'/><char code='0a'/>  "headline": "How to lazy load site resources and media",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/performance.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/performance.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/performance.png"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "&lt;b&gt;Lazy loading&lt;/b&gt; is a process where you defer loading your non-essential scripts and media until after the page loads. With lazy loading, you don't load everything at once, however, you defer the loading of images and scripts until they are actually needed. This is essential if you're trying to improve the load time of your site. In this technical article, I will show you the process that I used in order to vastly improve the performance of this blog site.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-09-09",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Lazy loading&lt;/b&gt; is a process where you defer loading your non-essential scripts and media until after the page loads. With lazy loading, you don't load everything at once, however, you defer the loading of images and scripts until they are actually needed. This is essential if you're trying to improve the load time of your site.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>In this technical article, I will show you the process that I used in order to vastly improve the performance of this blog site. <char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Let's take a second to visually see what lazy loading is by taking a look at my own site. If you navigate to my main blog at &lt;a href="www.gregoryalexander.com/blog" alt="Gregory's Blog"&gt;www.gregoryalexander.com/blog&lt;/a&gt; and slowly scroll down, you will notice that the images &lt;i&gt;do not load until you reach them&lt;/i&gt;. &lt;i&gt;When the image is in the viewport&lt;/i&gt;, you will notice an image that looks like it is &lt;i&gt;fading in&lt;/i&gt;. I am not loading these images when the page loads, but am waiting for you to scroll down before loading them. In order to achieve this effect, we need to have a library that uses the &lt;b&gt;intersection observer API&lt;/b&gt; .<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>This is how the 'big boy's', like Facebook do it. Follow along and I can walk you through in order to do it on your own.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>There are a multitude of different lazy loading libraries out there. I have tried a handful of these libraries, but settled on &lt;b&gt;&lt;a href="https://github.com/shinsenter/defer.js/" alt="deferjs"&gt;defer.js&lt;/a&gt;&lt;/b&gt; by shinsenter. My requirements are more extensive than usual. Along with the my requirements to lazy load my blog media, I needed to defer the loading of &lt;b&gt;Kendo UI&lt;/b&gt; and other extensive libraries such as the &lt;b&gt;Green Sock Animation Platform (GSAP)&lt;/b&gt;. These libraries need to have a strict order to which libraries are loaded that they depend upon. <char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>I had some issues with a handful of other libraries, but defer.js allowed me to achieve what I need.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Kendo UI&lt;/b&gt; needs to have jQuery loaded prior to the extensive Kendo UI scripts, and Kendo UI requires loading a large javascript library along with common .css files, a .less based css file that is required by the users chosen theme, and mobile css for mobile clients. &lt;b&gt;GSAP&lt;/b&gt; also has several dependencies. I'll go through the process that I used to properly defer these scripts until the page loads defer.js below. At the end of this technical article, &lt;b&gt;I'll discuss how I lazy loaded the blog media as well&lt;/b&gt;.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Before we do anything, we need to insert the &lt;b&gt;defer.js&lt;/b&gt; code in the head section of your document:<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>//* Script to defer script resources. See https://appseeds.net/defer.js/demo.html. <char code='0d'/><char code='0a'/>// @shinsenter/defer.js */<char code='0d'/><char code='0a'/>!function(e,o,t,n,i,r){function c(e,t){r?n(e,t||32):i.push(e,t)}function f(e,t,n,i){return t&amp;&amp;o.getElementById(t)||(i=o.createElement(e||'SCRIPT'),t&amp;&amp;(i.id=t),n&amp;&amp;(i.onload=n),o.head.appendChild(i)),i||{}}r=/p/.test(o.readyState),e.addEventListener('on'+t in e?t:'load',function(){for(r=t;i[0];)c(i.shift(),i.shift())}),c._=f,e.defer=c,e.deferscript=function(t,n,e,i){c(function(e){f(0,n,i).src=t},e)}}(this,document,'pageshow',setTimeout,[]),function(u,n){var a='IntersectionObserver',d='src',l='lazied',h='data-',p=h+l,y='load',m='forEach',r='appendChild',b='getAttribute',c=n.head,g=Function(),v=u.defer||g,f=v._||g;function I(e,t){return[].slice.call((t||n).querySelectorAll(e))}function e(s){return function(e,t,o,r,c,f){v(function(n,t){function i(n){!1!==(r||g).call(n,n)&amp;&amp;(I('SOURCE',n)[m](i),(f||['srcset',d,'style'])[m](function(e,t){(t=n[b](h+e))&amp;&amp;(n[e]=t)}),y in n&amp;&amp;n[y]()),n.className+=' '+(o||l)}t=a in u?(n=new u[a](function(e){e[m](function(e,t){e.isIntersecting&amp;&amp;(t=e.target)&amp;&amp;(n.unobserve(t),i(t))})},c)).observe.bind(n):i,I(e||s+'['+h+d+']:not(['+p+'])')[m](function(e){e[b](p)||(e.setAttribute(p,s),t(e))})},t)}}function t(){v(function(t,n,i,o){t=[].concat(I((i='script[type=deferjs]')+':not('+(o='[async]')+')'),I(i+o)),function e(){if(0!=t){for(o in n=f(),(i=t.shift()).parentNode.removeChild(i),i.removeAttribute('type'),i)'string'==typeof i[o]&amp;&amp;n[o]!=i[o]&amp;&amp;(n[o]=i[o]);n[d]&amp;&amp;!n.hasAttribute('async')?(n.onload=n.onerror=e,c[r](n)):(c[r](n),v(e,.1))}}()},4)}t(),u.deferstyle=function(t,n,e,i){v(function(e){(e=f('LINK',n,i)).rel='stylesheet',e.href=t},e)},u.deferimg=e('IMG'),u.deferiframe=e('IFRAME'),v.all=t}(this,document);<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>This script is short, and it can be either placed inline, or you can grab the code via CDN at &lt;a href="https://github.com/shinsenter/defer.js/" alt="defer.js"&gt;https://github.com/shinsenter/defer.js/&lt;/a&gt;.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt; <char code='0d'/><char code='0a'/>&lt;b&gt;Defer Kendo UI.&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Kendo UI requires loading the following files- in this order: <char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;jQuery (not deferred)&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;kendoUiCore.js (or kendoUiAll if you're using your own license).&lt;/li&gt; <char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The kendoUi common .css file.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The kendoUi theme .css file.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;And the kendoUi mobile .css file&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Here is how I achieved this in actual code. This code also needs to be placed in the head section of the page underneath the defer.js code:<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Load the javascript files.<char code='0d'/><char code='0a'/>&lt;InvalidTag src="/common/libs/kendo/js/jquery.min.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs" src="/common/libs/kendo/js/kendo.all.min.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>// Load the style sheets<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs"&gt;<char code='0d'/><char code='0a'/>// Kendo common css. Note: Material black and office 365 themes require a different stylesheet. These are specified in the theme settings.<char code='0d'/><char code='0a'/>$('head').append( $('&amp;lt;link rel="stylesheet" type="text/css" /&gt;').attr('href', '/common/libs/kendo/styles/kendo.common.min.css') );<char code='0d'/><char code='0a'/>// Less based theme css files.<char code='0d'/><char code='0a'/>$('head').append( $('&amp;lt;link rel="stylesheet" type="text/css" /&gt;').attr('href', '/common/libs/kendo/styles/kendo.silver.min.css') );<char code='0d'/><char code='0a'/>// Mobile less based theme file.<char code='0d'/><char code='0a'/>$('head').append( $('&amp;lt;link rel="stylesheet" type="text/css" /&gt;').attr('href', '/common/libs/kendo/styles/kendo.silver.mobile.min.css') );<char code='0d'/><char code='0a'/>&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Note the &lt;b&gt;deferjs&lt;/b&gt; in the &lt;b&gt;script type&lt;/b&gt;. This is a keyword used by the defer.js library to &lt;b&gt;defer these scripts until page load&lt;/b&gt;. Here, all of the Kendo UI resources are deferred other than the jQuery library. <char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Defer GSAP and ScrollMagic resources.&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;GSAP&lt;/b&gt; is an amazing library if you're interested in cutting edge animation effects. I use GSAP and ScrollMagic to provide for my parallax effects. See the entry &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/7/16/Introducing-Gregorys-Blog" alt="Introducing Galaxie Blog"&gt;Introducing Galaxie Blog&lt;/a&gt; for an example of a &lt;b&gt;parallax effect&lt;/b&gt;. <char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>My requirements to load GSAP and SrollMagic are:&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Load the tweenMax javascript library&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Load scrollMagic&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Load the main GSAP library&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Load the scrollToPlugin library&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;And load my GSAP debugging script&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;All&lt;/b&gt; of the GSAP resources will be deferred until page load.<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Here is the code:<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs" src="/blog/common/libs/greenSock/src/uncompressed/TweenMax.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="deferjs" src="/blog/common/libs/scrollMagic/scrollmagic/uncompressed/ScrollMagic.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs" src="/blog/common/libs/scrollMagic/scrollmagic/uncompressed/plugins/animation.gsap.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs" src="/blog/common/libs/greenSock/src/uncompressed/plugins/ScrollToPlugin.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag  type="deferjs" src="/blog/common/libs/scrollMagic/scrollmagic/uncompressed/plugins/debug.addIndicators.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Note: &lt;i&gt;typically, the GSAP libraries are loaded at the end of the page, however, this did not work for me&lt;/i&gt;. I found that these files must be loaded in the &lt;b&gt;head section&lt;/b&gt;. <char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Lazy loading media files.&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>My open source &lt;b&gt;&lt;a href="www.gregoryalexander.com/blog" alt="Galaxie Blog"&gt;Galaxie Blog&lt;/a&gt;&lt;/b&gt; allows blog owners to &lt;b&gt;upload pictures&lt;/b&gt; and media that show up on the top of every blog post. However, on the main blog page, this necessitates the client to download quite a lot of extra data. In order to achieve a decent page load time I had to figure out a way to delay the loading of this media. I also wanted to convey to the reader that something was happening and alert them with a subtle css effect when a new picture is loaded. Here is the defer.js approach:<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>CSS:<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>/* Lazy loading image classes */<char code='0d'/><char code='0a'/>/* Initially hide the element with zero opacity */<char code='0d'/><char code='0a'/>.fade {<char code='0d'/><char code='0a'/>transition: opacity 500ms ease-in-out;<char code='0d'/><char code='0a'/>opacity: 0;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>/* Show it with the 'shown' class */<char code='0d'/><char code='0a'/>.fade.shown {<char code='0d'/><char code='0a'/>opacity: 1;<char code='0d'/><char code='0a'/>background: 0 0;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Javascript:<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Lazy loading images and media.<char code='0d'/><char code='0a'/>// Callback function to add the 'shown' class into the element when it is loaded<char code='0d'/><char code='0a'/>var media_loaded = function (media) {<char code='0d'/><char code='0a'/>media.className += ' shown';<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>// Then call the deferimg and deferiframe methods<char code='0d'/><char code='0a'/>deferimg('img.fade', 300, 'lazied', media_loaded);<char code='0d'/><char code='0a'/>deferiframe('iframe.fade', 300, 'lazied', media_loaded);<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>Place the script and the CSS anywhere in your document as long as it is above the media that you're about to lazy load.<char code='0d'/><char code='0a'/>Place the following javascript at the end of the page:<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Lazy load the images.<char code='0d'/><char code='0a'/>deferimg('img.fade', 100, 'lazied', function(img) {<char code='0d'/><char code='0a'/>img.onload = function() {<char code='0d'/><char code='0a'/>img.className+=' shown';<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>});<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Finally&lt;/b&gt;, include your image like so:&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;img class="fade" data-src="https://gregoryalexander.com/blog/enclosures/8_31.png" alt=""&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>I'll quickly try to explain what is going on here. If you look carefully, you'll notice that the "&lt;b&gt;src&lt;/b&gt;" tag is missing from the above image. The media does not show at first due to the src tag that is missing, and the opacity setting that is initially set to zero. When the defer.js library notices that the user has scrolled to the viewport where the image resides, defer.js takes the string found in the data-src tag and automatically builds the src dynamically. When the image is loaded to the client, the CSS briefly fades in.<char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>You can use the same approach to defer and lazy load pretty much anything. If you're interested, you can dig into the meaty details by looking at my source code, or checking out the excellent &lt;a href="https://appseeds.net/defer.js/demo.html" alt="defer.js"&gt;defer.js demo&lt;/a&gt;.&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I am finally done chasing a nearly perfect Google lighthouse score and have released Galaxie Blog version 1.35. I have a perfect score for 3 out of 4 categories, and the performance score generally falls between 70 and 90. Performance: 90% Accessibility: 100% Best Practices: 100%  and SEO (Search Engine Optimization): 100%. Attaining this score was not easy- especially for a large blog site. This is major accomplishment.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/9/13/Google-Lighthouse-Metrics-for-Galaxie-Blog-Version-135"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/9/13/Google-Lighthouse-Metrics-for-Galaxie-Blog-Version-135",<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog has a perfect Google lighthouse score for 3 out of 4 categories",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/9_13.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/9_13.png",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/9_13.png"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I am finally done chasing a nearly perfect Google lighthouse score and have released Galaxie Blog version 1.35. I have a perfect score for 3 out of 4 categories, and the performance score generally falls between 70 and 90. Performance: 90% Accessibility: 100% Best Practices: 100%  and SEO (Search Engine Optimization): 100%. Attaining this score was not easy- especially for a large blog site. This is major accomplishment.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-09-13",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;br/&gt;I am finally done chasing a nearly perfect Google lighthouse score and have released Galaxie Blog version 1.35. I have a perfect score for 3 out of 4 categories, and the performance score generally falls between 70 and 90.<char code='0d'/><char code='0a'/>&lt;b&gt;Performance: 90%&lt;/b&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;b&gt;Accessibility: 100% Best Practices: 100%&lt;/b&gt;&lt;sup&gt;2&lt;/sup&gt; and &lt;b&gt;SEO (Search Engine Optimization): 100%&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Attaining this score was &lt;b&gt;not easy&lt;/b&gt;- especially for a large blog site. This is major accomplishment. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I spent over a month working on all aspects of the site. The google audit checklist is exhaustive. For example, I am deferring all non essential resources until page load, lazy loading the images and media, using next generation image formats (webp)&lt;sup&gt;3&lt;/sup&gt; and networking protocols (http/2) if possible, have no errors written to the console, etc, etc.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I will write up several blog entries in the next couple of weeks to highlight some of my approaches.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;sup&gt;1&lt;/sup&gt; Performance results can vary considerably.&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;sup&gt;2&lt;/sup&gt; Attained with the commercial Kendo license. The open source Kendo Best Practices score is at 86 due to the Kendo embedded jQuery library. According to Telerik, this should be fixed in the near future.&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;sup&gt;3&lt;/sup&gt; Webp images are only served when both the client and the server supports them. When webp is not supported, Galaxie Blog will fallback to traditional image protocols. I will write up an article on this in the near future.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;titleMetaTag:Galaxie Blog is a next generation blog platform and is the most beautiful and functional open sourced ColdFusion blog in the world.&gt;&lt;/titleMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog is a next generation blog platform and is the most beautiful and functional open sourced ColdFusion blog in the world. Galaxie Blog is fast, and compliant. It has attained 100% Google lighthouse scores for 3 out of 4 categories.&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/galaxie.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/galaxie.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/9/16/Galaxie-Blog-135-Animated-Blurb"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog is the most beautiful and functional ColdFusion blog in the world",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/galaxie.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/galaxie.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/galaxie.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Galaxie Blog is a next generation blog platform and is the most beautiful and functional open sourced ColdFusion blog in the world. Galaxie Blog is fast, and compliant. It has attained 100% Google lighthouse scores for 3 out of 4 categories.",<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/9/16/Galaxie-Blog-135-Animated-Blurb",<char code='0d'/><char code='0a'/>  "datePublished": "2019-9-16",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/>&lt;cfincludeTemplate:/blog/includes/postContent/parallax/galaxieScript.cfm&gt;&lt;/cfincludeTemplate&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:The next generation webp format is one of the most important image formats to have come along in the last several years. I only started playing around with webp to chase a better Google lighthouse score. Google knocked my 'Best Practices' score down a couple of notches, and I finally decided to investigate using them. I'm glad that I did! I did not find a 26% improvement with my own images, but a 95% improvement in size than the identical .png images that I had created. Want proof? I'll demonstrate my own results...&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/9/17/Demonstrating-the-benefits-of-the-new-webp-image-format"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/9/17/Demonstrating-the-benefits-of-the-new-webp-image-format",<char code='0d'/><char code='0a'/>  "headline": "Demonstrating the benefits of the webp image format",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/futureGirl.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/futureGirl.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/futureGirl.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "The next generation webp format is one of the most important image formats to have come along in the last several years. I only started playing around with webp to chase a better Google lighthouse score. Google knocked my 'Best Practices' score down a couple of notches, and I finally decided to investigate using them. I'm glad that I did! I did not find a 26% improvement with my own images, but a 95% improvement in size than the identical .png images that I had created. Want proof? I'll demonstrate my own results...",<char code='0d'/><char code='0a'/>  "datePublished": "2019-9-17",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-08"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;The next generation webp format is one of the most important image formats to have come along in the last several years.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;My first impression of webp images was 'meh'. I read articles on the next generation webp image format. The articles claim that webp images are about 26% smaller than their png equivalents. What I read was impressive, but not just enough to delve into learning how to use them.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;I only started playing around with webp to chase a better Google lighthouse score. Google knocked my 'Best Practices' score down a couple of notches, and I finally decided to investigate using them. I'm glad that I did! I did not find a 26% improvement with my own images, but a &lt;b&gt;95%&lt;/b&gt; improvement in size than the identical .png images that I had created. &lt;b&gt;Want proof?&lt;/b&gt; I'll demonstrate my own results...&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Please take a look at my Greensock animation introducing the next version of Galaxie Blog at &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/9/16/Galaxie-Blog-135-Animated-Blurb" aria-label="Introduding Galaxie Blog Version 1.35"&gt;https://gregoryalexander.com/blog/index.cfm/2019/9/16/Galaxie-Blog-135-Animated-Blurb&lt;/a&gt;. If you're using a modern browser, you should notice that this intense graphical scene renders rather quickly. On a vain note- I also hope that you find the scollmagic scene to be pretty...&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The scrollmagic scene that you are looking at should deliver images in the webp format if your browser supports them. If the browser does not support webp, png's will be rendered instead. I'll go over the code later on, but right now I will compare the image sizes to show you the improvements. I'll provide the link and size of each actual image in the grid below so you can take a look yourself.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;I created the original source images using Adobe Illustrator, and exported them to png's using the 'save as legacy web' option. To create the web images, I took the png images that I had created and used Irfanview to export the png as a webp. Take a look at the size reduction in the table below.&lt;/p.&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="deferjs"&gt;<char code='0d'/><char code='0a'/>var scenes = [{<char code='0d'/><char code='0a'/>    sceneId: 1,<char code='0d'/><char code='0a'/>    description: "Blue Spiral Galaxy",<char code='0d'/><char code='0a'/>    pngImage: "spiralBlueGalaxy980.png",<char code='0d'/><char code='0a'/>    pngImageSize: "2,206",<char code='0d'/><char code='0a'/>    webpImage: "spiralBlueGalaxy980.webp",<char code='0d'/><char code='0a'/>    webpImageSize: "65 KB",<char code='0d'/><char code='0a'/>    notes: "65 KB is around the size of a tiny logo"<char code='0d'/><char code='0a'/>}, {<char code='0d'/><char code='0a'/>    sceneId: 2,<char code='0d'/><char code='0a'/>    description: "Blue Fusion",<char code='0d'/><char code='0a'/>    pngImage: "blueFusion980.png",<char code='0d'/><char code='0a'/>    pngImageSize: "1,218",<char code='0d'/><char code='0a'/>    webpImage: "blueFusion980.webp",<char code='0d'/><char code='0a'/>    webpImageSize: "26 KB",<char code='0d'/><char code='0a'/>    notes: "yes- you're reading that right, twenty six KB!"<char code='0d'/><char code='0a'/>}, {<char code='0d'/><char code='0a'/>    sceneId: 3,<char code='0d'/><char code='0a'/>    description: "Blue Gears",<char code='0d'/><char code='0a'/>    pngImage: "blueGears980.png",<char code='0d'/><char code='0a'/>    pngImageSize: "1,634",<char code='0d'/><char code='0a'/>    webpImage: "blueGears980.webp",<char code='0d'/><char code='0a'/>    webpImageSize: "54 KB",<char code='0d'/><char code='0a'/>    notes: "This thing is begging to be animated."<char code='0d'/><char code='0a'/>}, {<char code='0d'/><char code='0a'/>    sceneId: 4,<char code='0d'/><char code='0a'/>    description: "Abstract Spiral",<char code='0d'/><char code='0a'/>    pngImage: "blueSpiral80.png",<char code='0d'/><char code='0a'/>    pngImageSize: "2,626",<char code='0d'/><char code='0a'/>    webpImage: "blueSpiral980.webp",<char code='0d'/><char code='0a'/>    webpImageSize: "75 KB",<char code='0d'/><char code='0a'/>    notes: ""<char code='0d'/><char code='0a'/>}, {<char code='0d'/><char code='0a'/>    sceneId: 5,<char code='0d'/><char code='0a'/>    description: "Abstract Texture",<char code='0d'/><char code='0a'/>    pngImage: "abstractWaves980.png",<char code='0d'/><char code='0a'/>    pngImageSize: "446 KB",<char code='0d'/><char code='0a'/>    webpImage: "abstractWaves980.webp",<char code='0d'/><char code='0a'/>    webpImageSize: "57 KB",<char code='0d'/><char code='0a'/>    notes: ""<char code='0d'/><char code='0a'/>}];<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;div id="imageComparisons"&gt;&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="deferjs"&gt;<char code='0d'/><char code='0a'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$("#imageComparisons").kendoGrid({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>dataSource: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>data: scenes,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>schema: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>model: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>fields: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>sceneId: { type: "number" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>description: { type: "string" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>pngImage: { type: "string" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>pngImageSize: { type: "string" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>webpImage: { type: "string" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>webpImageSize: { type: "string" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>notes: { type: "string" }<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>pageSize: 5<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>scrollable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>resizable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>sortable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>filterable: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>pageable: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>columns: [<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>{ field: "sceneId", title: "#", width: "5%" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>{ field: "pngImage", title: ".Png", width: "28%", template: "&lt;a href='/blog/images/parallax/galaxie/background/#= pngImage #' aria-label='#= pngImage #' class='name-link'&gt;#= pngImage #&lt;/a&gt;"},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>{ field: "pngImageSize", title: "Size", width: "20%"},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>{ field: "webpImage", title: ".Webp",  width: "28%", template: "&lt;a href='/blog/images/parallax/galaxie/background/#= webpImage#' aria-label='#= webpImage#' class='name-link'&gt;#= webpImage#&lt;/a&gt;" },<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>{ field: "webpImageSize", title: "Size", width: "20%" }<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>]<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The entire payload of all of the combined webp images is 90% less than one of the actual png images! With this type of extreme size reduction we can vastly improve our loading time, or we can now use full quality images in animated sequences like this!&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I am also using webp instead of jpg images. Here the improvements are not as as substantial, but I have shaved about 10-15% of the size of the jpg images.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;How to get started with webp images.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Server side code&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Currently, with the exception of Safari- most modern HTML5 capable browsers support webp images. To determine if a browser supports the next generation format is relatively easy. Thankfully, nearly all modern browsers will include webp support in the header if the browser supports the webp next gen image. Here is the ColdFusion script that I developed.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Determine if the http accept header contains webp. The getHttpRequestData().headers is a structure and we are targetting the accept element in the array. Note: nearly all modern browsers will include this if the browser supports the webp next gen image. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset acceptHeader = getHttpRequestData().headers["accept"]&gt;<char code='0d'/><char code='0a'/>&lt;!--- Does the header accept webp? ---&gt;<char code='0d'/><char code='0a'/>&lt;cfif findNoCase("webp", acceptHeader) gt 0&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset clientAcceptsWebP = true&gt;<char code='0d'/><char code='0a'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset clientAcceptsWebP = false&gt;<char code='0d'/><char code='0a'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;A hybrid server side and client side approach&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Most web servers support the webp image format as well. However, on web servers that are not current, you may need to add the webp mime type. Consult with your ISP or server documentation to find out how to add webp mime type on your server. Here is the function that I developed to test webp support on the server and save the result as a persistent application variable. You will have to create a small webp image and upload to your own server for this to work (see headerBodyDivider.webp below).&lt;/p<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Determine if the webP mime type is set up on the server. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cffunction name="serverSupportsWebP" access="public" returntype="boolean" output="yes"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Note: we need to eliminate https from the root URL if it exists. I ran into errors trying this with https (a cryptic certificate error). ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset thisUrl = replaceNoCase(application.rootUrl, "https", "http")&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- The headerBodyDivider image is a tiny .webp image (around 1k). We are going to read this, and if it was found and the mime type is correct, we will assumed that the mime type is correct. Otherwise, we will determine that the server does not support the webp mime type. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfhttp method="get" URL="#thisUrl#/images/divider/headerBodyDivider.webp"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Was the webp image found? ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif cfhttp.mimeType contains 'webp'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset webp = true&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset webp = false&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Return it. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfreturn webp&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cffunction&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In my code, I either use the server side logic above to test both the server and the client for webp support, or I use a hybrid approach where I save the result of the serverSupportsWebP server side function and test for support using javascript on the client like so:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// WebP support detection. Revised a script found on stack overflow: https://stackoverflow.com/questions/5573096/detecting-webp-support. It is the quickest loading script to determine webP that I have found so far.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>function webPImageSupport() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Detemine if the webp mime type is on the server. This is saved as a ColdFusion application variable.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>var serverSupportsWebP = &lt;cfoutput&gt;#application.serverSupportsWebP#&lt;/cfoutput&gt;;<char code='0d'/><char code='0a'/>    <char code='09'/><char code='09'/>var elem = document.createElement('canvas');<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>    <char code='09'/><char code='09'/>if (serverSupportsWebP &amp;&amp; !!(elem.getContext &amp;&amp; elem.getContext('2d'))) {<char code='0d'/><char code='0a'/>        <char code='09'/><char code='09'/>// Is able to get WebP representation?<char code='0d'/><char code='0a'/>        <char code='09'/><char code='09'/>return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;<char code='0d'/><char code='0a'/>    <char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/>    <char code='09'/><char code='09'/>// webp is not supported on older browsers such as IE.<char code='0d'/><char code='0a'/>    <char code='09'/><char code='09'/>return false;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Using either approach is valid. However, I typically use server side code to set the paths of my images, and only use the hybrid approach (using the script above) when I am manipulating the DOM with javascript.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Example server side logic to set the image extension&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I personally set the default image to be png or jpg, and only change it if both the client and the server support webp:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Determine if the http accept header contains webp. The getHttpRequestData().headers is a structure and we are targetting the accept element in the array. Note: nearly all modern browsers will include this if the browser supports the webp next gen image. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset acceptHeader = getHttpRequestData().headers["accept"]&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Does the header accept webp? ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif findNoCase("webp", acceptHeader) gt 0&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset clientAcceptsWebP = true&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset clientAcceptsWebP = false&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Logic to determine if the server has the necessary webp mime type was done in the application.cfc template. We will use the application.serverSupportsWebP variable that the mime type is installed on the server. Of course, both the client and the server need to support webp images before we can deliver them.---&gt; <char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif application.serverSupportsWebP and clientAcceptsWebP&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset webpImageSupported = true&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset webpImageSupported = false&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif webpImageSupported&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Overwrite the headerBodyDividerImage var and change the extension to .webp ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset headerBodyDividerImage = replaceNoCase(headerBodyDividerImage, '.png', '.webp')&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Tips&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;When saving webp images, don't use the Adobe Photoshop or Illustrator plugin's. There are two of them as of today, and neither of them work well. Instead, just create your images and save them as jpg or png, and use Irfanview 64 to open and save them as a webp image. I have tried many approaches, and this method has proven to be the most reliable.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Gregory&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I released the next version of Galaxie Blog that allows the Blog owner to integrate Disqus. Disqus is one of the most popular blog commenting systems, and it allows for social media integration, user profiles, and sophisticated spam and moderation tools. Galaxie Blog allows you to incorporate Disqus either using a simple Disqus Blog identifier, or using both an identifier and a Disqus API Key.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/5/Disqus-has-been-incorporated-into-Galaxie-Blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/10/5/Disqus-has-been-incorporated-into-Galaxie-Blog",<char code='0d'/><char code='0a'/>  "headline": "Incorporate Disqus into Galaxie Blog.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment151.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment151.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment151.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Use your Disqus Blog Identifier and your optional API key to incorporate Disqus into your own Galaxie Blog.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-06",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I released the next version of Galaxie Blog that allows the Blog owner to integrate Disqus. Disqus is one of the most popular blog commenting systems, and it allows for social media integration, user profiles, and sophisticated spam and moderation tools. Galaxie Blog allows you to incorporate Disqus either using a simple &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1"&gt;&lt;b&gt;Disqus Blog identifier&lt;/b&gt;&lt;/a&gt;, or using both an identifier and a &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/6/Obtaining-a-Disqus-API-Key--Disqus--part-2"&gt;&lt;b&gt;Disqus API Key&lt;/b&gt;&lt;/a&gt;. Both of Disqus keys are easily obtained, and both are free. Here are the settings in Galaxie Blog that will allow you to easily incorporate Disqus into your own Galaxie Blog:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Determine whether to include the disqus commenting system. If you set this to true, you must also set the optional disqus settings that are right below.  ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.includeDisqus = true&gt;&lt;!--- true or false. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.disqusBlogIdentifier = "YourFreeDisqusBlogIdentifier"&gt;&lt;!--- Required if you're using Disqus.  ---&gt; <char code='0d'/><char code='0a'/>&lt;cfset application.disqusApiKey = "YourFreeDisqusAPIKey"&gt;&lt;!--- Optional ---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The API key requires the user to sign into a Disqus site for developers, but having one allows Galaxie Blog to display the recent comments that blend into the Galaxie Blog's themes. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Disqus is optional though. You can still use the default Galaxie Blog commenting system that has moderation tools, spam control with captcha, etc. However, the default Galaxie Blog commenting system does not allow for social media sign-on. In the future, I hope to develop a robust commenting system that matches the core functionality with Disqus, but this will take time. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I will write several technical entries in the next couple of weeks in order to share my approach.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In this series of Disqus articles, you will learn how to incorporate Disqus into your own site, or incorporate it into Galaxie Blog. I will also show you how to use multiple Disqus comments on one page, how to get the comment count, and walk you through the steps to build your own recent comments widget.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1",<char code='0d'/><char code='0a'/>  "headline": "Incorporate Disqus into your own blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment141.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment141.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment141.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In this series of Disqus articles, you will learn how to incorporate Disqus into your own site, or incorporate it into Galaxie Blog. I will also show you how to use multiple Disqus comments on one page, how to get the comment count, and walk you through the steps to build your own recent comments widget.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-05",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-08"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In this series of Disqus articles, you will learn how to incorporate Disqus into your own site, or incorporate it into Galaxie Blog. Galaxie Blog requires two keys- the Disqus Blog Identifier (or Short Name), and optionally, a Disqus API Key. I will try to write this for Galaxie Blog users of course, but also for others who may want to follow along the same footsteps to incorporate Disqus into their own blog. I will walk you through the steps to register with Disqus, and share my approach and code that I used here. I will also show you how to use multiple Disqus comments on one page, how to get the comment count, and walk you through the steps to build your own recent comments widget. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>To incorporate the Disqus comment system into your own blog, you first need to create a Disqus account to obtain your Disqus Blog Identifier, otherwise known as your blog's &lt;b&gt;short name&lt;/b&gt;.  You should also create a free developer account in order to acquire a Disqus API key. I will briefly walk you through the required steps to obtain both keys. If you already have a Disqus blog identifier and API key, you should skip this article and read &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/6/Incorporate-Disqus-into-Galaxy-Blog--Part-3"&gt;part 3&lt;/a&gt;. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Register your site and obtain your Disqus Blog Identifier&lt;/b&gt;&lt;br&gt;<char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;First, sign up for a free Disqus account at &lt;a href="www.disqus.com" aria-label="Sign up for a Disqus account"&gt;www.disqus.com&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Click on the get started button&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Enter your name,  email, and create a password. You will need to verify your email with Disqus before you continue.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Once you're done creating your profile, click on &lt;b&gt;I want to install Disqus on my site&lt;/b&gt;.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/disqusGetStarted1.png" data-fancybox-group="GettingStarted" title="Get Started"&gt;&lt;img data-src="/blog/doc/disqus/disqusGetStarted1Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/nameEmailPassword2.png" data-fancybox-group="GettingStarted" title="Create Profile"&gt;&lt;img data-src="/blog/doc/disqus/nameEmailPassword2Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/commentOnSites3.png" data-fancybox-group="GettingStarted" title="Install Disqus on my site"&gt;&lt;img data-src="/blog/doc/disqus/commentOnSites3Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="5"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Register your site by including the name of your site, and choose an appropriate category.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Prior to clicking on the &lt;b&gt;Create Site&lt;/b&gt; button, you'll notice the short name of your site. I highlighted the short name with a circle. If you didn't notice this before registering, don't worry- you will be able to look it up later.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Click on &lt;b&gt;Create site&lt;/b&gt;.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="8"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;For a personal blog, I recommend selecting the &lt;b&gt;Basic&lt;/b&gt; plan. The basic plan does have a Disqus label at the bottom of the comments interface, but it is free. You're welcome to choose a paid plan if you want, but it is not necessary.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;You don't need to do anything on the &lt;b&gt;Select Platform&lt;/b&gt; interface. I have integrated Disqus into Galaxie Blog. We need to move on to the configuration settings. &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;In the configuration settings, enter in the &lt;b&gt;website name&lt;/b&gt;, &lt;b&gt;url&lt;/b&gt;, &lt;b&gt;category&lt;/b&gt; and &lt;b&gt;description&lt;/b&gt;. You don't need to enter pages for your own policies right now, you can come back to this later.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Click on &lt;b&gt;Complete setup&lt;/b&gt; button&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/createSite4.png" data-fancybox-group="registerSite" title="Create Site"&gt;&lt;img data-src="/blog/doc/disqus/createSite4Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/basicSite5.png" data-fancybox-group="registerSite" title="Choose Basic Site"&gt;&lt;img data-src="/blog/doc/disqus/basicSite5Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/configure6.png" data-fancybox-group="registerSite" title="Configure Site"&gt;&lt;img data-src="/blog/doc/disqus/configure6Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="13"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;On the next &lt;b&gt;Setup Complete&lt;/b&gt; page, scroll to the bottom of the page and click on the &lt;b&gt;Configure your sites community settings&lt;/b&gt; link.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Take note of your blogs &lt;b&gt;Short Name&lt;/b&gt; in the 2nd setting. Copy this string. You will need it later to paste into Galaxie Blogs disqusBlogIdentifier setting.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Make sure that the color scheme is set to &lt;b&gt;automatic&lt;/b&gt;. This is needed to have Disqus adjust the comment interface with Galaxie Blog's multiple themes.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Click on &lt;b&gt;Save&lt;/b&gt; button&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/setupComplete7.png" data-fancybox-group="completeSetup" title="Setup Complete"&gt;&lt;img data-src="/blog/doc/disqus/setupComplete7Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/shortName8.png" data-fancybox-group="completeSetup" title="Your Disqus Blog Identifier, or Short Name"&gt;&lt;img data-src="/blog/doc/disqus/shortName8.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/autoColorScheme9.png" data-fancybox-group="completeSetup" title="Choose Automatic Color Scheme"&gt;&lt;img data-src="/blog/doc/disqus/autoColorScheme9Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>That's it, your set! In part two, we'll go over the steps needed to get your own Disqus API key.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:How to incorporate Disqus in Galaxie Blog - part 2. Obtaining a Disqus API Key&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/6/Obtaining-a-Disqus-API-Key--Disqus--part-2"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/10/6/Obtaining-a-Disqus-API-Key--Disqus--part-2",<char code='0d'/><char code='0a'/>  "headline": "How to incorporate Disqus in Galaxie Blog - part 2. Obtaining a Disqus API Key",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment13.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment13.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment13.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "How to incorporate Disqus in Galaxie Blog - part 2. Obtaining a Disqus API Key",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-06",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>After you register your Disqus account, you should also consider signing up for a free Disqus API Key. A Disqus API Key allows you to build your own widgets, such as a recent comments interface. For Galaxie Blog owners, the optional API Key allows Galaxie Blog to display my own custom recent comments interface that blends in with the Galaxie Blog themes. It also allows Galaxie Blog to have an accurate comment count in the administrative interface. The API key is free, and the free version generously allows for 10,000 calls per hour at the time of writing. The limit is sufficient on immensely popular blogs, such as &lt;a href="https://www.raymondcamden.com/2016/08/18/working-with-the-disqus-api-comment-count"&gt;Raymond Camdens blog&lt;/a&gt;.  The free API key should suffice.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Don't look for the API key after registering your site with Disqus. It is not available using the default &lt;a href="www.disqus.com"&gt;Disqus&lt;/a&gt; interface. You will have to go to the &lt;a href="https://disqus.com/api/applications/"&gt;Disqus API&lt;/a&gt; page.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Navigate to &lt;a href="https://disqus.com/api/applications/"&gt;https://disqus.com/api/applications/&lt;/a&gt; and click on &lt;b&gt;Applications&lt;/b&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Enter  your site information and register your application&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;On the next page, leave the default settings as they are. You don't need to add or change anything, just click &lt;b&gt;Save changes&lt;/b&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/disqusApi1.png" data-fancybox-group="RegisterApi" title="Navigate to https://disqus.com/api/applications/"&gt;&lt;img data-src="/blog/doc/disqus/api/disqusApi1Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/registerApp2.png" data-fancybox-group="RegisterApi" title="Register Site"&gt;&lt;img data-src="/blog/doc/disqus/api/registerApp2Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/settings3.png" data-fancybox-group="RegisterApi" title="Site Settings"&gt;&lt;img data-src="/blog/doc/disqus/api/settings3Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="5"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The next screen is a little confusing. At the time of the writing, it seems as you have just refreshed the page. Here, just click on the &lt;b&gt;Details&lt;/b&gt; link at the top of the page. I am attaching a screen shot.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Your new Disqus API Key is found underneath the OAuth settings on the Details screen.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;If you are here just to obtain your Disqus Blog Identifier (aka short name) and API key for Galaxie Blog, continue to the next page. If you're a developer looking into incorporating Disqus into your own site, you may want to take a look at the &lt;a href="https://github.com/disqus/DISQUS-API-Recipes&gt;Common API Recipes&lt;/a&gt; or &lt;a href="https://help.disqus.com/en/articles/1717167-libraries"&gt;Common Libraries&lt;/a&gt; page. &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/details4.png" data-fancybox-group="RegisterApi" title="Enter Site Detail"&gt;&lt;img data-src="/blog/doc/disqus/api/details4Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/APIKey5.png" data-fancybox-group="RegisterApi" title="Your Disqus API Key"&gt;&lt;img data-src="/blog/doc/disqus/api/APIKey5Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/doc/disqus/api/apiRecipes6.png" data-fancybox-group="RegisterApi" title="API Recipes"&gt;&lt;img data-src="/blog/doc/disqus/api/apiRecipes6Thumb.png" alt="" class="fade thumbnail" /&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Next up... how to use the Disqus Blog Identifier and API Key to incorporate Disqus in Galaxie Blog.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Use your Disqus Blog Identifier and your optional API key to incorporate Disqus into your own Galaxie Blog.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/6/Incorporate-Disqus-into-Galaxy-Blog--Part-3"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/10/6/Incorporate-Disqus-into-Galaxy-Blog--Part-3",<char code='0d'/><char code='0a'/>  "headline": "How to incorporate Disqus in Galaxie Blog - part 3.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment12.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment12.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment12.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Use your Disqus Blog Identifier and your optional API key to incorporate Disqus into your own Galaxie Blog.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-06",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;b&gt;Use your Disqus Blog Identifier and your optional API key to incorporate Disqus into your own Galaxie Blog. &lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;<char code='0d'/><char code='0a'/>Once you have your own &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1"&gt;&lt;b&gt;Disqus Blog Identifier&lt;/b&gt;&lt;/a&gt;, you can immediately incorporate Disqus using Galaxie Blog. In the current version of Galaxie Blog (version 1.45 or above), open the index.cfm template found in the root directory. Search for the 'application.includeDisqus' string using your IDE, and set the includeDisqus variable to true. It should be around line 26, a code example is provided below:<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Determine whether to include the disqus commenting system. If you set this to true, you must also set the optional disqus settings that are right below.  ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.includeDisqus = true&gt;&lt;!--- true or false. ---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="2"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Now, search for "application.disqusBlogIdentifier". It should be down a few lines. Copy and paste your Disqus Blog Identifier, also known as the Disqus Short Name, into the disqusBlogIdentifier variable.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Next, if you have a &lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1"&gt;&lt;b&gt;Disqus API Key&lt;/b&gt;&lt;/a&gt;, copy and paste that into the application.disqusApiKey variable. For now, the other Disqus settings below should be left alone.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;In an upcoming version, I'll add Disqus integration to the administrative interface.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.disqusBlogIdentifier = "YourFreeDisqusBlogIdentifier"&gt;&lt;!--- Required if you're using Disqus.  ---&gt; <char code='0d'/><char code='0a'/>&lt;cfset application.disqusApiKey = "YourFreeDisqusAPIKey"&gt;&lt;!--- Optional ---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>That's it! Upload the file, and your Disqus commenting system should be in place. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Happy Blogging!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Gregory</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:While incorporating comments into my main blog page, I found out that Disqus does not provide a native way to place multiple comments on a single page. After research, I figured out way. I'll share my approach and give the reader other resources  so they can do the same.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/7/Adding-multiple-Disqus-comments-on-one-page"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>   "url" : "https://gregoryalexander.com/blog/2019/10/7/Adding-multiple-Disqus-comments-on-one-page",<char code='0d'/><char code='0a'/>  "headline": "Adding multiple Disqus comments on one page",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment11.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "While incorporating comments into my main blog page, I found out that Disqus does not provide a native way to place multiple comments on a single page. After research, I figured out way. I'll share my approach and give the reader other resources  so they can do the same.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-07",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While incorporating comments into my main blog page, I found out that Disqus does not provide a native way to place multiple comments on a single page. The Disqus commenting system includes an embedded javascript at the end of an article. The javascript writes out the commenting interface using global variables and it can't be included twice. This poses a problem as my main blog page contains all of my blog posts, and I wanted the readers to be able to comment without having to go to each individual entry page. After research, I figured out way. I'll share my approach and give the reader other resources  so they can do the same. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Background&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While researching, I found a promising lead... Most of the folks that have skinned this cat referred to an &lt;a href="https://stackoverflow.com/questions/4963505/several-disqus-threads-on-one-page"&gt;article written by mystrdat&lt;/a&gt; that is now long since dead. I dug it up using the wayback machine at &lt;a href="https://web.archive.org/web/20170606070513/http://mystrd.at/articles/multiple-disqus-threads-on-one-page/" rel="noopener noreferrer" target="_blank"&gt;https://web.archive.org/web/20170606070513/http://mystrd.at/articles/multiple-disqus-threads-on-one-page/&lt;/a&gt;. It is an excellent article, and if you're trying to do the same thing, it is worth a read. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There were other helpful resources that I found. &lt;a href="http://hyspace.moe/2014/03/03/multiple-disqus-threads-on-one-page.html" rel="noopener noreferrer" target="_blank"&gt;Shawn Zhou&lt;/a&gt; provides a list of articles that solved this issue. Shawn uses iframes to encapsulate the Disqus comments. Tsachi Shlidor shared his approach using inline comments. His demonstration and code is on github at &lt;a href="http://tsi.github.io/inlineDisqussions/" rel="noopener noreferrer" target="_blank"&gt;http://tsi.github.io/inlineDisqussions/&lt;/a&gt;. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Since I already built my own commenting system using the open sourced &lt;a href="https://www.telerik.com/kendo-ui/open-source-core" rel="noopener noreferrer" target="_blank"&gt;Kendo Core UI&lt;/a&gt; window widgets, I chose a different approach. I am encapsulating Disqus logic into various Kendo windows. You can use the same approach that I used with a different windowing library, such as jQuery UI. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/> &lt;b&gt;Using multiple Disqus comments using a Kendo window widget&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;First&lt;/b&gt;, I took the Disqus &lt;b&gt;universalcode&lt;/b&gt; script and saved it as a new ColdFusion template. Note that the &lt;b&gt;this.page.url&lt;/b&gt; and &lt;b&gt;this.page.identifier&lt;/b&gt; are dynamic variables. These will be passed to the window via the URL.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Note: the disqus_shortname, URL and identifier are passed to this page via the URL. ---&gt;<char code='0d'/><char code='0a'/>&lt;div id="disqus_thread"&gt;&lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="text/javascript"&gt;<char code='0d'/><char code='0a'/><char code='09'/>/**<char code='0d'/><char code='0a'/><char code='09'/>*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.<char code='0d'/><char code='0a'/><char code='09'/>*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#chr(35)#configuration-variables*/<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>var disqus_config = function () {<char code='0d'/><char code='0a'/><char code='09'/>var disqus_shortname = '&lt;cfoutput&gt;#URL.alias#&lt;/cfoutput&gt;';<char code='0d'/><char code='0a'/><char code='09'/>this.page.url = '&lt;cfoutput&gt;#URL.url#&lt;/cfoutput&gt;';  // Replace PAGE_URL with your page's canonical URL variable<char code='0d'/><char code='0a'/><char code='09'/>this.page.identifier = '&lt;cfoutput&gt;#URL.Id#&lt;/cfoutput&gt;'; // Replace PAGE_IDENTIFIER with your page's unique identifier variable<char code='0d'/><char code='0a'/><char code='09'/>};<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>(function() { // DON'T EDIT BELOW THIS LINE */<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var d = document, s = d.createElement('script');<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>s.src = 'https://gregorys-blog.disqus.com/embed.js';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>s.setAttribute('data-timestamp', +new Date());<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>(d.head || d.body).appendChild(s);<char code='0d'/><char code='0a'/><char code='09'/>})();<char code='0d'/><char code='0a'/>&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="2"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;Second&lt;/b&gt;, I created the scripts to create a new Kendo window. The only thing of interest in the code below is that I am passing the URL and Identifier variables that the universal code script needs (this.page.url and this.page.identifier in the code above):&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>// Disqus comment window ---------------------------------------------------------------------------------------------------------------------------------<char code='0d'/><char code='0a'/>function createDisqusWindow(Id, alias, url) {<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Remove the window if it already exists<char code='0d'/><char code='0a'/><char code='09'/>if ($("#disqusWindow").length &gt; 0) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$("#disqusWindow").parent().remove();<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Typically we would use a div outside of the script to attach the window to, however, since this is inside of a function call, we are going to dynamically create a div via the append js method. If we were to use a div outside of this script, lets say underneath the 'mainBlog' container, it would cause weird problems, such as the page disappearing behind the window.<char code='0d'/><char code='0a'/><char code='09'/>$(document.body).append('&lt;div id="disqusWindow"&gt;&lt;/div&gt;');<char code='0d'/><char code='0a'/><char code='09'/>$('#disqusWindow').kendoWindow({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>title: "Comments",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>actions: ["Minimize", "Refresh", "Close"],<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>modal: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>resizable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>draggable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// For desktop, we are subtracting 5% off of the content width setting found near the top of this template.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>width: (getContentWidthPercentAsInt()-5 + '%'),<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>height: "60%",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>iframe: false, // Don't use iframes unless it is content derived outside of your own site. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>content: "/blog/disqus.cfm?id=" + Id + '&amp;alias=' + alias + '&amp;url=' + url,// Make sure to create an absolute path here. I had problems with a cached index.cfm page being inserted into the Kendo window probably due to the blogCfc caching logic. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>close: function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>$('#disqusWindow').kendoWindow('destroy');<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>}).data('kendoWindow').center();<char code='0d'/><char code='0a'/>}//..function createDisqusWindow(Id, alias, url) {<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// The mobile app has a dedicated button to close the window as the x at the top of the window is small and hard to see <char code='0d'/><char code='0a'/>function closeDisqusWindow(){<char code='0d'/><char code='0a'/><char code='09'/>$("#disqusWindow").kendoWindow();<char code='0d'/><char code='0a'/><char code='09'/>var disqusWindow = $("#disqusWindow").data("kendoWindow");<char code='0d'/><char code='0a'/><char code='09'/>setTimeout(function() {<char code='0d'/><char code='0a'/><char code='09'/>  disqusWindow.destroy();<char code='0d'/><char code='0a'/><char code='09'/>}, 500);<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="3"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;Then&lt;/b&gt;, on the web page itself, I am showing the following button that calls the createDisqusWindow function above. I am adding this button for &lt;ab&gt;every single blog entry&lt;/b&gt; on the page. In the button, I am adding the entry ID as the first argument (the this.page.identifier), the 2nd argument, the entries 'alias' (disqus_shortname), and the entry URL is passed to the &lt;b&gt;this.page.url&lt;/b&gt;. &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;button id="disqusCommentButton" class="k-button" style="width:125px; font-size:0.70em;" onClick="createDisqusWindow('6C04DC8C-FF58-C02F-8C38E2BEEBCA282B', 'Incorporate-Disqus-into-Galaxy-Blog--Part-3', 'https://gregoryalexander.com/blog/index.cfm/2019/10/6/Incorporate-Disqus-into-Galaxy-Blog--Part-3')"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;i class="fas fa-comments" style="alignment-baseline:middle;"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;Comment<char code='0d'/><char code='0a'/>&lt;/button&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="4"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;To display the comment count&lt;/b&gt;, I am placing the disqus-comment-count with the URL of the entry. Note: if you want, you can replace the span tags with an anchor tag ('a href') and include an onClick event to open up the comments window.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;span class="disqus-comment-count" data-disqus-url="https://gregoryalexander.com/blog/index.cfm/2019/10/6/Incorporate-Disqus-into-Galaxy-Blog--Part-3"&gt;&lt;/span&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="5"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;b&gt;Finally&lt;/b&gt;, at the very bottom of the index.cfm page, I am adding the disqus comment count script:&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag id="dsq-count-scr" type="deferjs" src="//gregorys-blog.disqus.com/count.js" async&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>For a demonstration, go to &lt;a href="https://gregoryalexander.com/blog/index.cfm"&gt;https://gregoryalexander.com/blog/index.cfm&lt;/a&gt;, click on a comment link, and make a comment or at least say hi!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Happy coding!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Gregory</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Disqus's commenting system is one of the most popular free blog plugin's in the world right now. It allows blog users to log in using various social media services such as Facebook and Twitter,  and offers a bevy of tools and comment moderation features. Most of the popular open source blogs (now including Galaxie Blog) have optional built in Disqus integration. However, what if you as the developer want to implement Disqus into your own custom software or blog?&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/7/Building-your-own-Disqus-Recent-Comments-Widget"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "How to implement Disqus into your own blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/prettyWomanComment1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/prettyWomanComment1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/prettyWomanComment1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/10/7/Building-your-own-Disqus-Recent-Comments-Widget",<char code='0d'/><char code='0a'/>  "articleBody" : "Disqus's commenting system is one of the most popular free blog plugin's in the world right now. It allows blog users to log in using various social media services such as Facebook and Twitter,  and offers a bevy of tools and comment moderation features. Most of the popular open source blogs (now including Galaxie Blog) have optional built in Disqus integration. However, what if you as the developer want to implement Disqus into your own custom software or blog?",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-07",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Disqus's commenting system is one of the most popular free blog plugin's in the world right now. It allows blog users to log in using various social media services such as Facebook and Twitter,  and offers a bevy of tools and comment moderation features. Most of the popular open source blogs (now including Galaxie Blog) have optional built in Disqus integration. However, what if you as the developer want to implement Disqus into your own custom software or blog? This article will show you a way to use the Disqus API key to build your own custom recent comments Disqus widget. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Do you really need your own custom Disqus Recent Comments Widget?&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>A recent comments widget is a tool that allows blog owners to show the most recent comments on a page. If you're just using Disqus on a static site that does not contain all of the blog entries, you might not need to roll your own custom recent comment widget. And, even if you do have a page that contains all of the blog entries, you may not need a custom widget- Disqus already provides one. To incorporate it, all that you need to do is replace the 'gregorys-blog' string with your own Disqus Blog Identifier (also known as the blog short name) like so:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="text/javascript" src="https://gregorys-blog.disqus.com/recent_comments_widget.js?num_items=10&amp;hide_avatars=0&amp;avatar_size=40&amp;excerpt_length=100"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>This is a basic widget, and it contains nearly everything that you may need. My code falls back to this approach in Galaxie Blog when the blog owner does not paste in his own API Key. However, it is not flexible. It is what you see is what you get, and I wanted to blend the recent comment widget with Galaxie Blogs themes, and needed other things, such as having to use the Disqus API to have my own statistical reporting. I'm a stickler for design- I personally determined from the outset that I need roll my own Disqus recent comments widget, and I'll share my approach...<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Building your own Disqus Recent Comments Widget&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;First, you will need to obtain a Disqus Blog Identifier (aka Blog Short Name) and a Disqus API Key. If you don't already have these keys, the following articles should help you in getting these:<char code='0d'/><char code='0a'/>          &lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>           &lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/5/Incorporate-Disqus-into-Galaxie-Blog--part-1"&gt;Register your site and obtain your Disqus Blog Identifier&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>           &lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/index.cfm/2019/10/6/Obtaining-a-Disqus-API-Key--Disqus--part-2"&gt;Obtaining a Disqus API Key&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The code below is the style sheets that I developed for Galaxie Blogs recent comments. There is nothing interesting to note here but I am sharing to give you a starting point:&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Styles for disqus ---&gt;<char code='0d'/><char code='0a'/>&lt;style&gt;<char code='0d'/><char code='0a'/><char code='09'/>.userProfile {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>margin: 15px 0;<char code='09'/> <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>list-style-type: none;<char code='09'/> <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>clear: both;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>img.disqusAvatar {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>width: 64px;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>height: 64px;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>float: left;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>position: relative;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>z-index: 99;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>border: 0px;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>margin: 0px;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>/* The padding needs to be uniform, otherwise the avatar circle will be elongated */<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>padding: &lt;cfoutput&gt;#avatarPadding#&lt;/cfoutput&gt;;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>-moz-border-radius: 50%;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>-webkit-border-radius: 50%;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>-webkit-box-shadow: 0 1px 2px rgba(0,0,0,0.2);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>-moz-box-shadow: 0 1px 2px rgba(0,0,0,0.2);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>box-shadow: 0 1px 2px rgba(0,0,0,0.2);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>overflow: hidden;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>#disqusCommentDiv a {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>overflow: hidden; /* Prevent wrapping */<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>#disqusCommentDiv p {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>display: inline; /* Prevent wrapping */<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>#disqusCommentPanel a {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>overflow: hidden; /* Prevent wrapping */<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>#disqusCommentPanel p {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>display: inline; /* Prevent wrapping */<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>.comment-avatar img {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>width: 100%;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>height: 100%;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>&lt;/style&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="3"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The real magic happens in the javascript below. I'll try to walk you through some of the more interesting tidbits&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;ol type="a"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;The getRecentDisqusComments function makes a call to the Disqus API invoking the &lt;a href="https://disqus.com/api/docs/categories/listPosts/" target="_blank" rel="noopener noreferrer"&gt;listsPosts&lt;/a&gt; method&lt;/li<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Additionally, the &lt;b&gt;related=thread&lt;/b&gt; argument is appended to the URL string. This argument allows us to get the URL and Title of the post. Without this argument, we would need to make another call the threads list method, which is frankly a nightmare&lt;sup&gt;1&lt;/sup&gt;. &lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;We are passing our Disqus keys in the Ajax post&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;The getDisqusCommentsResponse callback method retrieves the data, and writes out our custom HTML. Here, I am using my own custom class definitions to make the widget blend in with my own themes.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;The isOdd method assists creating alternate the colors of each row.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;The timeSince method is used to append a string to tell the viewer when the comment was made (ie '20 seconds ago').&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Finally, the truncateString method is used to truncate the comment string.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>function getRecentDisqusComments(){<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Submit form via AJAX.<char code='0d'/><char code='0a'/><char code='09'/>$.ajax(<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>{<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>type: "get",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>url: "https://disqus.com/api/3.0/forums/listPosts.json?related=thread",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>data: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Passing my own keys.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>api_key: "&lt;cfoutput&gt;#application.disqusApiKey#&lt;/cfoutput&gt;",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>forum:  "&lt;cfoutput&gt;#application.disqusBlogIdentifier#&lt;/cfoutput&gt;",<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>limit: "&lt;cfoutput&gt;#numComments#&lt;/cfoutput&gt;"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// jsponp is supported as well. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>dataType: "json",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>cache: false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>success: function(data) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Callback function<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>getDisqusCommentsResponse(data);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// The timeout ensures that the data will be available to the callback function.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}, 250);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>);<char code='0d'/><char code='0a'/>}//..function getRecentDisqusComments(){<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>function getDisqusCommentsResponse(data){<char code='0d'/><char code='0a'/><char code='09'/>var html = "";<char code='0d'/><char code='0a'/><char code='09'/>// Loop through the json structure.<char code='0d'/><char code='0a'/><char code='09'/>for (var i = 0, len = data.response.length; i &lt; len; i++) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Isolate our post (or entry).<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var post = data.response[i];<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Set a current row value from our index. I need a whole number to determine the alternating row color. I could just use [i]+1, but I am setting this for readability.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var row = parseInt([i]);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get the data for the post.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var authorName = post.author.name;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var authorProfileUrl = post.author.profileUrl;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var authorAvatarUrl = post.author.avatar.cache;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// We need to strip the HTML out of the comment. It has links that are not useful and will take up our space.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var comment = stripHtml(post.message);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var commentPromoted = post.isHighlighted;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var approved = post.isApproved;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Get the timestamp and convert it into a proper js date object.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var created = new Date(post.createdAt);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Find the link to the actual article. Note: for this to work, you must have related=thread appended to the ajax link (ie https://disqus.com/api/3.0/forums/listPosts.json?related=thread).<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var pageLink = post.thread.link;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>var pageTitle = post.thread.title;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Create the HTML. We will try to keep this nearly identical to the recent comment widget, but put in our own kendo classes here.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Crete the table on the first row.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (row == 0){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;table id="disqusComment" align="center" class="k-content fixedPodTableWithWrap" width="100%" cellpadding="0" cellspacing="0"&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Create the row and alternate the k-content and k-alt class.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (isOdd(row)){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;tr class="k-alt" height="50px;"&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;tr class="k-content" height="50px;"&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// After the first iteration, create a row with a border. Javascript arrays (which is our 'row') start at 0.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (row == 0){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;td align="left" valign="top" class="userProfile"&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;td align="left" valign="top" class="border userProfile"&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Wrap the avatar with the authors profile link<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += '&lt;br/&gt;&lt;a href="' + authorProfileUrl + '" aria-label="Profile for ' + authorName + '" rel="nofollow noopener"&gt;' + authorName;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Place the avatar into the cell and close the anchor link.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += '&lt;img class="disqusAvatar" src="' + authorAvatarUrl + '" aria-label="Profile for ' + authorName + '"&gt;&lt;/a&gt;&lt;br/&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Add the comment. The comment is already wrapped with a paragraph tag.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += truncateString(comment, &lt;cfoutput&gt;#lenComment#&lt;/cfoutput&gt;) + '&lt;br/&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Create the HTML to insert into the page title.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += '&lt;a href="' + pageLink + '" aria-label="' + pageLink + '"&gt;' + pageTitle + '&lt;/a&gt; - ';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Add the timestamp to quickly identify how recent the post is.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += timeSince(new Date(created)) + ' ago&lt;br/&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Close the cell and the row.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>html += '&lt;/td&gt;&lt;/tr&gt;';<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Close the table on the last row<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (row == &lt;cfoutput&gt;#round(numComments-1)#&lt;/cfoutput&gt;){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>html += '&lt;/table&gt;'<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Append the html to the page.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>$("#recentCommentsDiv").html(html);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>$("#recentCommentsPanel").html(html);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>}//..for (var i = 0, len = data.response.length; i &lt; len; i++) {<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Helper function to determine if the number is even or odd. This is used to create alternating row colors.<char code='0d'/><char code='0a'/>function isOdd(num) {<char code='0d'/><char code='0a'/><char code='09'/>return num % 2;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>function stripHtml(html){<char code='0d'/><char code='0a'/><char code='09'/>html.replace(/&lt;[^&gt;]*&gt;?/gm, '');<char code='0d'/><char code='0a'/><char code='09'/>return html;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Function to write out the time since the post.<char code='0d'/><char code='0a'/>// Source: https://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site<char code='09'/><char code='0d'/><char code='0a'/>function timeSince(date) {<char code='0d'/><char code='0a'/>  var seconds = Math.floor((new Date() - date) / 1000);<char code='0d'/><char code='0a'/>  var interval = Math.floor(seconds / 31536000);<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>  if (interval &gt; 1) {<char code='0d'/><char code='0a'/><char code='09'/>return interval + " years";<char code='0d'/><char code='0a'/>  }<char code='0d'/><char code='0a'/>  interval = Math.floor(seconds / 2592000);<char code='0d'/><char code='0a'/>  if (interval &gt; 1) {<char code='0d'/><char code='0a'/><char code='09'/>return interval + " months";<char code='0d'/><char code='0a'/>  }<char code='0d'/><char code='0a'/>  interval = Math.floor(seconds / 86400);<char code='0d'/><char code='0a'/>  if (interval &gt; 1) {<char code='0d'/><char code='0a'/><char code='09'/>return interval + " days";<char code='0d'/><char code='0a'/>  }<char code='0d'/><char code='0a'/>  interval = Math.floor(seconds / 3600);<char code='0d'/><char code='0a'/>  if (interval &gt; 1) {<char code='0d'/><char code='0a'/><char code='09'/>return interval + " hours";<char code='0d'/><char code='0a'/>  }<char code='0d'/><char code='0a'/>  interval = Math.floor(seconds / 60);<char code='0d'/><char code='0a'/>  //alert(interval + ' minutes date: ' + date);<char code='0d'/><char code='0a'/>  if (interval &gt; 1) {<char code='0d'/><char code='0a'/><char code='09'/>return interval + " minutes";<char code='0d'/><char code='0a'/>  }<char code='0d'/><char code='0a'/>  return Math.floor(seconds) + " seconds";<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>truncateString = function(str, length, ending) {<char code='0d'/><char code='0a'/><char code='09'/>if (length == null) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>length = 100;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>if (ending == null) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>ending = '...';<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>if (str.length &gt; length) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>return str.substring(0, length - ending.length) + ending;<char code='0d'/><char code='0a'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>return str;<char code='0d'/><char code='0a'/><char code='09'/>}<char code='0d'/><char code='0a'/>};<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Call the method to populate the recent comments.<char code='0d'/><char code='0a'/>getRecentDisqusComments();<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>If you have any questions, don't hesitate to ask. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Happy commenting!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Further Reading:&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;sup&gt;1&lt;/sup&gt;Raymond Camden has an excellent article at &lt;a href=""&gt;https://www.raymondcamden.com/2014/03/21/Example-of-a-JavaScript-Disqus-Recent-Comment-Widget&lt;/a&gt;. I wished that I had read this earlier before going down my own rabbit hole. To get the related post, I initially tried to call the thread list method (at https://disqus.com/api/3.0/threads/list.json) within a nested ajax post. My initial code was just... &lt;b&gt;ugly&lt;/b&gt;. Finally, I stumbled upon this article and found out that I could simply use the related=thread argument to attach the comment to a thread.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Pressure cooked 'KFC' style chicken with the Magfesa star pressure cookers. There is absolutely nothing better than 'KFC' style pressure cooked chicken made at home.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "http://schema.org",<char code='0d'/><char code='0a'/>  "@type": "Recipe",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Recipe",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/14/Pressure-cooked-KFC-style-chicken-with-the-Magfesa-star-pressure-cookers"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author": "Gregory Alexander",<char code='0d'/><char code='0a'/>  "cookTime": "PT1H",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-14",<char code='0d'/><char code='0a'/>  "description": "Pressure cooked 'KFC' style chicken with the Magfesa star pressure cookers.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/gregorysFriedChicken.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/gregorysFriedChicken.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/gregorysFriedChicken.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "recipeIngredient": [<char code='0d'/><char code='0a'/>    "6 assorted Chicken pieces",<char code='0d'/><char code='0a'/>    "2 Cups of flour.",<char code='0d'/><char code='0a'/><char code='09'/>"1/3 cup of parmesan cheese.",<char code='0d'/><char code='0a'/><char code='09'/>"1 teaspoon Cajun spice mix.",<char code='0d'/><char code='0a'/><char code='09'/>"1 teaspoon basil.",<char code='0d'/><char code='0a'/><char code='09'/>"1 teaspoon rosemary.",<char code='0d'/><char code='0a'/><char code='09'/>"1 teaspoon thyme.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon Cayenne pepper.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon Greek seasoning.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon paprika.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon celery salt.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon ground ginger.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon black pepper.",<char code='0d'/><char code='0a'/><char code='09'/>"½ teaspoon salt."<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "name": "Pressure cooked 'KFC' style chicken",<char code='0d'/><char code='0a'/>  "recipeCategory": "Entree",<char code='0d'/><char code='0a'/>  "recipeCuisine": "Southern Cooking",<char code='0d'/><char code='0a'/>  "keywords": "KFC Style Chicken, Pressure Fried Chicken, Pressure Cooked Chicken, Magfesa Star Pressure Cooker",<char code='0d'/><char code='0a'/>  "prepTime": "PT2H",<char code='0d'/><char code='0a'/>  "recipeInstructions": "Allow the chicken to sit in buttermilk for 24 hours, bread and season the chicken, and fry.",<char code='0d'/><char code='0a'/>  "nutrition": {<char code='0d'/><char code='0a'/>    "@type": "NutritionInformation",<char code='0d'/><char code='0a'/>    "calories": "320 calories for per piece",<char code='0d'/><char code='0a'/>    "fatContent": "16 grams fat per piece"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "recipeYield": "6 pieces"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Pressure cooked 'KFC' style chicken with the Magfesa star pressure cookers.&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;There is absolutely nothing better than 'KFC' style pressure cooked chicken made at home&lt;/b&gt;. However, you can only do this with a very limited number of pressure cookers, namely a &lt;a href"https://www.amazon.com/Magefesa-10-Quart-Stainless-Pressure-Cooker/dp/B0018AAYJ8"&gt;Magfesa star pressure cooker&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt;, with an extra metal arm that is wrapped around the lid. You can also do this at home using older chicken bucket cookers, but the safety features on the older style pressure cookers aren't as good.  You can't do this with any other pressure cooker- &lt;b&gt;certainly not your insta-pot!&lt;/b&gt; It will blow up or just melt. Magfesa does not advertise that you can pressure cook using oil due to legal liability- but it is made like the old chicken buckets, and folks use these specific pressure cookers when they use oil. I have cooked this recipe many times at home using a 16 quart Magfesa cooker, but I am super diligent and carefully follow this method.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Add the following in a glass bowl:&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;½ teaspoon Cayenne pepper. Black pepper, salt.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Fill up to the top with buttermilk.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Optional: 1 beaten egg.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Let chicken sit in buttermilk in the refrigerator for at least 30 minutes. I try to leave in in the fridge for at least two hours. You can also leave it overnight. &lt;br/&gt; <char code='0d'/><char code='0a'/>&lt;li&gt;Take chicken out of fridge for 30 minutes.&lt;/li&gt; <char code='0d'/><char code='0a'/>&lt;li&gt;Create the breading. My typical ingredients include:&lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;br&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;2 Cups of flour.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;1/3 cup of parmesan cheese.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;1 teaspoon Cajun spice mix.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;1 teaspoon basil.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;1 teaspoon rosemary.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;1 teaspoon thyme.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon Cayenne pepper.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon Greek seasoning.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon paprika.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon celery salt.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon ground ginger.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon black pepper.&lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;½ teaspoon salt.&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;li&gt;Mix thoroughly.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Take the chicken out of the buttermilk mixture. Shake the chicken gently in order to drain off the buttermilk for 30 seconds or so. Once drained off, dredge the chicken through the flour spice mix. Use tongs while dipping chicken into mixture.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Put aside on lined baking sheet.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Wait 30 minutes, dredge again. This time it does not use as much flour. You're only trying to cover portions that were not covered in the first dredge.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Wait for 30 minutes to allow chicken to warm up to room temperature. This also allows the flour mixture to bond with the chicken.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Dredge again and lightly season the chicken with any extra herbs that you want to put in. Don't over-season.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Inspect the main seal and the spinning pressure release by blowing into it and seeing if air comes out. Do not continue if the seal or release valve is not working.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;In pressure cooker, heat peanut oil up to 350 degrees with the top off. Use a long thermometer to gage temperature. You must use peanut oil, or a specialty oil mixes that are sold to deep fry turkeys with. &lt;li&gt;Other oils won't hold up with the high temperatures, and they may catch fire as the smoke point is too low.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Once the peanut oil reaches 350 degrees, use long tongs and carefully drop chicken into the oil. Work in batches, even with a large pressure cooker, I only put in 4-6 pieces of chicken at a time. It is also advisable to wear thick insulated gloves that you would wear when using a BBQ. Be careful of splattering.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Cover the pressure cooker and tighten. Wait a minute or two to allow the pressure to build. Do not leave the area once you have applied heat to the pressure cooker.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Once pressure builds up and the pressure release top starts spinning, immediately turn down the heat on the burner down a little more than 2/3rds without actually turning the stove off. I turn my electric stove down to 4 (high is set at 15), and set the timer.&lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;br&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Set timer for:&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Legs: 10 minutes.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Thighs: 12 minutes.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Breast: 15 minutes.&lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;br&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;li&gt;Watch the pressure cooker carefully- if the release top starts spinning like crazy, turn the burner down further. If the emergency pressure release is popped (the 2nd safety feature, turn the stove off and move the pot off of the burner.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;After the timer goes off, release the pressure manually and carefully use tongs to pull the chicken out. I do not put the pressure cooker under water to quick release the pressure. Play it safe- water and oil do not mix.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Make sure that the pressure is released before opening the lid, otherwise, you may have oil come up the pot, make a mess, and perhaps get burned.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;Helpful tips: for chicken breasts and thighs, you can also gently precook or smoke the meat halfway done prior to soaking the chicken in the butter milk. This allows you to shorten the time by a few minutes and not over-burn the skin.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Happy (and safe) eating!&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Further reading:&lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;a href="https://www.cookistry.com/2013/09/pressure-fried-chicken.html"&gt;Cookistry: Pressure fried chicken&lt;/a&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>  &lt;a href="https://www.seriouseats.com/2013/08/gadgets-magefesa-star-pressure-cooker-fryer-review.html"&gt;Serious Eats: Gadgets: Magefesa Star Pressure Cooker&lt;/a&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;sup&gt;1&lt;/sup&gt;Note: I am in no way affiliated with Magfesa, and don't derive any income from this post. I just like deep fried chicken and this is the most economical way to make this at home!</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I've finally managed to incorporate URL rewrite rules and changed the Galaxie Blog logic to use search engine friendly URL's. Search friendly URL's allow the URL to be more consistent, and eliminate information that is not important. A search friendly URL should easily convey meaning of the page.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type": "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/26/Enabling-Search-Engine-Friendly-Links-with-Url-Rewrite-in-Galaxie-Blog"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/10/26/Enabling-Search-Engine-Friendly-Links-with-Url-Rewrite-in-Galaxie-Blog",<char code='0d'/><char code='0a'/>  "headline": "URL Rewrite Rule for ColdFusion and Galaxy Blog",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/urlRewrite1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/urlRewrite1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/urlRewrite1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I've finally managed to incorporate URL rewrite rules and changed the Galaxie Blog logic to use search engine friendly URL's. Search friendly URL's allow the URL to be more consistent, and eliminate information that is not important. A search friendly URL should easily convey meaning of the page.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-26",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;I've finally managed to incorporate URL rewrite rules and changed the Galaxie Blog logic to use search engine friendly URL's. Search friendly URL's allow the URL to be more consistent, and eliminate information that is not important. A search friendly URL should easily convey meaning of the page.&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Making this open source blog work with search friendly URL's was not a trivial undertaking. A lot of changes had to be made. Galaxie Blog now &lt;b&gt;removes the '/index.cfm' string from the URL&lt;/b&gt;. We are also using the posted date and an easy to read &lt;b&gt;entry title within the URL&lt;/b&gt;. Galaxie Blog also &lt;b&gt;removes the '/index.cfm' string from all of the links&lt;/b&gt;. We don't want to have a mixture of different links that the search engine would crawl and cause duplicate content on several different pages. &lt;b&gt;Additionally,&lt;/b&gt; Galaxie Blog will also remove the '/index.cfm' string from both the &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/googlesitemap.cfm"&gt;google site map&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/rss.cfm"&gt;RSS feed&lt;/a&gt;&lt;/b&gt; that Galaxie Blog automatically creates for you.&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;To enable search engine friendly URL's in Galaxie blog, follow the two steps below.&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;If you're using IIS, the following rule should be copied and pasted into the web.config in the root directory of the server. The URL redirection rule is between the rewrite tags below. It essentially matches all strings with 'index.cfm', and removes this string. Additionally, it sets a permanent redirect that the search engine uses when crawling your page. &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<char code='0d'/><char code='0a'/>&lt;configuration&gt;<char code='0d'/><char code='0a'/>    &lt;system.webServer&gt;<char code='0d'/><char code='0a'/>        &lt;directoryBrowse enabled="false" /&gt;<char code='0d'/><char code='0a'/>        &lt;urlCompression doStaticCompression="true" doDynamicCompression="true" /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;rewrite&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;rules&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>  &lt;rule name="GregorysBlog" stopProcessing="true"&gt;<char code='0d'/><char code='0a'/>            &lt;match url="(.*)index.cfm" /&gt;<char code='0d'/><char code='0a'/>            &lt;conditions logicalGrouping="MatchAll"&gt;<char code='0d'/><char code='0a'/>        <char code='09'/><char code='09'/>&lt;add input="{SCRIPT_FILENAME}" matchType="IsFile" negate="true" /&gt;<char code='0d'/><char code='0a'/>                &lt;add input="{QUERY_STRING}" pattern=".+" ignoreCase="false" negate="true" /&gt;<char code='0d'/><char code='0a'/>            &lt;/conditions&gt;<char code='0d'/><char code='0a'/>            &lt;action type="Redirect" url="{R:1}" appendQueryString="true" redirectType="Permanent" /&gt;<char code='0d'/><char code='0a'/>          &lt;/rule&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/rules&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/rewrite&gt;<char code='0d'/><char code='0a'/>        &lt;security&gt;<char code='0d'/><char code='0a'/>            &lt;requestFiltering&gt;<char code='0d'/><char code='0a'/>                &lt;fileExtensions&gt;<char code='0d'/><char code='0a'/>                    &lt;add fileExtension=".pl" allowed="false" /&gt;<char code='0d'/><char code='0a'/>                &lt;/fileExtensions&gt;<char code='0d'/><char code='0a'/>            &lt;/requestFiltering&gt;<char code='0d'/><char code='0a'/>        &lt;/security&gt;<char code='0d'/><char code='0a'/>        &lt;httpErrors errorMode="Detailed" /&gt;<char code='0d'/><char code='0a'/>        &lt;staticContent&gt;<char code='0d'/><char code='0a'/>            &lt;remove fileExtension=".woff2" /&gt;<char code='0d'/><char code='0a'/>            &lt;mimeMap fileExtension=".woff2" mimeType="font/woff2" /&gt;<char code='0d'/><char code='0a'/>            &lt;remove fileExtension=".webp" /&gt;<char code='0d'/><char code='0a'/>            &lt;mimeMap fileExtension=".webp" mimeType="image/webp" /&gt;<char code='0d'/><char code='0a'/>        &lt;/staticContent&gt;<char code='0d'/><char code='0a'/>    &lt;/system.webServer&gt;<char code='0d'/><char code='0a'/>&lt;/configuration&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol start="2"&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;<char code='0d'/><char code='0a'/>In the application.cfc template which is in the blog's root directory, search for the following string and set it to true. It should be around line 22. Note: this is not permanent. You can always reverse this and set it to false at later time if you're new server does not allow for search friendly URL's.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfset application.serverRewriteRuleInPlace = true&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>That's it! You're blog should now be using search friendly URL's.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Credits:&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;I especially want to thank &lt;b&gt;Caleb C.&lt;/b&gt; from &lt;a href="www.hostek.com"&gt;Hostek&lt;/a&gt; for helping me get the IIS rule straight. The folks at &lt;a href="www.hostek.com"&gt;Hostek&lt;/a&gt; have been nothing but outstanding in their service and support!&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Further Reading:&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Pete Freitag: &lt;a href="https://www.petefreitag.com/item/503.cfm"&gt;How to make Friendly URLs (using Apache)&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Ben Nadel: &lt;a href="https://www.bennadel.com/blog/1696-exploring-iis-mod-rewrite-for-rewriting-urls-in-a-coldfusion-application.htm"&gt;Exploring IIS Mod-Rewrite For Rewriting URLs In A ColdFusion Application&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Notes:&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The search friendly URL features will be available in the next release.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Have you wondered how to get a perfect image from your blog when you share your post on social media? I have... and after spending several weeks on this; I  think that I have managed to figure it out...&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/28/How-to-make-the-perfect-social-media-sharing-image--part-1-Background"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/10/28/How-to-make-the-perfect-social-media-sharing-image--part-1-Background",<char code='0d'/><char code='0a'/>  "headline": "How to Make the Perfect Image for Social Media Sharing",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/socialMediaImage11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/socialMediaImage11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/socialMediaImage11.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Have you wondered how to get a perfect image from your blog when you share your post on social media?  I have... and after spending several weeks on this; I  think that I have managed to figure it out...",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;&lt;b&gt;Have you wondered how to get a perfect image from your blog when you share your post on social media?&lt;/b&gt;  I have... and after spending several weeks on this; I  think that I have managed to figure it out...&lt;br/&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/> <char code='0d'/><char code='0a'/>Over the course of the last few months, I have spent quite a bit of time trying to figure out how to effectively share my content on social media sites. I had thought to simply share the image at the top of each post, but I didn't get the size of the image right. The proper image size was different for each social media platform. Finding the proper sizes between the social media platforms was daunting. The information available on the net is often contradictory, and constantly subject to change. Figuring out the proper approach necessitates aiming at a constantly moving target. What worked several months ago might not work the same now. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>After failing at my initial attempt; I reverted the Galaxie Blog code and used the same default social media image that tended to work for every post. While I was sick of looking at the same mountain logo on every social media post (I assume along with my three regular readers), I had more pressing tasks to deal with. There have been a lot of other features that I wanted to put into this blog first, and wanted to wait until I could take a few weeks to devote to learn by trial and error to get this social media image sharing thing right.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are also other considerations other than just manipulating the image. The social media platforms need to have certain meta tags. After spending the last couple of weeks I found a good approach to solve this. In the next several posts, I will share my journey with you and show you my Galaxie blog implementation. Along the way, I'll provide some ColdFusion scripts for you to resize your own images for social media sharing on your own. Additionally, I hope to provide you some helpful tips.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Getting the size right- there is a lot of information about this on the web- but unfortunately, most of it is wrong or outdated. And this is not necessarily due to the author's mistake. The social media platforms are always fine tuning their image formats and the information changes. To make matters worse, there is conflicting information even when going straight to the source, ie Facebook or Twitter.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/10/28/How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/10/28/How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right",<char code='0d'/><char code='0a'/>  "headline": "Social Media Sharing Image Sizes",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/aspectRatio1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/aspectRatio1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/aspectRatio1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Getting the size right- there is a lot of information about this on the web- but unfortunately, most of it is wrong or outdated. And this is not necessarily due to the author's mistake. The social media platforms are always fine tuning their image formats and the information changes. To make matters worse, there is conflicting information even when going straight to the source, ie Facebook or Twitter.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-10-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;There is a lot of information about this on the web- but unfortunately, most of it is wrong or outdated. And this is not necessarily due to the author's mistake. The social media platforms are always fine tuning their image formats and the information changes. To make matters worse, there is conflicting information even when going straight to the source, ie Facebook or Twitter.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;For example, here twitter recommends using a &lt;a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image"&gt;2x1 image ratio&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; for their large summary cards, however, twitter has new documentation on its business page mentioning the new  1.91:1 aspect ratio that was updated this August &lt;sup&gt;2&lt;/sup&gt;. Faceook is a bit better, but there is an overwhelming amount of information out there, and much of it is confusing. I had to learn the proper aspect ratios by digging into a lot of posts, and through trial and error. I have dug into at least a dozen posts for each image type and this is what I came up with and what proved to work for me best.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;The following information should be correct as of October 28 2019. I will periodically try to update this list.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;ul&gt;<char code='0d'/><char code='0a'/>    &lt;li&gt;&lt;b&gt;Twitter Summary Card&lt;/b&gt; with a large image (1.91:1 aspect ratio):&lt;br&gt;<char code='0d'/><char code='0a'/>      &lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;ul&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended width: 1200 pixels&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended height: 628&lt;br&gt;<char code='0d'/><char code='0a'/>        &lt;br&gt;<char code='0d'/><char code='0a'/>      &lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum width: 518&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum height: 226&lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;/ul&gt;<char code='0d'/><char code='0a'/>  &lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Facebook&lt;/b&gt;&lt;br&gt;<char code='0d'/><char code='0a'/>    Facebook has a few more options. There is a large image type, but you can also choose from two different smaller image types. The smaller types allow the text to be floated to the right of the image whereas the larger type puts the text at the bottom underneath a larger image. The aspect ratio for the large image size is just a hair bigger than Twitter's Summary Card.&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;br&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>  &lt;li&gt;&lt;b&gt;Facebook Shared Image&lt;/b&gt; (&lt;b&gt;extremely&lt;/b&gt; close to the 1.91:1 twitter format, Facebook has a 1.91 aspect ratio):<char code='0d'/><char code='0a'/>      &lt;ul&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Recommended width: 1200&lt;/li&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Recommended height: 630 &lt;br&gt;<char code='0d'/><char code='0a'/>          &lt;br&gt;<char code='0d'/><char code='0a'/>        &lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;/ul&gt;<char code='0d'/><char code='0a'/>    &lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;li&gt;&lt;b&gt;Facebook Link Image - Rectangular&lt;/b&gt;<char code='0d'/><char code='0a'/>      &lt;ul&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Minimum width: 484&lt;/li&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Minimum height: 252&lt;br&gt;<char code='0d'/><char code='0a'/>          &lt;br&gt;<char code='0d'/><char code='0a'/>        &lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;/ul&gt;<char code='0d'/><char code='0a'/>    &lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;li&gt;&lt;b&gt;Facebook Link Image - Square&lt;/b&gt;<char code='0d'/><char code='0a'/>      &lt;ul&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Minimum width: 116&lt;/li&gt;<char code='0d'/><char code='0a'/>        &lt;li&gt;Minimum height: 116&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;/ul&gt;<char code='0d'/><char code='0a'/>    &lt;/li&gt;<char code='0d'/><char code='0a'/>  &lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Instagram&lt;/b&gt;&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;ul&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended width: 1080 (1x1 aspect ratio)&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended height: 1080&lt;br&gt;<char code='0d'/><char code='0a'/>        &lt;br&gt;<char code='0d'/><char code='0a'/>      &lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum width: 600&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum height: 315&lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;/ul&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>  &lt;li&gt;&lt;b&gt;Linked In&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;/b&gt;LinkedIn images are very narrow and wide.&lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;br&gt;<char code='0d'/><char code='0a'/>    &lt;ul&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended width: 1128&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Recommended height: 376&lt;br&gt;<char code='0d'/><char code='0a'/>        &lt;br&gt;<char code='0d'/><char code='0a'/>      &lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum width: 502&lt;/li&gt;<char code='0d'/><char code='0a'/>      &lt;li&gt;Minimum height: 282&lt;/li&gt;<char code='0d'/><char code='0a'/>    &lt;/ul&gt;<char code='0d'/><char code='0a'/>  &lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;<char code='0d'/><char code='0a'/>If this sounds a little confusing, read on to the next post. In the next post, I will show the actual dimensions of each image type, and provide information how to use ColdFusion to manipulate images to obtain the desired size while keeping the proper aspect ratio. <char code='0d'/><char code='0a'/>&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;sup&gt;1&lt;/sup&gt;A 2x1 aspect ratio is recommended on this &lt;a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image"&gt;particular twitter page&lt;/a&gt; &lt;i&gt;"Images for this Card support an aspect ratio of &lt;b&gt;2:1&lt;/b&gt; with minimum dimensions of 300x157 or maximum of 4096x4096 pixels"&lt;/i&gt; &lt;sup&gt;&lt;br&gt;<char code='0d'/><char code='0a'/>2&lt;/sup&gt;Yet, &lt;a href="https://business.twitter.com/en/help/campaign-setup/advertiser-card-specifications.html"&gt;this twitter page&lt;/a&gt; suggests the new 1.91:1 aspect ratio: &lt;i&gt;"Image size: 800 x 418 pixels for 1.91:1 aspect ratio, 800 x 800 pixels for 1:1 aspect ratio"&lt;/i&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In this post, I will share how I implemented logic to have Galaxie Blog automatically create social media sharing images for you.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code",<char code='0d'/><char code='0a'/>  "headline": "How to Generate Social Media Images with ColdFusion",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/usingColdFusionGenerateImage11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/usingColdFusionGenerateImage11.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/usingColdFusionGenerateImage11.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In this post, I will share how I implemented logic to have Galaxie Blog automatically create social media sharing images for you.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-01",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;In this post, I will share how I implemented logic to have Galaxie Blog automatically create social media sharing images for you when uploading an image for a given post. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Background&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;When a Galaxie Blog owner creates a post using the administrative interface, there is an option to upload an &lt;b&gt;enclosure&lt;/b&gt; by clicking a &lt;b&gt;Choose File&lt;/b&gt; button at the end of the add entry page. The interface is simple, when the &lt;b&gt;Choose File&lt;/b&gt; button is clicked, it opens up a file browser and the user selects the image that they want to be displayed at the top of the post.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/> In this post, &lt;b&gt;the picture above is an abstract image&lt;/b&gt; that is 2200 pixels wide, and 1760 pixels in height. However, the social media images that the code below produces from this image will have different sizes that are optimized for both Facebook and Twitter. Galaxie Blog has always created a responsive image that automatically adjusts itself to fit on any modern device, however, I have now implemented logic that will manipulate the selected image and create both Facebook and Twitter social media images as well. Here is my approach...&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Usage&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;To use this to &lt;b&gt;create&lt;/b&gt; and &lt;b&gt;save social media images&lt;/b&gt;, all that you need to do is invoke the createSocialMediaImages function below. It takes three arguments, the URL of the image that you want to perform operations on, the social media platform, and optionally, the Social Media Image Type. If the social media type argument is left blank (which is what I use in Galaxie Blog), the function will automatically determine the size and the proper aspect ratio. Here is the production code for Galaxie Blog that is working right now:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Set the path. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset socialMediaImagePath = "D:\home\gregoryalexander.com\wwwroot\blog\enclosures\aspectRatio1.jpg"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Automatically generate social media images for Facebook, Twitter, Instagram and LinkedIn. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'facebook', '')&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'twitter', '')&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'instagram', '')&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'linkedIn', '')&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Logic Walkthrough&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;I am assuming that if you're reading this, you're someone with the technical skills that can read this and try it out, so I'll jump right in to briefly cover the core logic of this approach. For the sake of clarity, I will only cover how the logic creates Facebook social media images. Most of the logic for the other platforms are the same, and I'll provide the full code at the end of the article.&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Once the &lt;i&gt;blog image&lt;/i&gt; is selected by the blog owner, Galaxie Blog will first get the width and height of the uploaded &lt;b&gt;enclosure&lt;/b&gt; image that was just uploaded.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfimage <char code='0d'/><char code='0a'/><char code='09'/>action = "info"<char code='0d'/><char code='0a'/><char code='09'/>source = "#socialMediaImagePath#"<char code='0d'/><char code='0a'/><char code='09'/>structname="imageInfo"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>The logic will then compare the height and width of the original image and determine which type of image will be used.  Essentially, are we going to use the largest image type specified by the social media platform, or the minimum depending upon the image that was just uploaded.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcase value="facebook"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Is the original image larger or smaller than Facebook's large image size? If larger, use the larger image dimensions specified by the social media platform. If the original image is smaller, use a smaller sized image. We are going to use similiar logic for every social media platform. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif imageInfo.width gte facebookSharedImageWidth and imageInfo.height gte facebookSharedImageHeight&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Use the larger social media format. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset socialMediaImageType = "facebookSharedImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif imageInfo.width gte facebookLinkRectangleImageWidth and imageInfo.height gte facebookLinkRectangleImageHeight&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset socialMediaImageType = "facebookLinkRectangleImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfelse&gt;&lt;!---&lt;cfif imageInfo.width gte facebookLinkRectangleImageWidth and imageInfo.height gte facebookLinkRectangleImageHeight&gt;---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Use the facebookLinkSquareImage ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset socialMediaImageType = "facebookLinkSquareImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfif&gt;&lt;!---&lt;cfif imageInfo.width gte facebookLinkRectangleImageWidth and imageInfo.height gte facebookLinkRectangleImageHeight&gt;---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/cfcase&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;First, we will double check the images again to make sure that the uploaded image has a larger size than the social media sharing image that we will create. If the uploaded image is larger, we'll set the width and height to match the larger image type. If the uploaded image is smaller than the largest recommended size, we will use the minimum size recommended by the social media platform, and we may set a pre-crop variable to true if necessary. We'll cover this logic next.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcase value="facebookSharedImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Is the original image larger or smaller than the large image size? If larger, use the larger image dimensions specified by the social media platform. If the original image is smaller, use the miniumum size. We are going to use the same logic for every social media type. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif imageInfo.width gte facebookSharedImageWidth and imageInfo.height gte facebookSharedImageHeight&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Use the larger social media format. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset thisImageWidth = facebookSharedImageWidth&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset thisImageHeight = facebookSharedImageHeight&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Use the rectangular facebook format. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset thisImageWidth = facebookLinkRectangleImageWidth&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset thisImageHeight = facebookLinkRectangleImageHeight&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset preCrop = true&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/cfcase&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Resizing a copy of the original uploaded image&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Next we'll check to see if the original image is twice as wide as the targetted social media size. If it is, or if the preCrop variable was set in the previous switch statements, we will create a copy of the original image, and then resize the new image. The code below illustrates this. I removed all of the code other than the Facebook code.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfif preCrop&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Create a new image ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset shareImage = imageNew(socialMediaImagePath)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Handle small images. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- This logic is only invoked for Facebook rectangle links. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif socialMediaImageType eq 'facebookLinkRectangleImage'&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Resize the new image. For portrait images, we are going to resize the image to 550 pixels wide. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset imageResize(shareImage, 550, '')&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- We know the width of the new image that was just created (550), now get its height ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset shareImageWidth = imageGetHeight(shareImage)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Crop the resized image from the center (centerCrop(path/image, originalWidth, originalHeight, newWidth, newHeight). We don't need to determine an aspect ratio. It is a square. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset shareImage = centerCrop(shareImage, 550, shareImageWidth, thisImageWidth, thisImageHeight)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;&lt;!---&lt;cfif (socialMediaImageType eq 'facebookLinkRectangleImage'&gt;---&gt;<char code='0d'/><char code='0a'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Maintaining the aspect ratio using our nifty ColdFusion ratio calculator function&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;One of the most critical requirements or this is having the ability to &lt;b&gt;resize images while maintaining the targeted aspect ratio&lt;/b&gt;. I could not find a ColdFusion function that did this, so I had to built my own. &lt;b&gt;If you play around with manipulating images and aspect ratios, this type of function should belong in your own toolbox.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Our &lt;b&gt;ratioCalculator function&lt;/b&gt; below takes 3 arguments. The aspectRatioWidth and aspectRatioHeight arguments should match the recommended width and height of our targetted social media image that are indicated in the &lt;a href="https://gregoryalexander.com/blog/2019/10/29/How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right"&gt;prior post&lt;/a&gt;. For the large Facebook Shared Image, the ratio aspect is 1200 pixels wide, and 630 pixels in height. We'll go ahead and plug these values in for the first two arguments as this is the aspect ratio that we want to keep, no matter what size we eventually resize the image to. The third argument is the newWidth argument. Here, the newWidth argument will either be: &lt;b&gt;the original width of the uploaded image&lt;/b&gt;: or, the &lt;b&gt;new width when we resized the image&lt;/b&gt; in the step above when the size of the uploaded image was twice the width of the recommended Facebook image size.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;b&gt;ratio calculator function&lt;/b&gt; will take these three values, and return the height that is needed to maintain the original aspect ratio. To get the new height of the image, all that we need to specify is the recommended width and height, provided by the social media platform, and the new width that we want to resize an image to be. The new width argument can be smaller, or larger, than the aspect ratio size. &lt;b&gt;No matter what you plug in for the new width, the aspect ratio will be maintained.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;cffunction name="ratioCalculator" access="public" output="true" returnType="numeric" hint="This is used to determine the new dimensions needed to fit a certain width while maintaining the specified aspect ratio. I am using this to determine how to resize an image to meet the aspect ratio used by varius social media sites."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="aspectRatioWidth" required="yes" hint="Specify the original width of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="aspectRatioHeight" required="yes" hint="Specify the original height of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="newWidth" required="yes" hint="Specify the desired width of the new image."&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset newHeight = (arguments.aspectRatioHeight / arguments.aspectRatioWidth) * arguments.newWidth&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfreturn newHeight&gt;<char code='0d'/><char code='0a'/>&lt;/cffunction&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Cropping the images&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The code has two cropping functions, centerCrop, and horizontalCrop. The centerCrop function is used when we have a landscape image, and the horizontalCrop function is used when using a portrait image.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The centerCrop function takes five arguments, we need to specify the full path of the image, or the variable of the image if we are creating a new image using the newImage ColdFusion function. The original width and original height arguments using the social media recommended size. Here, we are using the large Facebook size of 1200 for the originalWidth, and 630 for the originalHeight. The fourth argument, width, is either the width of the uploaded image, or the width of the newly resized image, and finally, new height, which is provided by the ratioCalculator function that we just covered above. This function will crop the image from the center. &lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cffunction name="centerCrop" access="public" output="true" returnType="string" hint="Used to crop an image with a desired size that is smaller both horizontally and vertically than the original image. This will crop the image from the center."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="imagePath" required="yes" hint="Provide either the full original path of the image, or the actual ColdFusion image using the newImage function."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="originalWidth" required="yes" hint="Provide the original width of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="originalHeight" required="yes" hint="Provide the original width of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="newWidth" required="yes" hint="Provide the desired width of the cropped image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="newHeight" required="yes" hint="Provide the desired height of the new cropped image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Local debugging carriage. If something goes awry, set this to true. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset debug = true&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- This algorithm was found at https://www.raymondcamden.com/2010/02/03/Cropping-to-the-center-of-an-image ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset originalImage = "#arguments.imagePath#"&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Make a copy of the original image. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset croppedImage = imageNew(originalImage)&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Get the coordinates. We will subtract the orinal width minus the new width to grab the center of the new image.  ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset xCoordinate = (originalWidth - newWidth) / 2&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset yCoordinate  = (originalHeight - newHeight) / 2&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif debug&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfoutput&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>originalWidth: #originalWidth#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>originalHeight: #originalHeight#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>newWidth: #newWidth#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>newHeight: #newHeight#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>xCoordinate #xCoordinate#&lt;br/&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>yCoordinate" #yCoordinate#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Crop the image. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset imageCrop(croppedImage, xCoordinate, yCoordinate, newWidth, newHeight)&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- And return it. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfreturn croppedImage&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cffunction&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The horizontalCrop, used when we are uploading a portrait image, leaves the width intact, but crops the top and the bottom of the picture equally. This function takes three arguments, the imagePath (or the variable name of the new image when we use the imageNew ColdFusion function), the original height of the uploaded image, and the new height. I am using our ratioCalculator function to provide the new height again while maintaining the original aspect ratio recommended by the social media platform. Again, this example uses the large Facebook size of 1200 for the originalWidth, and 630 for the originalHeight. &lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cffunction name="horizontalCrop" access="public" output="true" returnType="string" hint="Used to crop a horizontal image that has a horizontally size that is greater than the desired size of the new image. This will crop the image from the horizontal center."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="imagePath" required="yes" hint="Provide the full original path of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="originalHeight" required="yes" hint="Provide the original width of the image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfargument name="newHeight" required="yes" hint="Provide the desired height of the new cropped image."&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Local debugging carriage. If something goes awry, set this to true. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset debug = true&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- This algorithm was found at https://www.raymondcamden.com/2010/02/03/Cropping-to-the-center-of-an-image ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset originalImage = "#arguments.imagePath#"&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Make a copy of the original image. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset croppedImage = imageNew(originalImage)&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Get the coordinates. The x coordinate starts at 0. The image only needs to be cropped vertically.  ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset xCoordinate = 0&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset yCoordinate  = (originalHeight - newHeight) / 2&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif debug&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfoutput&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>originalHeight: #originalHeight#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>newHeight: #newHeight#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>xCoordinate #xCoordinate#&lt;br/&gt; <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>yCoordinate" #yCoordinate#&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Crop the image. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset imageCrop(croppedImage, xCoordinate, yCoordinate, newWidth, newHeight)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- And return it. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfreturn croppedImage&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;/cffunction&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This is a rather long and complex post. In my next post, I'll provide some concise examples of social media images that this function creates.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Get the code&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The code is published as a &lt;a href="https://github.com/GregoryAlexander77/GenerateSocialImagesWithColdFusion/blob/master/Image.cfc"&gt;git hub repository&lt;/a&gt;. This component will also become a part of Galaxie Blog in the next release.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Further Reading&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;Some of the logic in the center crop function was taken from Raymond Camden's article at &lt;a href="https://www.raymondcamden.com/2010/02/03/Cropping-to-the-center-of-an-image"&gt;https://www.raymondcamden.com/2010/02/03/Cropping-to-the-center-of-an-image&lt;/a&gt;&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:I wanted to show you the social media images that were created in the previous article by ColdFusion. Each of these images match the exact recommended size and the ratio aspect that are recommended by the various social media platforms. I'll show you the actual images that were created, and how the social media platform displayed the images after I shared the previous article.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-4-Image-Examples"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Social Media Image Sharing Examples",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/toby.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/toby.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/toby.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "I wanted to show you the social media images that were created in the previous article by ColdFusion. Each of these images match the exact recommended size and the ratio aspect that are recommended by the various social media platforms. I'll show you the actual images that were created, and how the social media platform displayed the images after I shared the previous article.",<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-4-Image-Examples",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-01",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;After the &lt;a href="https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code"&gt;last entry&lt;/a&gt;, I wanted to show you the social media images that were created by ColdFusion. Each of these images match the exact recommended size and the ratio aspect that are recommended by the various social media platforms. I'll show you the actual images that were created, and how the social media platform displayed the images after I shared the previous article.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;The images&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The first image to the left is the original image that was uploaded. This is a picture of my dog, Toby, a super-smart, 13 y.o. bundle of energy running in the snow. The second image, in the middle, is the Facebook social media image, and the image to the right is the Twitter social media image. All of the social media images are copies of the original.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Galaxie Blog will automatically take the image that you want to post, and create Facebook and Twitter social media images that are sized per the social media's recommendations. The Facebook social media image is 1200 pixels wide, and 630 in height. Twitter is similar, but just a hair shorter. They are 1200 pixels wide, and 628 pixels in height.&lt;/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/images/documentation/cfimage/tobyOrig.jpg" data-fancybox-group="toby" title="Original Image"&gt;&lt;img data-src="/blog/images/documentation/cfimage/tobyOrigThumb.jpg" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/images/documentation/cfimage/tobyFacebook.jpg" data-fancybox-group="toby" title="Facebook social media image"&gt;&lt;img data-src="/blog/images/documentation/cfimage/tobyFacebookThumb.jpg" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/images/documentation/cfimage/tobyTwitter.jpg" data-fancybox-group="toby" title="Twitter social media image"&gt;&lt;img data-src="/blog/images/documentation/cfimage/tobyTwitterThumb.jpg" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;How the page renders on social media sites&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Below are the social media sites render the page when it is shared. The images below are actual screen shot's of the &lt;a href="https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code"&gt;last post I shared&lt;/a&gt; in part 3 of this series. Again, the image to the left is the original. The middle image is how Facebook presents the site, and the image to the right is how Twitter displays the share.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Both Facebook and Twitter will take the images that were created by Galaxie Blog, and resize them into their own format. As long as the images either meet the maximum or minimum dimensions as they do here, the site presentation of the share will look good.&lt;/p&gt;  <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/enclosures/usingColdFusionGenerateImage1.jpg" data-fancybox-group="socialMediaRender" title="Original Image"&gt;&lt;img data-src="/blog/images/documentation/cfimage/usingColdFusionGenerateImageThumb.png" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/images/documentation/cfimage/facebook.png" data-fancybox-group="socialMediaRender" title="Facebook share"&gt;&lt;img data-src="/blog/images/documentation/cfimage/facebookThumb.png" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;a class="fancybox-effects" href="/blog/images/documentation/cfimage/twitter.png" data-fancybox-group="socialMediaRender" title="Twitter share"&gt;&lt;img data-src="/blog/images/documentation/cfimage/twitterThumb.png" alt="" class="fade thumbnail"/&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: this approach works for &lt;b&gt;Slack&lt;/b&gt; and &lt;b&gt;LinkedIn&lt;/b&gt; sites, but this is outside of the narrow &lt;i&gt;Facebook and Twitter&lt;/i&gt; scope that I wanted to blog about.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Next up in this series, how to properly use the meta tags for social media sharing.&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Sharing your content on social media can have dramatic results at driving more traffic to your site. In my own experience, sharing my own content can drive 50% more traffic to the site. Along with adding the properly sized images, we need to make use of the correct meta tags.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "headline": "Essential Meta Tags for Social Image Sharing ",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/essentialTags.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/essentialTags.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/essentialTags.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Sharing your content on social media can have dramatic results at driving more traffic to your site. In my own experience, sharing my own content can drive 50% more traffic to the site. Along with adding the properly sized images, we need to make use of the correct meta tags.",<char code='0d'/><char code='0a'/>  "url" : "https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-02",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;br/&gt;How to make the perfect social media sharing image - part 5 Essential Meta Tags<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Sharing your content on social media can have dramatic results at driving more traffic to your site. In my own experience, sharing my own content can drive 50% more traffic to the site. Along with adding the properly sized images, we need to make use of the correct meta tags. I have made several passes at improving the logic that Galaxie Blog uses to auto-generate the tags, and will share my experience with you. If you are using Galaxie Blog, the auto-generation of these tags is done for you.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Each social media site has its own rules for generating the meta tags. &lt;b&gt;Facebook prefers open graph tags&lt;/b&gt;, &lt;b&gt;Twitter&lt;/b&gt; can use the open graph tags, but it &lt;b&gt;has a slew of its own proprietary tags&lt;/b&gt;, and &lt;b&gt;Google +, LinkedIn, and Pinterest&lt;/b&gt; prefer &lt;b&gt;schema markup tags&lt;/b&gt;, which I will not cover here.&lt;/p&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Open Graph Tags&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following open graph tags are essential for Facebook&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&amp;lt;meta property="og:image" content="URL to the &lt;b&gt;social sharing image&lt;/b&gt;."&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta property="og:site_name" content="The site name (ie Galaxy Blog). " /&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta property="og:url" content="The URL to the article" /&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta property="og:title" content=" Must be 25 characters or less, especially for mobile" /&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta property="og:description" content="Should be up to two sentences long, but under 30 characters for decent mobile rendering" /&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The og:image:height and og:image:width tags are helpful, but not necessary. Facebook will correctly determine the proper image size as long as you stay within the &lt;a href="https://gregoryalexander.com/blog/2019/10/29/How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right"&gt;Facebook recommendations&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Essential Twitter Tags&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&amp;lt;meta name="twitter:card" content="summary_large_image"&gt;Use 'summary_large_image' if you're following along with this article&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta name="twitter:site" content="@Site or article URL"&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta name="twitter:title" content="The title of your site or article"&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta name="twitter:description" content="Description, should be less than 200 characters"&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&amp;lt;meta name="twitter:image" content="URL to the &lt;b&gt;social sharing image&lt;/b&gt;."&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In the next article, I will go over some useful validation tools and share some tips and tricks with that I found.</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In this last post in this series, I will provide to links to some social image sharing validator tools and provide a few social media sharing tips and tricks that I learned along the way.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/4/How-to-make-the-perfect-social-media-sharing-image--part-6-Validation-tools-and-tips"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/11/4/How-to-make-the-perfect-social-media-sharing-image--part-6-Validation-tools-and-tips",<char code='0d'/><char code='0a'/>  "headline": "Social image sharing validator tools and a few social media sharing tips and tricks.",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/womanValidate1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/womanValidate1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/womanValidate1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In this last post in this series, I will provide to links to some social image sharing validator tools and provide a few tips and tricks that I learned along the way.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-04",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-07"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In this last post in this series, I will provide to links to some social image sharing validator tools and provide a few tips and tricks that I learned along the way.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;After creating the proper social media images and fine tuning the social media meta tags that are required, you can validate how each site will display your page using the tools below.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;&lt;a href="https://developers.facebook.com/tools/debug/sharing/"&gt;Facebook Sharing Debugger&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The Facebook Sharing Debugger will validate your og meta tags and scrape the social media image. its relatively straightforward to use. Just enter in the URL of the page that you want to validate, and the debugger will scrape your page and show you if any errors were made. When you first enter the URL, it will take several seconds to generate the page, and if this page was not shared before, it will prompt you to &lt;b&gt;fetch new information&lt;/b&gt;. Click on the button to fetch new information, and the debugger will list out data along with error information.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The debugger will not immediately generate the Facebook sharing preview as it is crawling your page in the background, wait several minutes and refresh the page, and the image preview should be displayed. If you have errors indicating that you have missing tags, you can ignore these, as long as you have all of the &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags"&gt;essential tags&lt;/a&gt;&lt;/b&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you don't like the look of the images, you can make some changes, but come back here and regenerate the preview on the pages that you have shared the URL to.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you're using Galaxie Blog, I have a utility tool in /common/utilities/cfimage.cfm that will allow you to reprocess the images quickly. For non Galaxie Blog users, I have provided instructions below, and I placed the utility script on Git hub.&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;&lt;a href="https://cards-dev.twitter.com/validator"&gt;Twitter Card Validator&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The Twitter Card Validator is a bit easier to use, and it responds faster than the Facebook Sharing Debugger. Like Facebook, all that you need is to input your URL. After entering the URL, Twitters tool should immediately display your page preview. However, it is not easy to change the appearance of the preview after it has been made. I'll show you some tricks to re-create the preview.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;How to Regenerate a Twitter Preview&lt;/b&gt;&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Twitter will cache your preview once the page has been shared, or a Twitter Card Preview has been made. However, it can be quite problematic to refresh the cache once made. I learned a few tricks and will show you a bullet proof way to change your preview if you have to make any changes.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Go to the Twitter Open Graph meta tags in your page. Append something unique on the twitter:image tag like so. If you're using ColdFusion you can simply create a UUID. Other languages have the same capabilities. All you need to do is make sure that the URL is unique.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>meta name="twitter:image" content="https://gregoryalexander.com/blog/enclosures/twitter/toby.jpg?id=#createUuid()#"<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Once you have made the URL to the image unique, Twitter thinks that you have changed the image entirely, and will clear the cache and refresh the preview.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: you'll have to get a Facebook and Twitter Developer Account to use these tools.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Creating Social Media Images&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I have put a &lt;a href="https://github.com/GregoryAlexander77/GenerateSocialImagesWithColdFusion/blob/master/cfimage.cfm"&gt;cfimage.cfm template&lt;/a&gt; on GitHub for you to generate Social Media Images. I use this to generate social media images for my older posts. The usage is pretty simple. Upload the cfimage file to your server.  then drop the original image in a &lt;b&gt;enclosures&lt;/b&gt; folder, and create two new folders within the enclosures folder named &lt;b&gt;twitter&lt;/b&gt; and &lt;b&gt;facebook&lt;/b&gt;. In the socialMediaImagePath variable, put in the full image path for the type of image that you want to create. Go to the URL of your cfimage.cfm template with a browser, and the images will be saved underneath the  '/enclosures/facebook' or '/enclosures/twitter' folders. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!-- This is the only line that you should adjust ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset socialMediaImagePath = "D:\home\gregorysblog.org\wwwroot\enclosures\DSC_0518.JPG"&gt;<char code='0d'/><char code='0a'/>&lt;!--- Consume the createSocialMediaImages(socialMediaImagePath, socialMediaImageType) function ---&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'facebook', '')&gt;<char code='0d'/><char code='0a'/>&lt;cfset createSocialMediaImages(socialMediaImagePath, 'twitter', '')&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Other Social Media Validators&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;There are other tools for validation for different media platforms, such as &lt;a href="https://www.linkedin.com/post-inspector/"&gt;Twitters Post Inspector&lt;/a&gt;, and &lt;a href="https://www.pinterest.com/login/?next=http%3A%2F%2Fdevelopers.pinterest.com%2Ftools%2Furl-debugger%2F"&gt;Pinterest Rich Pin's Validator&lt;/a&gt; that I will cover at a different time.&lt;/a&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;Happy Coding!&lt;/b&gt;&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Plyr is now the default HTML5 media player in Galaxie Blog&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/blueMoonTrailer.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/blueMoonTrailer.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;videoType:.mp4&gt;&lt;/videoType&gt;<char code='0d'/><char code='0a'/>&lt;videoPosterImageUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg&gt;&lt;/videoPosterImageUrl&gt;<char code='0d'/><char code='0a'/>&lt;mediumVideoSourceUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4&gt;&lt;/mediumVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;largeVideoSourceUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4&gt;&lt;/largeVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCaptionsUrl:https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt&gt;&lt;/videoCaptionsUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCrossOrigin:true&gt;&lt;/videoCrossOrigin&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "View from a Blue Moon",<char code='0d'/><char code='0a'/>  "description": "See the sport of surfing as its never been captured before in John Florence and Blake Vincent Kueny's second signature release, this time in association with the award-winning film studio, Brain Farm.",<char code='0d'/><char code='0a'/>  "thumbnailUrl": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer1_1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer14_3.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/thumbnails/blueMoonTrailer16_9.jpg"<char code='0d'/><char code='0a'/>   ],<char code='0d'/><char code='0a'/>  "uploadDate": "2019-11-15",<char code='0d'/><char code='0a'/>  "duration": "PT3M03S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4",<char code='0d'/><char code='0a'/>  "embedUrl": "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h1&gt;&lt;b&gt;Plyr&lt;/b&gt;, a HTML5 media player, will be incorporated into the next Galaxie Blog version&lt;/h1&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Plyr, an open source HTML5 media player, is now the default media player in Galaxie Blog. Plyer will automatically render video or audio when Galaxie Blog finds supported content. To improve page performance, Galaxie Blog will also lazy load the media for you. Plyr is a simple, lightweight, accessible and customizable HTML5 media and audio player. It supports HTML Video, Audio, YouTube and Vimeo. It has support for video captions in multiple langauges, and has add revenue capabilities. For a full list of features, see the Plyr site at &lt;a href="https://github.com/sampotts/plyr"&gt;https://github.com/sampotts/plyr&lt;/a&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you have a Kendo UI license, you can optionally use the Kendo HTML 5 media player, however, the Kendo Media player is not as functional as Plyr, and it is not open source.&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Integrating Plyr is relatively trivial. I will show you the required steps to integrate Plyr into your own web-site or blog.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type": "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/17/Integrating-a-HTML5-Media-Player-using-Plyr"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/11/17/Integrating-a-HTML5-Media-Player-using-Plyr",<char code='0d'/><char code='0a'/>  "headline": "Integrating Plyr into your own website",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/mediaPlayer.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/mediaPlayer.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/mediaPlayer.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Plyr is a simple, lightweight, accessible and customizable HTML5 media and audio player. It supports HTML Video, Audio, YouTube and Vimeo. It has support for video captions in multiple languages, and has add revenue capabilities. What also excited me is that I could cast my videos to my own TV. This article will show you how to integrate Plyr into your own website.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-17",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-17"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Integrating Plyr into your own website&lt;h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: &lt;b&gt;if you're using Galaxie Blog, all that you need to do is upload your video and create the necessary &lt;a href="https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"&gt;XML Post Directives&lt;/a&gt;&lt;/b&gt; and Galaxie Blog will take care of the rest for you. This post is a technical how to article how I incorporated Plyr into Galaxie Blog.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Background&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I needed to integrate a new HTML5 Media Player into Galaxie Blog for several reasons. I was using the &lt;b&gt;Kendo UI HTML5 Media Player&lt;/b&gt; as it was integrated with the themes that I developed for &lt;b&gt;Galaxie Blog&lt;/b&gt;, however, it is not part of the Kendo Core open source distribution, and required other Galaxie Blog owners to have a Kendo UI license.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;It was my goal to integrate a new HTML player that was open source. I had thought to use Kendo's media player if the blog owner had a license, however, after integrating Plyr, I determined that Plyr offers quite a bit more functionality than the Kendo Media Player, and changed the default media player to Plyr- even if the blog owner had their own Kendo commercial license.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Why Plyr?&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Plyr is a simple, lightweight, accessible and customizable HTML5 media and audio player. It supports HTML Video, Audio, YouTube and Vimeo. It has support for video captions in multiple languages, and has add revenue capabilities. What also excited me is that I could cast my videos to my own TV. Plyr also supports &lt;b&gt;air play&lt;/b&gt;, and I wanted to be able to view the video's that I took on my own TV. &lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;How to integrate Plyr into your own website or blog&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Integrating Plyr is relatively trivial. I will show you the steps that I used to integrate Plyr into Galaxie Blog. This is meant as a general &lt;b&gt;how to document&lt;/b&gt;, if you run into problems or want more information, see the full documentation on the &lt;a href="https://github.com/sampotts/plyr"&gt;Plyr GitHub site&lt;a&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Clone or download Plyr at &lt;a href="https://github.com/sampotts/plyr"&gt;https://github.com/sampotts/plyr&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Upload all of the files found in the &lt;b&gt;dist&lt;/b&gt; folder to your own site&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Once the files have been uploaded, you will need to open the index document of your site and edit a few lines of code&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Load the javascript and css files in the head portion of your document like so:&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;head&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Plyr (our HTML5 media player) --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag src="/blog/common/libs/plyr/plyr.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Defer the plyr css. --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;link rel="stylesheet" href="/blog/common/libs/plyr/plyr.css" /&gt;<char code='0d'/><char code='0a'/>&lt;/head&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Find the portion of the page where you would like the video to be displayed, and copy and paste the code below into your own webpage. Pay attention to the &lt;b&gt;crossorigin argument&lt;/b&gt;. You need to &lt;b&gt;remove the crossorigin argument&lt;/b&gt; if your video is hosted on your own site. If the video is hosted elsewhere, such as the plyr cdn site, you'll need to put the crossorigin argument back into the code.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you have different sized videos, let's say one with 720p and 1080p, put both of the sources in there. The Plyr library will dynamically choose the most appropriate video size that can be rendered on your site. Of course, you can also put in one video source.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Video captions are supported and are optional.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;div id="mediaplayer" class="mediaPlayer"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;video<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>controls<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>crossorigin<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>playsinline<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>poster="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>id="player1"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>class="lazy"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!-- Video files --&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;source<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>type="video/mp4"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>size="720"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;source<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>type="video/mp4"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>size="1080"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!-- Caption files --&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;track<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>kind="captions"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>label="English"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>srclang="en"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>default<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;/video&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Finally, put the following script at the &lt;b&gt;very end&lt;/b&gt; of your code. You need to do this if you need to have more than &lt;b&gt;one&lt;/b&gt; video on your page. If you only have one video on your page, the script will not cause any errors, so I advise you to put this at the end of your page.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;InvalidTag type="deferjs"&gt;<char code='0d'/><char code='0a'/><char code='09'/>// Initialize the plyr.<char code='0d'/><char code='0a'/><char code='09'/>const players = Plyr.setup('video', { captions: { active: true } });<char code='0d'/><char code='0a'/><char code='09'/>// Expose player so it can be used from the console<char code='0d'/><char code='0a'/><char code='09'/>window.players = players;<char code='0d'/><char code='0a'/>&lt;/script&gt;<char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/> &lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This article was meant to quickly convey how to put a basic Plyr Media Player on your own web page. You'll definitely want to check out the &lt;a href="https://github.com/sampotts/plyr"&gt;Plyr GitHub website&lt;/a&gt; for more information.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you want to see how the video looks on Galaxie Blog, see &lt;a href="https://gregoryalexander.com/blog/2019/11/15/Plyr-a-HTML5-media-player-is-incorporated-into-Galaxie-Blog"&gt;Plyr, a HTML5 media player, is incorporated into Galaxie Blog&lt;/a&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In our next article, we'll see how &lt;b&gt;we can share our video to both Facebook and Twitter&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Thanks for reading!&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:How to share video and audio to Facebook and Twitter from your own website&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/battleStarGalactica.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/battleStarGalactica.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;videoType:.mp4&gt;&lt;/videoType&gt;<char code='0d'/><char code='0a'/>&lt;videoPosterImageUrl:https://gregoryalexander.com/blog/enclosures/battleStarGalactica.jpg&gt;&lt;/videoPosterImageUrl&gt;<char code='0d'/><char code='0a'/>&lt;mediumVideoSourceUrl:https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4&gt;&lt;/mediumVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCrossOrigin:false&gt;&lt;/videoCrossOrigin&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "BattleStar Galactica HD Trailer",<char code='0d'/><char code='0a'/>  "description": "Battlestar Galactica (BSG) is an American military science fiction television series, and part of the Battlestar Galactica franchise. The show was developed by Ronald D. Moore and executive produced by Moore and David Eick as a re-imagining of the 1978 Battlestar Galactica television series created by Glen A. Larson.",<char code='0d'/><char code='0a'/>  "thumbnailUrl": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/battleStarGalactica.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/battleStarGalactica.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/battleStarGalactica.jpg"<char code='0d'/><char code='0a'/>   ],<char code='0d'/><char code='0a'/>  "uploadDate": "2019-11-16",<char code='0d'/><char code='0a'/>  "duration": "PT4M16S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4",<char code='0d'/><char code='0a'/>  "embedUrl": "https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h1&gt;How to share video on Facebook and Twitter from your &lt;b&gt;own&lt;/b&gt; website&lt;/h1&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: &lt;b&gt;if you're using Galaxie Blog, all that you need to do is upload your file and create the necessary &lt;a href="https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"&gt;XML Post Directives&lt;/a&gt;&lt;/b&gt; and Galaxie Blog will take care of the rest for you. This post is a technical how to article how I incorporated Plyr into Galaxie Blog.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This is a continuation of my &lt;a href="https://gregoryalexander.com/blog/2019/10/28/How-to-make-the-perfect-social-media-sharing-image--part-1-Background"&gt;&lt;b&gt;how to make the perfect social media sharing image series&lt;/b&gt;&lt;/a&gt;, but here we focus on using video and audio to facebook and twitter instead of sharing images.&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a name="createVideo"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;h4&gt;Create the Video&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In this video, I used a Battlestar Galactica preview made as a university project made by Bob. The 2004 Battlestar Galactica was one of my favorite Sci-Fi TV shows.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The 2004 version of Battlestar Galactica is essentially a science fiction rendition of both the Genesis and Exodus stories; but the 10 plagues were instead caused by 6 different eerily human like robots created by humans. OK, enough of the Sci-Fi stuff; time to get back to the substance of this article here....&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Your own video should be created in mp4 format using the &lt;b&gt;progressive HDTV 720p format&lt;/b&gt;. The final size should be 1280 x 720 (2048K bitrate).&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://www.facebook.com/help/1534561009906955"&gt;Facebook video format guidelines&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/media/upload-media/uploading-media/media-best-practices"&gt;Twitter video format guidelines&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Creating the images used by the social media platform along with the &lt;b&gt;cover&lt;/b&gt; image&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a name="createImageFromVideo"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;We still need to create several images to serve as the &lt;b&gt;cover&lt;/b&gt; image. These images will cover the video until the video is loaded. If you reload this page, you will see a dark &lt;b&gt;Battlestar Galactica&lt;/b&gt; image that will &lt;i&gt;cover&lt;/i&gt; the video until the video is loaded. Once the video is loaded, the large arrow will show on top of the cover image.&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;After you have created the video, create an image of the video by pressing &lt;b&gt;print screen&lt;/b&gt;. We will use this to create the images that we'll use in the image meta tags and to create a cover image for the video&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Crop the images using the same ratio and size formats as we did in &lt;a href="https://gregoryalexander.com/blog/2019/10/29/How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right"&gt;part 2&lt;/a&gt;. The cover image for Facebook should be 1200x630, Twitter's dimensions are nearly the same at 1200x628. The cover image should be either .jpg or .png. WebP is not yet supported for social media sharing. I am providing resources and examples below.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/1/How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code"&gt;Using ColdFusion to create the images for you&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/2/How-to-make-the-perfect-social-media-sharing-image--part-4-Image-Examples"&gt;Image examples for Facebook and Twitter&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;Once you have created and uploaded the images to your site, we need to create the essential &lt;b&gt;open graph&lt;/b&gt; and &lt;b&gt;twitter tags&lt;/b&gt; and &lt;b&gt;validate them&lt;/b&gt; in our web page like we did here:<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags"&gt;Essential Meta Tags&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/4/How-to-make-the-perfect-social-media-sharing-image--part-6-Validation-tools-and-tips"&gt;Validate your images&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;You'll need to have a HTML5 capable Media Player on your website&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;It goes without saying that you'll also need to have a HTML5 Media Player to handle the video and audio formats on your own website. If you don't have a HTML5 media player, you can follow my steps to &lt;a href="https://www.gregoryalexander.com/blog/index.cfm"&gt;integrate Plyr on your own website&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a name="minimalPlyrPlayer"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;h4&gt;Creating a separate player instance for Twitter&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Unfortunately, Twitter can't read embedded video from your own web page. Buried in &lt;a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/player-card"&gt;Twitters player card documentation&lt;/a&gt;, you'll find that you also need to create a separate instance of your media player, and either point to the new instance, or an iframe. Importantly, the video must take up the full width of the page. This is how I solved this issue using &lt;b&gt;&lt;a href="https://github.com/sampotts/plyr"&gt;Plyr&lt;/a&gt;&lt;/b&gt;. If you don't have &lt;b&gt;Plyr&lt;/b&gt;, you'll have to use this approach with your own HTML5 media player.&lt;/p&gt; Here is the ColdFusion code that I used to create a new page with Plyr.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!doctype html&gt;<char code='0d'/><char code='0a'/>&lt;!--- Note: this is a proof of concept page. This template will be revised. ---&gt;<char code='0d'/><char code='0a'/>&lt;head&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Plyr (our HTML5 media player) --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag src="/blog/common/libs/plyr/plyr.js"&gt;&lt;/script&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Plyr css. --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;link rel="stylesheet" href="/blog/common/libs/plyr/plyr.css" /&gt;<char code='0d'/><char code='0a'/>&lt;/head&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;cfparam name="URL.videoUrl" default="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4"&gt;<char code='0d'/><char code='0a'/>&lt;cfparam name="URL.poster" default="https://gregoryalexander.com/blog/enclosures/twitter/blueMoonTrailer.jpg"&gt;<char code='0d'/><char code='0a'/>&lt;cfparam name="URL.crossOrigin" default="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;style&gt;<char code='0d'/><char code='0a'/>&lt;!--- This must be set to full screen! ---&gt;<char code='0d'/><char code='0a'/>.mediaPlayer video {<char code='0d'/><char code='0a'/><char code='09'/>width: 100% !important<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/style&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;div class="mediaPlayer"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;video<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>controls<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif URL.crossOrigin eq true&gt;crossorigin&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>playsinline<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>poster="&lt;cfoutput&gt;#URL.poster#&lt;/cfoutput&gt;"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>id="player1"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!-- Video files --&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!-- 1280x720 ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;source<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>src="&lt;cfoutput&gt;#URL.videoUrl#?id=#createUuid()#&lt;/cfoutput&gt;"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>type="video/mp4"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>size="720"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;/video&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This new instance of your player &lt;b&gt;&lt;u&gt;must be set to take the full width of the page&lt;/u&gt;&lt;/b&gt;. If it does not render the video using the full width of the page, Twitter will play the video at a much smaller resolution and the users will only see part of the video being played.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Creating the essential media meta tags&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Twitter tags&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following twitter tags must be set in the header of the page. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The first tag, the &lt;b&gt;twitter:player&lt;/b&gt; meta tag is a directive that tells Twitter that we want to use the &lt;b&gt;player card&lt;/b&gt;. When we are using &lt;b&gt;just an image&lt;/b&gt; and &lt;b&gt;not a video&lt;/b&gt;, we would use 'twitter:card' 'summary_large_image'&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The next 4 tags are similar, if not identical, to the tags that we've covered in &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags"&gt;How to make the perfect social media sharing image - part 5&lt;/a&gt;&lt;/b&gt;. The only difference is that here we are using the image of the video that you have created in a &lt;a href="#createImageFromVideo"&gt;previous step above&lt;/a&gt;.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;I am using ColdFusion's createUuid function to generate the id element in the twitter:image. This is a trick that I learned to refresh the twitter preview after the initial twitter preview has been made.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Twitter meta tags. --&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Note: we are using the twitter player card ---&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag name="twitter:card" content="player"&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag name="twitter:site" content="@https://gregoryalexander.com/blog"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag name="twitter:title" content="Plyr, a HTML5 media player, is incorporated into Galaxie Blog"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag name="twitter:description" content="Plyr is now the default HTML5 media player in Galaxie Blog"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- This is a picture taken of the video. The size of this image is 1200x628. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag name="twitter:image" content="https://gregoryalexander.com/blog/enclosures/twitter/blueMoonTrailer.jpg?id=E2DC9DE6-9B6A-9736-EE1FFFD42B90FEC3"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The next tags are used to tell Twitter how to play our fancy shiny video.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The "twitter:player" tag has the full URL to the &lt;b&gt;minimal&lt;/b&gt; HTML5 Media Player that &lt;a href="#minimalPlyrPlayer"&gt;we covered above&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;The "twitter:player:width" for the recommended &lt;a href="#createVideo"&gt;720p video&lt;/a&gt; is 1280 pixels.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;And the "twitter:player:height" for the recommended &lt;a href="#createVideo"&gt;720p video&lt;/a&gt; is 720 pixels.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Twitter player card meta types --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- The twitter video must be on a minimal page that just includes the video, and nothing else. --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="twitter:player" content="https://gregoryalexander.com/blog/videoPlayer.cfm?videoUrl=https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4&amp;poster=https://gregoryalexander.com/blog/enclosures/twitter/blueMoonTrailer.jpg&amp;id=E2DC9DE7-9749-288C-C9BA9EBE432D3203"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="twitter:player:width" content="1280"&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="twitter:player:height" content="720"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Facebook Open Graph Tags&lt;/h4&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;/p&gt;Facebooks' approach to video sharing is more streamlined than Twitter's. First, we don't need a minimal media player that plays the video in full page. Facebook will glean the source of the video found in the og:video tag.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The first 5 tags are identical to the &lt;a href="https://gregoryalexander.com/blog/2019/11/3/How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags"&gt;open graph meta tags used for images&lt;/a&gt;. The only difference is that I adeed an extra fb:app_id meta tag. This key is not required; I am using my own developer key here as I want facebook to know that this share is coming from a trusted source.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Open graph meta tags for Facebook. See notes. --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:image" content="https://gregoryalexander.com/blog/enclosures/facebook/blueMoonTrailer.jpg"&gt; <char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:site_name" content="Gregory's Blog" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:url" content="https://gregoryalexander.com/blog/2019/11/15/Plyr-a-HTML5-media-player-is-incorporated-into-Galaxie-Blog" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:title" content="Plyr, a HTML5 media player, is incorporated into Galaxie Blog" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:description" content="Plyr is now the default HTML5 media player in Galaxie Blog" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="fb:app_id" content="your facebook app id"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The next set of tags inform Facebook that we are sharing video.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The og:type tag indicates that we are using video.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The og:video:type tag indicates that we are using .mp4 as our video format. Facebook recommends .mp4 as its preferred video format.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The og:video, og:video:url, and og:video:secure_url should point to the same URL that is the source of the video. The video:type is not required, but I am including it in my code just to cover all of my bases here.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The og:video:width and height tags use the same width and hieght as Twitter using the  &lt;a href="#createVideo"&gt;720p video&lt;/a&gt; video format.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!-- Video meta types --&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:type" content="video.movie"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video:type" content="video/mp4"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video" content="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video:url" content="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video:secure_url" content="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video:width" content="1280"&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;InvalidTag property="og:video:height" content="720"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;You can see an example of how this video was shared by following me on twitter.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Happy coding!&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Integrating Plyr is relatively trivial. I will show you the required steps to integrate Plyr into your own web-site or blog.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/19/Plyr-Themes-now-match-Galaxie-Blogs-Kendo-UI-themes"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/11/19/Plyr-Themes-now-match-Galaxie-Blogs-Kendo-UI-themes",<char code='0d'/><char code='0a'/>  "headline": "Plyr Themes now match Galaxie Blog's Kendo UI themes",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/mediaPlayer.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/mediaPlayer.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/mediaPlayer.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "Kendo UI already has a built in media player, but it is only available if you have a commercial licsense. Telerik did not put its own media player into the open sourced distribution of Kendo Core. However, even if you have a license, I recommend using Plyr. The Pylr media player is far superior, and offers much more functionality, such as supporting captions, add revenue capabilities, and even has air-play support. It also supports Vimeo and YouTube.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-19",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-19"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;How to modify the Plyr theme&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you're a Galaxie Blog owner, you can change the primary colors of the Plyr controls. The &lt;a href="https://github.com/sampotts/plyr"&gt;Plyr media player&lt;/a&gt; is now themed for Galaxie Blog's themes, but for those who are running Galaxie Blog, you can further modify the Plyr themes by simply changing the .css in the &lt;b&gt;common/libs/plyr/customThemes&lt;/b&gt; folder to match your own created theme.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Simply open the plyr.css file in the common/libs/plyr/ folder, and search and replace both the RGB and Hexadecimal values.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The default Plyr .css file specifies a RGB value of 0,179,255, and the hexadecimal value is #00b3ff. There are 5 occurences of both &lt;b&gt;0,179,255&lt;/b&gt; and &lt;b&gt;00b3ff&lt;/b&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Plyr Themes now match Galaxie Blog's Kendo UI themes&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Kendo UI already has a built in media player, but it is only available if you have a commercial licsense. Telerik did not put its own media player into its open source distribution of Kendo Core. However, even if you have a license, I recommend using Plyr. The Pylr media player is far superior, and offers much more functionality, such as supporting captions, add revenue capabilities, and even has air-play support. It also supports Vimeo and YouTube.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I am ditching Kendo's media player and have modified Plyr to support the Kendo default less based themes. All that you need to do is incorporate the proper theme css file in the header after initializing the Plyr.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Getting the new Kendo UI Plyr Themes&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I have created a fork and saved my own Plyr GIT repository at &lt;a href="https://github.com/GregoryAlexander77/plyr/tree/master/themeCss"&gt;https://github.com/GregoryAlexander77/plyr/tree/master/themeCss&lt;/a&gt;. There is one .css file for every Kendo UI less based theme.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Happy theme... err, streaming!&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:If you're using ORM and ColdFusion, I found John Whish's ColdFusion Orm book to be an invaluable resource.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/><char code='09'/>"@context": "https://schema.org",<char code='0d'/><char code='0a'/><char code='09'/>"@type": "Book",<char code='0d'/><char code='0a'/><char code='09'/>"name": "ColdFusion ORM",<char code='0d'/><char code='0a'/><char code='09'/>"author": {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"@type": "Person",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"name": "John Whish"<char code='0d'/><char code='0a'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/>"url": "https://www.coldfusionormbook.com/",<char code='0d'/><char code='0a'/><char code='09'/>"aggregateRating": {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"@type": "AggregateRating",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"reviewCount": "1"<char code='0d'/><char code='0a'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/>"copyrightYear": "2011",<char code='0d'/><char code='0a'/><char code='09'/>"description": "In my opinion ColdFusion 9 is the biggest leap forward in developing applications since ColdFusion MX6.1. Why? Well, ColdFusion 9 comes with the Hibernate Object Relational Mapper (ORM) library baked in. In short, this means that you can quickly build powerful, database driven applications without having to write lots of code to handle interaction with the database. This book is a guide to developing applications using ColdFusion ORM. Starting with the basics before moving on to more complex features, this book is for experienced developers as well as beginners.",<char code='0d'/><char code='0a'/><char code='09'/>"genre": "ColdFusion Orm",<char code='0d'/><char code='0a'/><char code='09'/>"inLanguage": "en-US",<char code='0d'/><char code='0a'/><char code='09'/>"isFamilyFriendly": "true",<char code='0d'/><char code='0a'/><char code='09'/>"workExample": [{<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"@type": "Book",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"isbn": "B009ANO9GY",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"bookEdition": "1st Edition",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"bookFormat": "https://schema.org/Paperback",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>"potentialAction": {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>"@type": "ReadAction",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>"expectsAcceptanceOf": {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"@type": "Offer",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"Price": 29.64,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"priceCurrency": "USD",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"eligibleRegion": {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"@type": "Country",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"name": "US"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>"availability": "https://schema.org/InStock"<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/>}]<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;&lt;a href="https://www.coldfusionormbook.com/"&gt;ColdFusion ORM&lt;/a&gt;, a fantastic book by John Whish&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Background&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I needed to learn ColdFusion ORM as ORM supports all of the modern databases that want Galaxie Blog to be able to support. I don't want to have to incorporate different SQL logic for every database. Coding everything by hand would be an immense task, and would be problematic to test. Using ColdFusion ORM would solve this dilemma and I could use a single codebase that would automatically translate the ORM logic across various database platforms. However, learning anything new that has such a large scope is a daunting task.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Enter John Whish's &lt;a href="https://www.coldfusionormbook.com/"&gt;ColdFusion ORM&lt;/a&gt; book to the rescue!&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In order to embark on my re-coding effort, I ordered and read a ColdFusion ORM book written by John Whish and found his book to be an invaluable resource. The book is concise and well laid out. It starts by answering simple questions, such as &lt;b&gt;What is ORM?&lt;/b&gt; and provides a general background. His book shows you &lt;b&gt;how to configure ORM&lt;/b&gt;, explains that ORM is used for &lt;b&gt;CRUD operations&lt;/b&gt;, and then gets into the meaty topics such as &lt;b&gt;ORM relationships&lt;/b&gt; and &lt;b&gt;HQL&lt;/b&gt;. In the final part of the book John discusses &lt;b&gt;validation&lt;/b&gt;, &lt;b&gt;caching&lt;/b&gt; and provides &lt;b&gt;helpful tips&lt;/b&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you're using ORM and ColdFusion, I found his book to be an invaluable resource.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Related Resources&lt;/h4&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://southofshasta.com/blog/book-review-coldfusion-orm/"&gt;Book Review: ColdFusion ORM - South of Shasta&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://www.bennadel.com/blog/2278-coldfusion-orm-a-guide-to-developing-applications-using-coldfusion-orm-by-john-whish.htm"&gt;ColdFusion ORM: A Guide To Developing Applications Using ColdFusion ORM By John Whish - review by Ben Nadel&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href= https://blog.simplicityweb.co.uk/44/coldfusion-orm-by-john-whish"&gt;As simple as possible, as complex as necessary - review by Julian Halliwell&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Solving a cryptic ColdFusion ORM Error - java.lang.Integer, etc.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/11/28/ColdFusion-ORM-Error--javalangInteger-etc"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/11/28/ColdFusion-ORM-Error--javalangInteger-etc",<char code='0d'/><char code='0a'/>  "headline": "Solving a cryptic ColdFusion ORM Error - java.lang.Integer",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/coldFusionOrm.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/coldFusionOrm.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/coldFusionOrm.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "When importing data from the original BlogCfc database, I received a very cryptic ColdFusion ORM error coldfusion orm java.lang.String error error when trying to set the value of a foreign key. It was trying to set an int, and assumed that ColdFusion somehow was casting the int to a string. I manually set the value to an int, and still received the error, but this time received Coldfusion orm java.lang.Int error. This was perplexing. This should have worked as the foreign key expected an int.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-11-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-11-28"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Coldfusion orm java.lang.Int error&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Background&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I ran into an interesting error when working on converting Galaxie Blog's database to use ORM.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/> &lt;p&gt;When importing data from the original database, I received a very cryptic ColdFusion ORM error &lt;b&gt;coldfusion orm java.lang.String error&lt;/b&gt; error when trying to set the value of a foreign key. It was trying to set an int, and assumed that ColdFusion somehow was casting the &lt;b&gt;int&lt;/b&gt; to a &lt;b&gt;string&lt;/b&gt;. I manually set the value to an int, and still received the error, but this time received &lt;b&gt;Coldfusion orm java.lang.Int error&lt;/b&gt;. This was perplexing. This should have worked as the foreign key expected an &lt;b&gt;int&lt;/b&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Relevant property of BlogRef&lt;/h4&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="Users" persistent="true" table="Users" output="no" hint="ORM logic for the new Users table"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="UserId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many users per blog. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="BlogRef" ormtype="int" fieldtype="many-to-one" cfc="Blog" fkcolumn="BlogRef"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;To try to understand what was going on- I kept on trying to change the datatype, but no matter what I set the datatype to, I would receive the same cryptic error. The only difference in the error is that the &lt;b&gt;datatype java.lang.&lt;u&gt;thisDataType&lt;/u&gt; error&lt;/b&gt; would change.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Even hardcoding the value to an int causes an error:&lt;/h4&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Load the entity. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset UserDbObj = entityNew("Users")&gt;<char code='0d'/><char code='0a'/>&lt;!--- Use the entity objects to set the data. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset UserDbObj.setBlogRef(1)&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Results in: &lt;b&gt;Coldfusion orm java.lang.Int error&lt;/b&gt;&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;What was even more perplexing is that I had successfully used the same code in previous blocks that had worked! I have just started down the ColdFusion ORM path and wondered what the hell have I gotten myself into.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;After much research, it turns out that either ColdFusion ORM or Hibernate wants an &lt;b&gt;object&lt;/b&gt; passed to a foreign key. Often times, ColdFusion may always raise this cryptic error if the value is set in any other way!&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following code &lt;b&gt;finally solved&lt;/b&gt; this perplexing error:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Load the blog table and get the first record (at this time there only should be one record). This will pass back an object with the value of the blogId. This is needed as the setBlogRef is a foreign key and for some odd reason ColdFusion or Hibernate must have an object passed as a reference instead of a hardcoded value. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset BlogRefObj = entityLoadByPK("Blog", 1)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!--- Load the entity. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset UserDbObj = entityNew("Users")&gt;<char code='0d'/><char code='0a'/>&lt;!--- Use the BlogRefObj entity object to set the data. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset UserDbObj.setBlogRef( BlogRefObj )&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Further Reading&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;a href="https://stackoverflow.com/questions/45800432/how-do-i-store-an-integer-using-coldfusion-orm/45984417#45984417"&gt;How do I store an integer using ColdFusion Orm? - by James Cushing&lt;/a&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:How to make a round Kendo UI button&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/12/11/How-to-make-a-round-Kendo-UI-button"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/12/11/How-to-make-a-round-Kendo-UI-button",<char code='0d'/><char code='0a'/>  "headline": "How to make a round Kendo UI button",<char code='0d'/><char code='0a'/>  "articleBody" : "There are plenty of posts on the web showing you how to make a typical square button with Kendo UI, but I have not seen a post describing how to make a round Kendo button. Since there are no other posts that cover this, I had to learn this through trial and error.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-12-13",<char code='0d'/><char code='0a'/>  "dateModified": "2019-12-13"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;How to make a round button with Kendo UI&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Background&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;There are plenty of posts on the web showing you how to make a typical square button with Kendo UI, but I have not seen a post describing how to make a round Kendo button. Since there are no other posts that cover this, I had to learn this through trial and error.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you're using Kendo, it is a good idea to try to use as many native Kendo widgets as possible as these widgets will be incorporated into the chosen Kendo theme. The reasons for this are simple, native Kendo widgets will perform and look the same and inherit the properties of the selected theme.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Border Radius 50% can make nearly every element round, including a normal Kendo button.&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Using the &lt;b&gt;border-radius: 50%&lt;/b&gt; CSS can make nearly any HTML into a circle. Indeed, it can also make a normal Kendo UI button into a circle. However, on the desktop, Kendo UI's button also has an outline around its buttons, and the bottom part of the outline is larger than the upper part making the button look &lt;b&gt;weird&lt;/b&gt;. Let's take a look:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>#primaryTextButton {<char code='0d'/><char code='0a'/><char code='09'/>height: 35px;<char code='0d'/><char code='0a'/><char code='09'/>width: 35px;<char code='0d'/><char code='0a'/><char code='09'/>border-radius: 50%;<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;button id="primaryTextButton" class="k-primary"&gt;i&lt;/button&gt; looks OK with mobile- but not so good on the desktop.<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;button id="primaryTextButton" class="k-primary" style="height: 35px; width: 35px; border-radius: 50%;"&gt;i&lt;/button&gt; This button's outline looks weird. It only gets worse when the button becomes smaller.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;A different approach&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The code below is one method to make a round Kendo UI button widget using inline code. The &lt;i&gt;id&lt;/i&gt; element can be anything. Here I am using the button to expand the comments for Galaxie Blog, so I am using the id of &lt;i&gt;commentControl&lt;/i&gt;. The collapse class is also not important here.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;What is important is the &lt;b&gt;k-i-sort-desc-sm&lt;/b&gt; class, and &lt;b&gt;k-primary&lt;/b&gt;. The &lt;b&gt;k-i-sort-desc-sm&lt;/b&gt; is the Kendo UI icon that is being displayed, and the &lt;b&gt;k-primary&lt;/b&gt; class indicates that the color of the button must be the primary color of the selected theme.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The width and height of the button are set by the width and height property, and the &lt;b&gt;border-radius: 50%&lt;/b&gt; argument takes the width and height properties to make a circular button image.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;span id="commentControl" class="collapse k-icon k-i-sort-desc-sm k-primary" style="width: 35px; height:35px; border-radius: 50%;"&gt;&lt;/span&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;span id="commentControl" class="collapse k-icon k-i-sort-desc-sm k-primary" style="width: 35px; height:35px; border-radius: 50%;"&gt;&lt;/span&gt; This Kendo button takes on the primary color of the selected theme, and without the funny outline, it looks much better!</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Add functionality to a post with a Galaxie Blog Post Directive&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives",<char code='0d'/><char code='0a'/>  "headline": "Add functionality to a Galaxie Blog post with a XML Post Directive",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/xmlPostDirective.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/xmlPostDirective.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/xmlPostDirective.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "BlogCfc used what I call a XML Post Directive to deliver certain functionality to a given blog post, such as presenting code. BlogCfc also used the more tag to condense a post on the main site that aborted the page at a certain position and created a button that navigates the reader to the full post. Since Galaxie Blog 1.15, I used a handful of additional XML Post Directives to embed optional meta tag information, such as embedding video, and to bypass ColdFusions' Global Script Protection that is used by my hosting provider. Once I integrate ORM, I'll eventually use an interface and code editor to do this without the XML Post Directives, but in the meantime I am using this approach.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-12-14",<char code='0d'/><char code='0a'/>  "dateModified": "2019-12-14"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;cfincludeTemplate:/blog/includes/postContent/postDirective/postDirective.cfm&gt;&lt;/cfincludeTemplate&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;youTubeUrl:https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be&gt;&lt;/youTubeUrl&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:How to embed a video from Vimeo on Galaxie Blog&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/cambell.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/cambell.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "Uprising",<char code='0d'/><char code='0a'/>  "description": "This video is an amazing performance by Chris Botti and Carolyn Campbell playing Kashmir to the violin.",<char code='0d'/><char code='0a'/>  "uploadDate": "2019-11-16",<char code='0d'/><char code='0a'/>  "duration": "PT6M05S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be",<char code='0d'/><char code='0a'/>  "embedUrl": "https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Just like Vimeo, you can embed a YouTube video easily with Galaxie Blog.&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Simply &lt;b&gt;grab the video URL from YouTube&lt;/b&gt;, and copy and paste the URL into the &lt;a href="https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"&gt;YouTube URL xml post directive&lt;/a&gt; like so:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This snippet of code will initialize our Plyr and it will play the YouTube video file within Galaxie Blog. The video will be &lt;b&gt;lazy loaded&lt;/b&gt;, and will only load once the page loads and the video is downloaded to the client.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;youTubeUrl:https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be&gt;&lt;/youTubeUrl&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This video is an amazing performance by Chris Botti and Carolyn Campbell playing Kashmir to the violin. The video source is from You Tube at &lt;a href="https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be"&gt;https://www.youtube.com/watch?v=LXt-hDDiEAQ&amp;feature=youtu.be&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;As with all Galaxie Blog video's, the video will automatically play when your looking at an individual post, and requires the user to click on the play button when your looking at the post from the main blog page. You can easily change this behavior by editing the code, or by making a suggestion here.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: the xml post directives will be deprecated in a later version&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;vimeoVideoId:343068761&gt;&lt;/vimeoVideoId&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:How to embed a video from Vimeo on Galaxie Blog&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/embedVimeo.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/embedVimeo.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "Uprising",<char code='0d'/><char code='0a'/>  "description": "-N- Uprising" is an experimental video that evokes the cycles of nature. The video highlights several species of insects and flowers on colored backgrounds.",<char code='0d'/><char code='0a'/>  "thumbnailUrl": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/embedVimeo.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/embedVimeo.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/embedVimeo.jpg"<char code='0d'/><char code='0a'/>   ],<char code='0d'/><char code='0a'/>  "uploadDate": "2019-11-16",<char code='0d'/><char code='0a'/>  "duration": "PT4M29S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://vimeo.com/343068761",<char code='0d'/><char code='0a'/>  "embedUrl": "https://vimeo.com/343068761"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;It is trivial to embed a video in your blog post from Vimeo using Galaxie Blog.&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Simply &lt;b&gt;grab the video Id from Vimeo&lt;/b&gt;, and copy and paste the id into the &lt;a href="https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"&gt;vimeo video xml post directive&lt;/a&gt; like so:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;vimeoVideoId:343068761&gt;&lt;/vimeoVideoId&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This snippet of code will initialize our Plyr and it will play the vimeo video file within Galaxie Blog. The video will be &lt;b&gt;lazy loaded&lt;/b&gt;, and will only load once the page loads and the video is downloaded to the client.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;As with all Galaxie Blog video's, the video will automatically play when your looking at an individual post, and requires the user to click on the play button when your looking at the post from the main blog page. You can easily change this behavior by editing the code, or by making a suggestion here.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: the xml post directives will be deprecated in a later version&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Playing videos using Galaxie Blog&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;facebookImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/facebook/battleStarGalactica.jpg&gt;&lt;/facebookImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;twitterImageUrlMetaData:https://gregoryalexander.com/blog/enclosures/twitter/battleStarGalactica.jpg&gt;&lt;/twitterImageUrlMetaData&gt;<char code='0d'/><char code='0a'/>&lt;videoType:.mp4&gt;&lt;/videoType&gt;<char code='0d'/><char code='0a'/>&lt;videoPosterImageUrl:https://gregoryalexander.com/blog/enclosures/battleStarGalactica.jpg&gt;&lt;/videoPosterImageUrl&gt;<char code='0d'/><char code='0a'/>&lt;mediumVideoSourceUrl:https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4&gt;&lt;/mediumVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCrossOrigin:false&gt;&lt;/videoCrossOrigin&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context": "https://schema.org",<char code='0d'/><char code='0a'/>  "@type": "VideoObject",<char code='0d'/><char code='0a'/>  "name": "BattleStar Galactica HD Trailer",<char code='0d'/><char code='0a'/>  "description": "Battlestar Galactica (BSG) is an American military science fiction television series, and part of the Battlestar Galactica franchise. The show was developed by Ronald D. Moore and executive produced by Moore and David Eick as a re-imagining of the 1978 Battlestar Galactica television series created by Glen A. Larson.",<char code='0d'/><char code='0a'/>  "thumbnailUrl": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/battleStarGalactica.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/battleStarGalactica.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/battleStarGalactica.jpg"<char code='0d'/><char code='0a'/>   ],<char code='0d'/><char code='0a'/>  "uploadDate": "2019-12-16",<char code='0d'/><char code='0a'/>  "duration": "PT4M16S",<char code='0d'/><char code='0a'/>  "contentUrl": "https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4",<char code='0d'/><char code='0a'/>  "embedUrl": "https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;How to integrate your own video content to Galaxie Blog&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Galaxie Blog supports the following video types: .mp3 , .mp4, .ogg, .ogv and .webm. If you have the video in another legacy format, you'll need to convert it to a modern format to play it in Galaxie Blog.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you have a supported video format, you can either upload the video by clicking on the &lt;b&gt;Add Enclosure&lt;/b&gt;, or by using the &lt;b&gt;file uploader&lt;/b&gt; in the Galaxie Blog administrative interface. However, the &lt;b&gt;Add Enclosure&lt;/b&gt; method will only work if the video is smaller than around 3MB.&lt;/b&gt;. You can use your own FTP tools to upload the video if that is what you prefer.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;You can also host videos that are stored on a different server, but you'll need to specify the &lt;b&gt;cross-origin true&lt;/b&gt; argument using a Galaxie Blog Post Directive.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Though completely optional, if you want the video's to be optimized for different client devices, just like responsive images, you can use up to three videos with different sizes. Galaxie Blog supports 576p, 720p, and High Definition 1080p video formats.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Once you have the video(s) on a server, you will need to use the proper &lt;a href="https://gregoryalexander.com/blog/2019/12/14/Galaxie-Blog-XML-Post-Directives"&gt;URL xml post directives&lt;/a&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following Galaxie Blog Post XML Directives were used to play the video that you see on top of this blog post.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;videoType&lt;/b&gt; directive is necessary. Here I set it to ".mp4"&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;videoPosterImageUrl&lt;/b&gt; directive completely optional. This is used to 'cover' the video with an image until it is played. I used an image of the video to cover the video and specified the URL.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Since my video format is 720p, I used the &lt;b&gt;mediumVideoSourceUrl&lt;/b&gt; directive.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;You can use one argument, two, or all three to have a &lt;b&gt;responsive video&lt;/b&gt;. You will need at least &lt;b&gt;one&lt;/b&gt; argument for the video to play&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Use &lt;b&gt;smallVideoSourceUrl&lt;/b&gt; for 576p&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Use &lt;b&gt;mediumVideoSourceUrl&lt;/b&gt; for 720p&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Use &lt;b&gt;largeVideoSourceUrl&lt;/b&gt; for 1080p&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;li&gt;Or use all three arguments if you want the video to be responsive&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;This video is hosted on the same domain, so I used &lt;b&gt;false&lt;/b&gt; for the cross-origin&lt;/b&gt; argument. If you are integrating a video that is hosted on another server, set the videoCrossOrigin to true.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This snippet of code will initialize our Plyr and it will play the video file within Galaxie Blog. The video will be &lt;b&gt;lazy loaded&lt;/b&gt;, and will only load once the page loads and the video is downloaded to the client.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;videoType:.mp4&gt;&lt;/videoType&gt;<char code='0d'/><char code='0a'/>&lt;videoPosterImageUrl:https://gregoryalexander.com/blog/enclosures/battleStarGalactica.jpg&gt;&lt;/videoPosterImageUrl&gt;<char code='0d'/><char code='0a'/>&lt;mediumVideoSourceUrl:https://gregoryalexander.com/blog/enclosures/BattlestarGalacticaHDTrailer.mp4&gt;&lt;/mediumVideoSourceUrl&gt;<char code='0d'/><char code='0a'/>&lt;videoCrossOrigin:false&gt;&lt;/videoCrossOrigin&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;As with all Galaxie Blog video's, the video will automatically play when your looking at an individual post, and requires the user to click on the play button when your looking at the post from the main blog page. You can easily change this behavior by editing the code, or by making a suggestion here.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: the xml post directives will be deprecated in a later version&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In this 3 part series; I will show you how to create new tables into an existing database and how to populate the records into the new tables using ColdFusion ORM. I will be using real examples and show you the steps that I used in Galaxie Blog when converting the original BlogCfc database into a new set of tables. Here we will introduce CF-ORM, cover alternatives, and discuss solutions that were used to overcome some common pitfalls when using CF-ORM.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/12/28/Introducing-ColdFusion-ORM"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/12/28/Introducing-ColdFusion-ORM",<char code='0d'/><char code='0a'/>  "headline": "Introducing ColdFusion ORM",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/ormPart1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/ormPart1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/ormPart1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In this 3 part series; I will show you how to create new tables into an existing database and how to populate the records into the new tables using ColdFusion ORM. I will be using live examples and show you the steps that I used in Galaxie Blog when converting the original BlogCfc database into a new set of tables. Here we will introduce CF-ORM, cover alternatives, and discuss solutions that were used to overcome some common pitfalls when using CF-ORM.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-12-14",<char code='0d'/><char code='0a'/>  "dateModified": "2019-12-14"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h3&gt;ColdFusion ORM can be used to create new tables into an existing database but is not without challenges.&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Introducing ColdFusion ORM&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In this 3 part series; I will show you how to create new tables into an existing database and how to populate the records into the new tables using ColdFusion ORM. I will be using live examples and show you the steps that I used in &lt;a href="https://www.gregoryalexander.com/blog/"&gt;Galaxie Blog&lt;/a&gt; when converting the original BlogCfc database into a new set of tables&lt;a href="https://www.gregoryalexander.com/blog/"&gt;&lt;/a&gt;. Here we will introduce CF-ORM, cover alternatives, and discuss solutions that were used to overcome some common pitfalls when using CF-ORM. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;When should ColdFusion ORM be used?&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;CF-ORM may be a viable solution when you want to have the widest support of databases for your application. I am incorporating CF-ORM into &lt;a href="https://www.gregoryalexander.com/blog/"&gt;Galaxie Blog&lt;/a&gt; as I want the end-users to be able to use their own database of choice. Since version 9, CF-ORM is already included in ColdFusion, there is nothing new needed to be loaded, and CF-ORM should support &lt;b&gt;any modern database&lt;/b&gt;. Another benefit of using CF-ORM, or any ORM product, is that the database logic is decoupled from the business logic of the application. I can't understate this benefit enough- this approach is vastly more efficient than having to rewrite the SQL queries in multiple areas of the business logic every time you add or remove a column from the database. I created my own CF-ORM package for SQL Server for this very reason.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;ColdFusion ORM Supported Databases&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;table id="supportedDatabases"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;thead&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="make"&gt;RDBMS&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="model"&gt;ORM Dialect&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/thead&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;tbody&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Apache Derby&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Derby&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Informix&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Informix&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;IBM DB2&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;DB2&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;IBM DB2 AS400&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;DB2AS400&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;IBM DB2 OS390&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;DB2OS390&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Postgre SQL&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;PostgreSQL&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Microsoft Access&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MicrosoftSQLServer&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Microsoft SQL Server&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MicrosoftSQLServer&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQL&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQL&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQL InnoDB&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQLwithInnoDB&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQL MyISAM&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;MySQLwithMyISAM&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle 8i&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle8i&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle 9i&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle9i&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle 10g&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Oracle10g&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Sybase&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Sybase&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Sybase Anywhere&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;SybaseAnywhere&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/tbody&gt;<char code='0d'/><char code='0a'/>&lt;/table&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="deferjs"&gt;<char code='0d'/><char code='0a'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$("#supportedDatabases").kendoGrid({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>sortable: true<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;ColdFusion ORM Supported Databases with a Custom Dialect&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following databases should be supported as long as you provide the custom dialect using the fully qualified class name.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;table id="customDialect"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;thead&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="make"&gt;RDBMS&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="model"&gt;ORM Dialect&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/thead&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;tbody&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Oracle (any version)&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.OracleDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Oracle 11g&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.Oracle10gDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Microsoft SQL Server 2000&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.SQLServerDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Microsoft SQL Server 2005&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.SQLServer2005Dialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Microsoft SQL Server 2008&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.SQLServer2008Dialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;SAP DB&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.SAPDBDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Informix&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.InformixDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Hypersonic SQL&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.HSQLDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;H2 Database&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.H2Dialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Ingres&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.IngresDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Progress&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.ProgressDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Mckoi SQL&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.MckoiDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Interbase&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.InterbaseDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Pointbase&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.PointbaseDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;FrontBase&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.FrontbaseDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>    &lt;tr&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;Firebird&lt;/td&gt;<char code='0d'/><char code='0a'/>      &lt;td&gt;org.hibernate.dialect.FirebirdDialect&lt;/td&gt;<char code='0d'/><char code='0a'/>    &lt;/tr&gt;<char code='0d'/><char code='0a'/>&lt;/tbody&gt;<char code='0d'/><char code='0a'/>&lt;/table&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="deferjs"&gt;<char code='0d'/><char code='0a'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$("#customDialect").kendoGrid({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>sortable: true<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;However, ColdFusion ORM is not without its challenges&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;While having CF-ORM support all database platforms is terrific; using CF-ORM may lock you into using a particular ColdFusion version. CF-ORM functionality changes depending upon the version of ColdFusion. CF-ORM on ColdFusion 9 is quite a bit different than CF-ORM on ColdFusion 2016. So, while you may be supporting a wide variety of database platforms, you may be stuck on a particular ColdFusion version. There are also differences between CF-ORM between ColdFusion, and its open-source sister, &lt;a href="https://lucee.org/"&gt;Lucee&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Also, CF-ORM has a slew of other challenges. Error reporting is confusing. Since CF-ORM is built upon &lt;a href="https://hibernate.org/orm/"&gt;Hibernate&lt;/a&gt;, it does not have the error messages that we typically expect out of a ColdFusion product. Error messages are not always available and are often confusing. The documentation is sparse, and at times misleading. Take for example the &lt;a href="https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-tags/tags-p-q/cfproperty.html"&gt;&lt;/a&gt;cfproperty&lt;/a&gt; documentation on the Adobe site. Most of the properties are not documented at all. Two-thirds of the description columns are blank.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Additionally, if you dig around and find documentation for a certain feature, it may not work at all! For example, I wanted to eliminate the database constraint for some of the database columns using the constrained="false" argument. Adobe's own &lt;a href="https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-tags/tags-p-q/cfproperty.html"&gt;cfproperty&lt;/a&gt; documentation mentioned the constrained property, but gave no description. Finally, I was able to find some documentation on the constrained property on &lt;a href="https://cfdocs.org/cfproperty"&gt;another site&lt;/a&gt;, however, no matter what I did, I could not get the argument to work. I also went to the ORM channel on &lt;a href="https://cfml.slack.com/"&gt;cfslack&lt;/a&gt; to ask for help, and no one knew how to get it to work.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Finally, another issue is that just like ColdFusion UI, CF-ORM is tied to Adobe ColdFusion and you're limited in what changes you can make. You'll have to wait until a new ColdFusion version to come out before you can upgrade to a new version of Hibernate.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;ColdFusion ORM alternatives&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;While I have not used them yet myself, I have heard good things about &lt;a href="https://www.ortussolutions.com/blog/quick-v200-released"&gt;Quick&lt;/a&gt; and &lt;a href="https://github.com/coldbox-modules/cborm"&gt;cbOrm&lt;/a&gt;. Quick is written in ColdFusion and it handles errors much better than CF-ORM. cbOrm is an extension of CF-ORM, and Ortus has added a lot of functionality and flexibility to the underlying Hibernate engine that CF-ORM uses. I won't cover either Quick or cbOrm here, but they are both worth recommending if you want to avoid CF-ORM, especially if you're already using the ColdBox framework.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Since my project requires that I support as many database platforms possible, and I don't want to include another library, such as ColdBox, I am using CF-ORM and will show you some of the solutions that I used to overcome common CF-ORM pitfalls.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In the next article, we'll jump in and look at the code....&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In part 2 of this 3 part series; we will discuss how to configure ColdFusion ORM, using ColdFusion persistent CFC's to create the tables and relationships, and have an in-depth discussion about the types of relationships used in ColdFusion ORM. &gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/12/28/Understanding-ColdFusion-ORM-Relationships"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/12/28/Understanding-ColdFusion-ORM-Relationships",<char code='0d'/><char code='0a'/>  "headline": "Introducing ColdFusion ORM",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/ormPart2.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/ormPart2.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/ormPart2.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody" : "In part 2 of this 3 part series; we will discuss how to configure ColdFusion ORM, using ColdFusion persistent CFC's to create the tables and relationships, and have an in-depth discussion about the types of relationships used in ColdFusion ORM.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-12-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-12-28"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Configuring ColdFusion ORM&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The first thing we need to do in order to use CF-ORM is to place the following code in the Application.cfc template.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The first line of code below directs ColdFusion to reload CF-ORM every time the page is refreshed.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;While initially setting up CF-ORM, you will want to include this argument in your code&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Once everything is ready for production, you should remove this line of code as consumes more resources&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;ormenabled&lt;/b&gt; setting enables CF-ORM.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;dbcreate = "update"&lt;/b&gt; argument is used to have CF-ORM create the database tables and relationships for you.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;cfclocation&lt;/b&gt; argument is optional and it used when you keep all of your persistent cfc's in a particular location. Setting the cfclocation argument should also marginally improve performance as without it ColdFusion will search the entire folder structure to find any persistent cfc's.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset ORMReload()&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset this.ormenabled = "true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset this.datasource = "GregorysBlog"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Allow ColdFusion to update and create the tables when they do not already exist. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset this.ormSettings.dbcreate = "update"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfset this.ormSettings.cfclocation = expandPath("/common/cfc/db/model/")&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Creating the tables and the relationships using persistent CFC's&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The code below is a persistent CFC that will be used to create the table and its relationships. Like other CFC's, this CFC has the initial component declaration with the addition of the persistent argument which is set to true, and the properties map the column names. We'll go over the relationships in-depth later in the article.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Examining the PostId<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;The PostId is our primary key, it is annotated with the &lt;b&gt;fieldtype="id"&lt;/b&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>  &lt;li&gt;&lt;b&gt;generator&lt;/b&gt; determines how to increment the primary key<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>  &lt;li&gt;See &lt;a href="https://helpx.adobe.com/coldfusion/developing-applications/coldfusion-orm/define-orm-mapping/map-the-properties.html"&gt;Map the properties&lt;/a&gt; for more information&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;The &lt;b&gt;ormtype&lt;/b&gt; is the datatype. These are generic values since CF-ORM is database agnostic. If you want finer control, you can substitute the ormtype with &lt;b&gt;sqltype&lt;/b&gt;.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;&lt;b&gt;length&lt;/b&gt; specifies the column length. The default length for string datatypes is 255 characters.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;I will not cover the details of the other properties here, refer to &lt;a href="https://helpx.adobe.com/coldfusion/developing-applications/coldfusion-orm/define-orm-mapping/map-the-properties.html"&gt;Map the properties&lt;/a&gt; for more information.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="Post" persistent="true" table="Post" output="no" hint="ORM logic for the new Post table"&gt;<char code='0d'/><char code='0a'/>&lt;cfproperty name="PostId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many posts for one blog. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="BlogRef" ormtype="int" fieldtype="many-to-one" cfc="Blog" fkcolumn="BlogRef" cascade="all"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="UserRef" ormtype="int" fieldtype="many-to-one" cfc="Users" fkcolumn="UserRef" cascade="all"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- The ThemeRef is optional. I am not going to make a relationship here as it will make a required constraint. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="ThemeRef" ormtype="int"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostUuid" ormtype="string" length="35" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostAlias" ormtype="string" length="100" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Title" ormtype="string" length="125" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Headline" ormtype="string" length="110" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Body"  ormtype="string" sqltype="varchar(max)" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MoreBody" ormtype="string" sqltype="varchar(max)" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="AllowComment" ormtype="boolean" default="true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="NumViews" ormtype="int" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Mailed" ormtype="boolean" default="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Released" ormtype="boolean" default="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/>&lt;a href="#name"&gt;&lt;/a&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;The cfproperty &lt;b&gt;name&lt;/b&gt; argument&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The cfproperty name argument can either be the name of the &lt;b&gt;physical column&lt;/b&gt; in the database, the name of a &lt;b&gt;CFC&lt;/b&gt;, or a &lt;b&gt;reference to a new object&lt;/b&gt; that will not be placed into the database. We'll cover this important aspect later in the post when we discuss the fkcolumn argument.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;The &lt;b&gt;field type&lt;/b&gt; argument maps the relationships&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;CF-ORM has the following relationships: one-to-one: one-to-many: many-to-one: and many-to-many.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The &lt;b&gt;order&lt;/b&gt; of the relationship keywords&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;When you map a relationship, the keyword (one or many) to the &lt;b&gt;left&lt;/b&gt; is applied to the cfc that you're working on- and the keyword to the &lt;b&gt;right&lt;/b&gt; is applied to the table that you're mapping to.&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;p&gt;For example, in the Post.cfc, the &lt;b&gt;many-to-one&lt;/b&gt; relationship created below signifies that there are &lt;b&gt;many&lt;/b&gt; posts (the CFC that is being worked on) for &lt;b&gt;one&lt;/b&gt; Blog (the table that I am making a reference to).&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfproperty name="BlogRef" ormtype="int" fieldtype="many-to-one" cfc="Blog" fkcolumn="BlogRef" cascade="all"&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Understanding the &lt;b&gt;one&lt;/b&gt; and the &lt;b&gt;many&lt;/b&gt;&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;b&gt;one&lt;/b&gt; keyword signifies that this &lt;b&gt;must be unique&lt;/b&gt;. When a one-to-many relationship is found, CF-ORM will create a unique key in the database for the table that is being mapped by the CFC. So, in the case of the UserRef column (which maps to a user), there can be &lt;b&gt;many&lt;/b&gt; users for a &lt;b&gt;one&lt;/b&gt; post. If the mapping for UserRef was &lt;b&gt;one-to-one&lt;/b&gt;, a &lt;b&gt;duplicate error&lt;/b&gt; will be raised when you try to insert the same user. Since the same author can make many posts, the &lt;b&gt;many-to-one&lt;/b&gt; relationship must be used here. If you are receiving a duplicate error from the database when inserting new records, be sure to check your mapping a change any erroneous one-to-one mapping relationships.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;one-to-one relationship&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;A one-to-one relationship is often applied to two tables when there is a set of optional data that is not required. For example, the &lt;b&gt;PostRef&lt;/b&gt;, found in the code below, is a &lt;b&gt;one-to-one&lt;/b&gt; relationship. I have a &lt;b&gt;Post&lt;/b&gt; table that &lt;b&gt;may&lt;/b&gt; have an optional image or video. The image or video is not required to be in the post table as there are posts that do not have any images or video. In order to consolidate the post table, I wanted to store images or video into a generic &lt;b&gt;Media&lt;/b&gt; table, which is a different type of a 'thing'. Having the one to one relationship here helps me reduce the length of the column in the &lt;b&gt;Post&lt;/b&gt; table, and allows me to organize the concept of two different 'things', i.e. a &lt;b&gt;post&lt;/b&gt; and its associated &lt;b&gt;media&lt;/b&gt;. Additionally, this relationship is quite useful for dropdowns; I can query the entire media table to make a dropdown list to allow the user to change the image or video.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Often, I am surprised that a lot of folks have a negative impression of the one to one relationship. This relationship is often misunderstood. I find the one to one relationship to be quite useful. Since this is not relevant to this article, I'll reserve further elaboration for another article.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The &lt;b&gt;many-to-one&lt;/b&gt; relationship&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;b&gt;MimeTypeRef&lt;/b&gt; in the code below has a &lt;b&gt;many-to-one&lt;/b&gt; relationship. This could be a little confusing, you might rationally conclude that &lt;b&gt;one&lt;/b&gt; image or video (the CFC that we are working on) would have &lt;b&gt;one&lt;/b&gt; mime-type, but remember that whenever the &lt;b&gt;one&lt;/b&gt; keyword is found, it signifies that it &lt;b&gt;must be unique record&lt;/b&gt;. If we did put a &lt;b&gt;one-to-one&lt;/b&gt; relationship here, we would receive a duplicate error message whenever we tried to put in the same mime type for a new record. With the &lt;b&gt;many-to-one&lt;/b&gt; mapping, we can have &lt;b&gt;many&lt;/b&gt; videos and images for &lt;b&gt;one&lt;/b&gt; mime type.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="Media" persistent="true" table="Media" output="no" hint="ORM logic for the new Media table, can be an image or a video."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There can be many images and videos for a post ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostRef" ormtype="int" fieldtype="one-to-one" cfc="Post" fkcolumn="PostRef" cascade="all" missingrowignored="true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many images can have one mime type (if you have many-to-one you'll recive a 'Cannot insert duplicate key in object 'dbo.Media'. The duplicate key value is (11).' error ')---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MimeTypeRef" ormtype="int" fieldtype="many-to-one" cfc="MimeType" fkcolumn="MimeTypeRef" cascade="all" missingrowignored="true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="FeaturedMedia" ormtype="boolean" default="false" hint="Is this an image or video that should be at the top of a blog post?"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaPath" ormtype="string" length="255" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaUrl" ormtype="string" length="255" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaTitle" ormtype="string" length="255" default="" hint="Also used for the alt tag."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaWidth" ormtype="string" length="25" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaHeight" ormtype="string" length="25" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaSize" ormtype="string" length="25" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaVideoDuration" ormtype="string" default="" length="25" hint="Used for video types"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaVideoCoverUrl" ormtype="string" default="" length="255" hint="The image URL to cover the video. Used for video types"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="MediaVideoSubTitleUrl" ormtype="string" default="" length="255" hint="The URL to the subtitle file. Used for video types"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The &lt;b&gt;one-to-many&lt;/b&gt; relationship&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Simply put, the &lt;b&gt;one-to-many&lt;/b&gt; relationship is the inverse of the many-to-one relationship. That is, there is one thing in the CFC that we are working on, to many things that we are mapping to. For example, in a blog, one Author can have many Posts. I don't often use this relationship as I tend to make the relationships from the other side (many-to-one).&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The &lt;b&gt;many-to-many&lt;/b&gt; relationship&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;A &lt;b&gt;many-to-many&lt;/b&gt; relationship &lt;b&gt;could&lt;/b&gt; be used to map a blog &lt;b&gt;category&lt;/b&gt; to a blog &lt;b&gt;post like so:&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="Category" persistent="true" table="Category" output="no" hint="ORM logic for the new Category table"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CategoryId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many categories for one blog ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostRef" ormtype="int" fieldtype="many-to-many" cfc="Post" fkcolumn="PostRef" cascade="all"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CategoryUuid" ormtype="string"  length="75" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CategoryAlias" ormtype="string"  length="75" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Category" ormtype="string"  length="125" default=""&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;However, I replaced this &lt;b&gt;many-to-many&lt;/b&gt; relationship with several &lt;b&gt;many-to-one&lt;/b&gt; relationships placed into a &lt;b&gt;junction&lt;/b&gt; table.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;A &lt;b&gt;&lt;a href="https://en.wikipedia.org/wiki/Associative_entity"&gt;Junction table&lt;/a&gt;&lt;/b&gt; is also commonly defined as a:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;cross-reference table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;bridge table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;join table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;map table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;intersection table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;link table&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;While not technically correct, I personally refer to this as a &lt;b&gt;lookup&lt;/b&gt; table as it closely matches the lookup table definition used in computer science (a table that contains a simple array).&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Whatever you may call it, a &lt;b&gt;many-to-many&lt;/b&gt;, or a set of &lt;b&gt;many-to-one&lt;/b&gt; relationships used in a junction table are &lt;b&gt;bi-directional&lt;/b&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Instead of using a &lt;b&gt;many-to-many&lt;/b&gt; relationship, I used a &lt;b&gt;many-to-one&lt;/b&gt; relationship to map a Post with a Category with a PostCategoryLookup junction table like so:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="PostCategoryLookup" persistent="true" table="PostCategoryLookup" output="no" hint="ORM logic for the new PostCategoryLookup table"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostCategoryLookupId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There can be many posts and categories ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostRef" ormtype="int" fieldtype="many-to-one" cfc="Post" fkcolumn="PostRef" singularname="Post" lazy="false" cascade="all"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CategoryRef" ormtype="int" fieldtype="many-to-one" cfc="Category" fkcolumn="CategoryRef" cascade="all"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Mapping with the &lt;b&gt;cfc&lt;/b&gt; and &lt;b&gt;fkcolumn&lt;/b&gt; arguments&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;b&gt;cfc&lt;/b&gt; and &lt;b&gt;fkcolumn&lt;/b&gt; argument determines the table and column what you're mapping to.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;b&gt;cfc&lt;/b&gt; argument is simple and needs no further explanation. It is the table that you want to create a foreign key too. The fkcolumn is not so simple, rather I find it to be an unnecessarily complex beast.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The &lt;b&gt;fkcolumn&lt;/b&gt; argument&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;u&gt;The &lt;b&gt;fkcolumn&lt;/b&gt; argument takes on different characteristics depending on how its &lt;a href="#name"&gt;name&lt;/a&gt; was set.&lt;/u&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;If the cfproperty name is an ORM object &lt;b&gt;reference&lt;/b&gt;&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;If we used the name as a object reference, such as &lt;b&gt;Posts&lt;/b&gt;, we must use a name that is &lt;b&gt;not&lt;/b&gt; already in use in the database, or the name of an existing CFC. A lot of documentation on the web uses the plural name of the table, such as the name that I used- i.e. &lt;b&gt;Posts&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;However, John Whish, the author of the excellent book &lt;a href="https://gregoryalexander.com/blog/2019/11/22/ColdFusion-Orm-a-fantastic-book-by-John-Whish"&gt;ColdFusion ORM&lt;/a&gt;, suggests using 'fk_TableName' to signify that the reference is a foreign key. If he applied his naming convention with my RelatedPost table, for example, he would use &lt;b&gt;fk_RelatedPost&lt;/b&gt;. No matter what approach you use, what's important to recognize is that this 'Posts' or 'fk_RelatedPost' name is just a &lt;b&gt;reference&lt;/b&gt;, and it won't actually exist in the database.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;If the name is a reference, the &lt;b&gt;fkcolumn&lt;/b&gt; argument should be set to the name of the &lt;b&gt;primary key&lt;/b&gt; of the cfc that you're mapping to. Here the cfc value is &lt;b&gt;Post&lt;/b&gt; and the fkcolumn is &lt;b&gt;PostId&lt;/b&gt;. Even though the cfproperty name is &lt;b&gt;Posts&lt;/b&gt;, the column that will be created into the RelatedPost table will be the value of the fkcolumn, i.e. &lt;b&gt;BlogId&lt;/b&gt;. However, &lt;b&gt;Posts&lt;/b&gt; will be the column when I dump out the CFC object.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;Posts as an object reference in the persistent CFC:&lt;/b&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="RelatedPost" persistent="true" table="RelatedPost" output="no" hint="ORM logic for the new RelatedPost table. This is used to indicate the related posts within the forum."&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="RelatedPostId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There are many related posts for one post ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Posts" ormtype="int" fieldtype="many-to-one" cfc="Post" fkcolumn="PostId" singularname="Post" cascade="all" lazy="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There is one related post that we are pointing to ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;&lt;b&gt;PostId&lt;/b&gt; is stored as column in the database:&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedPost_PostId.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;&lt;b&gt;Posts&lt;/b&gt; is the item in the CFC database object:&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedPost_PostIdObj.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This works fine when working with a single foreign key reference to the Post.PostId column, but what if we wanted more than one reference to Post.PostId?&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The RelatedPost table maps a relationship to a single post to all other posts that relate to it. At the bottom of may of my own posts, you will see a &lt;b&gt;Related Resources&lt;/b&gt; label that has links to other posts. The RelatedPost database table was designed to handle this. So here, we need two references to the Post table's primary key- PostId&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedResources.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;However, when we use more than one &lt;b&gt;PostId&lt;/b&gt; in the &lt;b&gt;fkcolumn&lt;/b&gt;, yet use two objects as the cfproperty name (Posts and RelatedPosts), we will get an error.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="RelatedPost" persistent="true" table="RelatedPost" output="no" hint="ORM logic for the new RelatedPost table. This is used to indicate the related posts within the forum."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="RelatedPostId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There are many related posts for one post ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Posts" ormtype="int" fieldtype="many-to-one" cfc="Post" fkcolumn="PostId" singularname="Post" cascade="all" lazy="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There is one related post that we are pointing to ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="RelatedPosts" ormtype="int" fieldtype="one-to-one" cfc="Post" fkcolumn="PostId" singularname="Post" cascade="all" lazy="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This is the error message raised when there are more than one references to the Post.PostId column in the database: &lt;i&gt;Repeated column in mapping for entity: RelatedPost column: PostId (should be mapped with insert="false" update="false")&lt;/i&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This error signifies that this column needs to be a read-only post. However, as with many other ORM related errors, this is incorrect. The problem here is that CF-ORM is trying to create two BlogId references into the RelatedPost table. There is several ways to fix this, but the best way that I found is to use the &lt;b&gt;fkcolumn&lt;/b&gt; to point the foreign key back to itself.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Using the &lt;b&gt;fkcolumn&lt;/b&gt; to point back to its self&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Another way to use the cfproperty name and the fkcolumn is to create a new column into the database using the name attribute, and then use the same column name in fkcolumn to point back to itself. Let's look at the code:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="RelatedPost" persistent="true" table="RelatedPost" output="no" hint="ORM logic for the new RelatedPost table. This is used to indicate the related posts within the forum."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="RelatedPostId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There are many related posts for one post ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostRef" ormtype="int" fieldtype="many-to-one" cfc="Post" fkcolumn="PostRef" cascade="all" lazy="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- There is one related post that we are pointing to ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="RelatedPostRef" ormtype="int" fieldtype="one-to-one" cfc="Post" fkcolumn="RelatedPostRef" cascade="all" lazy="false"&gt;  <char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="Date" ormtype="timestamp"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Instead of creating an object reference using the &lt;b&gt;name&lt;/b&gt; attribute, we are using &lt;b&gt;PostRef&lt;/b&gt; and &lt;b&gt;RelatedPostRef&lt;/b&gt; to create two new database columns. The &lt;b&gt;cfc&lt;/b&gt; that we are pointing to remains the same, we want to use the primary key found in the &lt;b&gt;Post&lt;/b&gt; table, and we are also using the &lt;b&gt;same&lt;/b&gt; that we used in the &lt;b&gt;fkcolumn&lt;/b&gt; to point back to itself.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This creates two new columns, the PostRef and the RelatedPostRef into the database, and creates the relationship to the PostId using these new columns. Viola! the error is gone, and now the database model is an exact replica of the ORM object model!&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The PostRef relationship in the database&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedPostPointToSelfPostRef.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The RelatedPostRef relationship in the database&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedPostPointToSelfRelatedPostRef.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;And the ORM Object that is now identical to the database model&lt;/p&gt;<char code='0d'/><char code='0a'/>&lt;div class="entryImage"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;img class="fade" data-src="/blog/doc/cfOrm/relatedPostPointToSelfOjb.png"&gt;<char code='0d'/><char code='0a'/>&lt;/div&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I must admit that I am not a CF-ORM expert and stumbled upon this approach while discovering different ways to solve some issues. However, it is now my preferred approach. It is my personal preference to use TableName&lt;b&gt;Ref&lt;/b&gt; for all of my foreign keys, and use TableName&lt;b&gt;Id&lt;/b&gt; for my primary keys. I personally think that it is easier to read, and it allows me to quickly identify what I am working with. I have been using the same name database naming conventions for many many years. I also like the fact that both my object and database models are now uniform.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Final Relationship Notes&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;You will notice that anytime we create a new relationship with CF-ORM, the columns that hold the relationships will be placed at the end of the table. The order of the columns indicated with the persistent CFC will not be enforced. However, you can change the order of the columns after the tables are created, and CF-ORM won't modify the new order.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;There is a lot of flexibility with CF-ORM. However, I personally think that the implementation is confusing and would prefer that CF-ORM be more opinionated. One of the reasons why I don't like PHP is that there are far too many ways in PHP to perform a task. This results in added complexity. There is a lot of room for improvement with CF-ORM. I wish that there was an argument in allowed in the cfproperty to be used as a foreign key, such as a foreignKey="true", or something like fkeycolumn="this" or "self".&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:In part 3 of this 3 part series; we will discuss how to use ColdFusion ORM to populate records into the database. Populating the database is where the rubber hits the road, if you made any errors in your ORM mappings, all of the flaws will be exposed. I'll try to show you some of the major issues that I faced, and how to resolve them.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2019/12/28/Using-ColdFusion-ORM-to-Populate-the-Database"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2019/12/28/Using-ColdFusion-ORM-to-Populate-the-Database",<char code='0d'/><char code='0a'/>  "headline": "Introducing ColdFusion ORM",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/ormPart3.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/ormPart3.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/ormPart3.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "In part 3 of this 3 part series; we will discuss how to use ColdFusion ORM to populate records into the database. Populating the database is where the rubber hits the road, if you made any errors in your ORM mappings, all of the flaws will be exposed. I'll try to show you some of the major issues that I faced, and how to resolve them.",<char code='0d'/><char code='0a'/>  "datePublished": "2019-12-28",<char code='0d'/><char code='0a'/>  "dateModified": "2019-12-28"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Populating the new tables&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;We will be using simple 'SELECT *' database queries on the original BlogCfc tables and populate the new tables that CF-ORM created for us. Populating the database is where the rubber hits the road, if you made any errors in your ORM mappings, all of the flaws will be exposed. I'll try to show you some of the major issues that I faced, and how to resolve them.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Before we go any further on this topic, we must go over a few key concepts&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;We can use explicit values to populate the database when no relationship exists.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;When are are dealing with a relationship, i.e. a property with a &lt;b&gt;fieldtype&lt;/b&gt; (one-to-many, etc), a cfc, and a fkcolumn; we must use CF-ORM objects to populate the database.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;In order to populate the new tables that were created with our persistent CFC mappings, we are going to use the &lt;b&gt;EntityNew&lt;/b&gt; and &lt;b&gt;EntityLoad&lt;/b&gt; objects along with these objects &lt;b&gt;get&lt;/b&gt; and &lt;b&gt;set&lt;/b&gt; methods.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ol&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;&lt;b&gt;EntityNew&lt;/b&gt; instantiates a persistent CFC and allows us to insert records into the table columns using its &lt;b&gt;set&lt;/b&gt; methods.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;&lt;b&gt;EntityLoad&lt;/b&gt; allows us to load the persistent CFC in order to get the current values from the database, and then pass the CF-ORM object back to the set method of the object instantiated using &lt;b&gt;EntityNew&lt;/b&gt;&lt;/li&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;/ol&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;In other words, we will use EntityNew to insert known or static values into the database, or use &lt;b&gt;EntityLoad&lt;/b&gt; to get the values already in the database, and pass the loaded &lt;b&gt;object&lt;/b&gt; back to the object that we created using &lt;b&gt;EntityNew&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;We will cover each example in depth below.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;1) Let's begin by inserting records into a table with no relationships&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The code below is an example of populating the data from one table to another. The steps that we will use are:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Wrap the entire block with a transaction tag&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Create a query that gets the current data found in the BlogCfc's original tblBlogRoles table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Loop through the tblBlogRoles query object using a cfoutput query tag and:<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Create a new entity of the &lt;b&gt;Role&lt;/b&gt; cfc object using &lt;b&gt;EntityNew&lt;/b&gt;. The prefix before &lt;b&gt;EntityNew&lt;/b&gt; can be anything you would like- I used RoleDbObj.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Use the set methods in the Role entity object to insert the records into all of the columns&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Once the columns are &lt;b&gt;set&lt;/b&gt;, save the Role entity with EntitySave&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Get the Roles from BlogCfc ---&gt;<char code='0d'/><char code='0a'/>&lt;cfquery name="getTblBlogRoles" datasource="#dsn#"&gt;<char code='0d'/><char code='0a'/><char code='09'/>SELECT  <char code='0d'/><char code='0a'/><char code='09'/>id<char code='0d'/><char code='0a'/>    ,role<char code='0d'/><char code='0a'/>    ,description<char code='0d'/><char code='0a'/>  <char code='09'/>FROM tblblogroles<char code='0d'/><char code='0a'/>&lt;/cfquery&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!--- Use a transaction ---&gt;<char code='0d'/><char code='0a'/>&lt;cftransaction&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfoutput query="getTblBlogRoles"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Load the entity. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset RoleDbObj = entityNew("Role")&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Use the entity objects to set the data. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset RoleDbObj.setBlogRef(blogRef)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset RoleDbObj.setRole(role)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset RoleDbObj.setDescription(description)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset RoleDbObj.setDate(now())&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Save it. Note: updates will automatically occur on persisted objects if the object notices any change. We don't have to use entity save after the Entity has been loaded and saved. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset EntitySave(RoleDbObj)&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/>&lt;/cftransaction&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;2) Inserting records into a table that contains a relationship&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;We can load an object using EntityLoad several different ways:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;A) Load a CF-ORM object using the primary key&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;BlogRefObj is the variable that we are storing the object in. We are loading the Blog table. The numeric value, which is 1, is the value of its primary key. You can also use dynamic values, such as [currentRow] when looping through a recordset.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;cfset BlogRefObj = entityLoadByPK("Blog", 1)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;B) Load a CF-ORM object using filters, similar to the WHERE clause in a query&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Here, we are loading the Users table. UserName is the name of the column that we are querying, and "gregory" is the value that we are searching for. Notice the "true" argument at the tail end of this code. This argument allows us to load a single record, which is necessary when we pass back the object to the EntityNew's set method.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfset UserRefObj = entityLoad("Users", { UserName = "gregory" }, "true" )&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;2A) Code Example using LoadByPk&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Get all of the search statistics in the BlogCfc table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Wrap the code block with transaction tags&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Loop through the getTblSearchStats query object using a cfoutput query tag and:<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Load the new SearchQuery object using the loadByPk method where the primary key is equal to 1 (there is only one blog record)&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Create a new SearchQueryObj entity (SearchQuery is the name of the persistent CFC)&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Pass the BlogRefObj &lt;b&gt;object&lt;/b&gt; to populate the BlogRef column using the set method.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Use the set methods to explicity insert values in the columns that don't contain references&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Finally, save the SearchQueryObj entity with EntitySave&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Get the Post Categories from BlogCfc ---&gt;<char code='0d'/><char code='0a'/>&lt;cfquery name="getTblSearchStats" datasource="#dsn#"&gt;<char code='0d'/><char code='0a'/><char code='09'/>SELECT <char code='0d'/><char code='0a'/><char code='09'/>searchterm<char code='0d'/><char code='0a'/><char code='09'/>,searched<char code='0d'/><char code='0a'/><char code='09'/>,blog<char code='0d'/><char code='0a'/><char code='09'/>FROM tblblogsearchstats<char code='0d'/><char code='0a'/>&lt;/cfquery&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!--- Use a transaction ---&gt;<char code='0d'/><char code='0a'/>&lt;cftransaction&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfoutput query="getTblSearchStats"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Load the blog table and get the first record (there only should be one record at this time). This will pass back an object with the value of the blogId. This is needed as the setBlogRef is a foreign key and for some odd reason, ColdFusion or Hibernate must have an object passed as a reference instead of a hardcoded value. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset BlogRefObj = entityLoadByPK("Blog", 1)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Load the entity. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset SearchQueryObj = entityNew("SearchQuery")&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Use the entity objects to set the data. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset SearchQueryObj.setBlogRef(BlogRefObj)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset SearchQueryObj.setSearchQuery(searchterm)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset SearchQueryObj.setDate(searched)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Save it. Note: updates will automatically occur on persisted objects if the object notices any change. We don't have to use entity save after the Entity has been loaded and saved. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset EntitySave(SearchQueryObj)&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/>&lt;/cftransaction&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;2B) Code Example using EntityLoad filter methods&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Get all of the roles from the tblBlogRoles table&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Wrap the code block with transaction tags&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Loop through the tblBlogRoles query object using a cfoutput query tag and:<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Load one record from the users object where the user name is equal to the user name in the tblUserRoles query&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Create a new UserRole entity (UserRole is the name of the persistent CFC)&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Pass the UserRoleRef &lt;b&gt;object&lt;/b&gt; to populate the UserRef column using the set method.&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Use the set methods to explicity insert values in the columns that don't contain references&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;li&gt;Finally, save the UserRole entity with EntitySave&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Get the Users from BlogCfc ---&gt;<char code='0d'/><char code='0a'/>&lt;cfquery name="getTblUserRoles" datasource="#dsn#"&gt;<char code='0d'/><char code='0a'/><char code='09'/>SELECT <char code='0d'/><char code='0a'/><char code='09'/>username<char code='0d'/><char code='0a'/>    ,roleidfk<char code='0d'/><char code='0a'/><char code='09'/>,role<char code='0d'/><char code='0a'/><char code='09'/>FROM tbluserroles<char code='0d'/><char code='0a'/>&lt;/cfquery&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;!--- Use a transaction ---&gt;<char code='0d'/><char code='0a'/>&lt;cftransaction&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfoutput query="getTblUserRoles"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Get the user by the username in the Users Obj. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset UserRefObj = entityLoad("Users", { UserName = username }, "true" )&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Load the entity. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset UserRoleDbObj = entityNew("UserRole")&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Use the entity objects to set the data. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset UserRoleDbObj.setUserRef(UserRefObj)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset UserRoleDbObj.setDate(now())&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Save it. Note: updates will automatically occur on persisted objects if the object notices any change. We don't have to use entity save after the Entity has been loaded and saved. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset EntitySave(UserRoleDbObj)&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfoutput&gt;<char code='0d'/><char code='0a'/>&lt;/cftransaction&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Dealing with problems&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Unless you're perfect, you will likely encounter problems once you try to populate your new tables. I will share a few solutions to common problems.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Inserting data that may have null values in columns that have relationships&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you have columns that may have null values that contain relationships, you need to use the &lt;b&gt;missingrowignored="true"&lt;/b&gt; argument&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;For example, in my Comment table, I need to have either a known blog user or a commenter, attached to a comment record. A blog user is typically the administrator or super-user of the blog, and a commenter is a user that is a general user making a comment. The Blog user is able to have more functionality, and can perform actions on a comment; whereas the blog commenter has limited functionality and can just make a comment. My Comment table needs one of these references to be defined but does not require both- unless of course, the blog user is also the commenter. These two columns need to accept a null value.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;To allow this, I am using the missingrowignored="true" argument.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='09'/><char code='0d'/><char code='0a'/>&lt;cfcomponent displayName="Comment" persistent="true" table="Comment" output="no" hint="ORM logic for the new Comment table"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CommentId" fieldtype="id" generator="native" setter="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many comments for one post ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="PostRef" ormtype="int" fieldtype="many-to-one" cfc="Post" fkcolumn="PostRef" cascade="all" lazy="false"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many comments for one User ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="UserRef" ormtype="int" fieldtype="many-to-one" cfc="Users" fkcolumn="UserRef" cascade="all" lazy="false" missingrowignored="true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;!--- Many comments for one commenter ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfproperty name="CommenterRef" ormtype="int" fieldtype="many-to-one" cfc="Commenter" fkcolumn="CommenterRef" cascade="all" lazy="false" missingrowignored="true"&gt;<char code='0d'/><char code='0a'/><char code='09'/>...<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The cryptic &lt;b&gt;coldfusion orm java.lang.String error&lt;/b&gt;&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;This error message can manifest itself in many ways. The last part of the message &lt;b&gt;String&lt;/b&gt; will be whatever datatype you passed to the set method. For example, it can be &lt;b&gt;coldfusion orm java.lang.Int&lt;/b&gt; if you passed in an int, etc.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you're getting this error- you likely forgot to pass in an object to the set method. Objects &lt;b&gt;must&lt;/b&gt; be passed to columns that contain relationships! Use the EntityLoad method to load a CF-ORM object, and pass that object to the set method instead of setting an explicit value.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Issues with constraints&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Cannot insert duplicate key in object xxx. The duplicate key value is (xxx).' error&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Check your relationships and remember that any time that you encounter a &lt;b&gt;one&lt;/b&gt; in your relationships (many-to-&lt;b&gt;one&lt;/b&gt; for example), a unique constraint is placed on that key.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;While CF-ORM will create relationships and constraints for you, CF-ORM will not remove existing constraints- even if CF-ORM created the constraint in the first place.&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;While creating tables and populating records, you'll probably have to change the existing relationships after encountering errors. When you change the relationships, make sure that you delete the existing relationships and constraints. I'll provide some helpful scripts that I used with SQL Server.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Script to delete an existing constraint (replace TableName with the table that your working on)&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>ALTER TABLE TableName DROP ConstraintName<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>Script to delete records and set the primary key back to a 1:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>DELETE FROM TableName;<char code='0d'/><char code='0a'/>DBCC CHECKIDENT ('[TableName]', RESEED, 0);<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;Script to determine existing relationships&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>select name 'ForeignKeyName', <char code='0d'/><char code='0a'/>    OBJECT_NAME(referenced_object_id) 'RefrencedTable',<char code='0d'/><char code='0a'/>    OBJECT_NAME(parent_object_id) 'ParentTable'<char code='0d'/><char code='0a'/>from sys.foreign_keys<char code='0d'/><char code='0a'/>where referenced_object_id = OBJECT_ID('TableName') or <char code='0d'/><char code='0a'/>    parent_object_id = OBJECT_ID('TableName')<char code='09'/><char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Remove all relationships from the database. This is helpful if you just want to delete everything and start over again.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>SELECT 'ALTER TABLE ' + Table_Name  +' DROP CONSTRAINT ' + Constraint_Name<char code='0d'/><char code='0a'/>FROM Information_Schema.CONSTRAINT_TABLE_USAGE<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;h4&gt;The 'The ALTER TABLE statement conflicted with the FOREIGN KEY constraint' errors and ghost relationships&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;This particular error drove me crazy. I was receiving this constraint error for hours, and no matter what I did- I could not make it go away. I could not find the problematic relationship and deleted all of the constraints in the database, yet this error would not go away.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;However, I did not delete the records that were in the database. What happened here was that CF-ORM was trying to create a new constraint based upon the recent changes that I applied to the persistent CFCs. Since there were records in the database that did not meet the new referential integrity, an error was raised. The database was enforcing referential integrity and could not create the constraint as it would result in orphaned records. CF-ORM could not create the new constraint and reported the error.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;The solution to this problem is to &lt;b&gt;delete the existing records&lt;/b&gt; from the table and to start over.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Other Resources&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I highly recommend getting the &lt;a href="https://gregoryalexander.com/blog/2019/11/22/ColdFusion-Orm-a-fantastic-book-by-John-Whish"&gt;ColdFusion ORM book&lt;/a&gt; written by John Whish. Although it was written for ColdFusion 9, the materials are still relevant and it is the most in-depth CF-ORM resource that I have found.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;a href="https://cfml.slack.com/"&gt;cfml.slack.com page&lt;/a&gt; also has an active ORM channel with a lot of ORM experts. If you need a solution that we have not covered, try to pose the question there. Of course, you're always welcome to make a comment here if you're in need of help!&lt;/p&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Galaxie Blog is a free open source ColdFusion blog platform. This article provides information for what is coming in 2020 and provides a road map for the coming year.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2020/1/15/Galaxie-Blog-Winter-Update-and-Roadmap"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2020/1/15/Galaxie-Blog-Winter-Update-and-Roadmap",<char code='0d'/><char code='0a'/>  "headline": "Introducing ColdFusion ORM",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/delicateArch1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/delicateArch1.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/delicateArch1.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "Galaxie Blog is a free open source ColdFusion blog platform. All of the functionality out of the box that you see here is free. Unlike other blog software; I will commit to providing full functionality without charging any upcharge fee for more advanced features. Here is the road map for Galaxie Blog in the coming year. ",<char code='0d'/><char code='0a'/>  "datePublished": "2020-1-15",<char code='0d'/><char code='0a'/>  "dateModified": "2020-1-15"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h3&gt;Galaxie Blog Update&lt;/h3&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;What is Galaxie Blog?&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;a href="https://gregoryalexander.com/blog/2019/7/16/Introducing-Gregorys-Blog"&gt;Galaxie Blog&lt;/a&gt; is the most modern and functional open-sourced Coldfusion Blog in the world. Galaxie Blog is a free open source ColdFusion blog platform, has an HTML5 interface, and is a beautifully designed responsive site that works flawlessly on desktop or mobile.&lt;p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Galaxie Blog is completely open-source!&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Galaxie Bog is open-source. All of the functionality out of the box that you see here is &lt;b&gt;free&lt;/b&gt;. Unlike other blog software; I will commit to providing full functionality without charging any upcharge fee for more advanced features.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The only exception to this is that the blog owner may want to purchase their own Kendo license to include certain Kendo professional widgets- such as the Kendo grid. Galaxie Blog supports both the open-source version of Kendo Core, or Kendo Professional- which requires a license. The blog owner may choose to purchase their own &lt;a href="https://www.telerik.com/kendo-ui"&gt;professional Kendo UI license&lt;/a&gt;, directly from Telerik, to unlock certain Kendo UI functionality, such as incorporating the &lt;a href="https://demos.telerik.com/kendo-ui/grid/index"&gt;Kendo UI Grid&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;So far, I have &lt;b&gt;incorporated open-source libraries from third parties&lt;/b&gt; (such as &lt;a href="https://www.telerik.com/kendo-ui/open-source-core"&gt;Kendo Core&lt;/a&gt;), but I may eventually add a few more Kendo UI features that may require the professional license directly from Telerik. However, when I do decide to incorporate Kendo widgets requiring a paid license; &lt;b&gt;I will always seek to provide similar free open-source functionality by developing free alternative interfaces.&lt;/b&gt;&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Everything that you see on this blog, other than the grid that is shown below, is free and open-sourced. Grid, or no grid- this is a license thing that's totally up to you. I am not affiliated with Telerik- and will not be receiving &lt;b&gt;any&lt;/b&gt; compensation.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Current Status&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I am currently working on re-architecting Galaxie Blog to use ColdFusion ORM. Without getting into the weeds of the technical details, ColdFusion ORM allows Galaxie Blog to support &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/2019/12/28/Introducing-ColdFusion-ORM"&gt;any modern database&lt;/a&gt;&lt;/b&gt;. This is a massive endeavor! All of the database-oriented logic needs to be completely redone. I am also working on helping several clients migrating to Galaxie Blog. I likely will not have a new version of Galaxie Blog out until the early spring of 2020 (on a side note- I likely won't be blogging as much in the next few months).&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Tentative 2020 General Roadmap (subject to change of course)&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;table id="2020roadMap"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col style="width:11%" /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col style="width:22%" /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;col style="width:67%" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/colgroup&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;thead&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="version"&gt;Version&lt;/th&gt;<char code='09'/><char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="date"&gt;Date&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;th data-field="desc"&gt;Description&lt;/th&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/thead&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;tbody&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;1.75&lt;/td&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Winter 2020&lt;/td&gt;<char code='09'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Re-engineer Galaxie Blog to use ColdFusion ORM. This will allow the blog owner to use Galaxie Blog with &lt;b&gt;&lt;a href="https://gregoryalexander.com/blog/2019/12/28/Introducing-ColdFusion-ORM"&gt;any modern database platform&lt;/a&gt;&lt;/b&gt;.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;2.0&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Spring 2020&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Completely overhaul the &lt;b&gt;administative interface&lt;/b&gt; and develop new HTML5 administrative interface that works with mobile devices&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;2.25&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Summer 2020&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Add functionality and rich editor widgets to the administative interface. its my goal to be able to post a picture or a video along with a blog post using my mobile device. I'm currently investigating incorporating either &lt;a href="https://www.tiny.cloud/"&gt;TinyMce&lt;/a&gt; or &lt;a href="https://ckeditor.com/"&gt;CkEditor&lt;/a&gt; to allow blog owners and commenters to better present their posts.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;2.50&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Fall 2020&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Develop Galaxie Blog into a &lt;b&gt;&lt;a href="https://developers.google.com/web/progressive-web-apps"&gt;Progressive Web Application&lt;/a&gt;&lt;/b&gt;.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;3.0&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Winter 2020&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Incorporate ColdBox and Vue. &lt;a href="https://www.ortussolutions.com/products/coldbox"&gt;ColdBox&lt;/a&gt; is the most popular ColdFusion &lt;b&gt;MVC&lt;/b&gt; framework, and ColdBox has a much better &lt;a href="https://coldbox-orm.ortusbooks.com/getting-started/basic-crud-services"&gt;ORM implementation&lt;/a&gt;. I am also really excited to use &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; (and ditch jQuery, which I am currently using). Vue should speed up the interative development cycles and make the code more maintainable.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Galaxie Blog supports two commenting systems, the native Galaxie Blog interface, and &lt;a href="https://gregoryalexander.com/blog/2019/10/5/Disqus-has-been-incorporated-into-Galaxie-Blog"&gt;Disqus&lt;/a&gt;. However, the native Galaxie Blog interface does not have all of the features available in Disqus. its my goal to make the core functionality of the native commenting interface comparable to the interfaces provided by &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;. This requires having the blog handle Facebook and Twitter API logins.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Themes, themes, themes... Galaxie Blog already has dozens of professionally designed themes, but I will add a lot more. I'll also add the capability of attaching a theme to a blog post, a page, and potentially a widget. I also want to implement a theme pack- for example, to automatically display pictures of the current holiday or event- i.e. Halloween or Christmas.<char code='0d'/><char code='0a'/>Although this is not what most users would think about when addressing blog functionality, it is really a fun feature and it improves user satisfaction. &lt;br/&gt;&lt;br/&gt;Here is a fun little fact- did you know that &lt;a href="https://www.bennadel.com"&gt;Ben Nadel&lt;/a&gt;, one of the most pre-eminent ColdFusion bloggers around, coded his site to allow the user to always choose to display a certain photo when viewing his website? Ben's major theme is that &lt;a href="https://www.bennadel.com/people/who-rock-my-world.htm"&gt;he takes pictures with someone unique&lt;/a&gt; on most of his blog posts, and his readers can select to always view their own picture! Fun!&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Improve user engagement. One of the biggest issues with blogging is that the users will read your posts, however, they rarely, if ever, comment or provide feedback. I will develop an interface to allow any user, even if they are not logged in, to recommend and or rate an article. Feedback is paramount to a successful blogger, and there is not really a good good mechanism to allow quick feedback right now other than to go through the captcha process and make a comment.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Enhance and develop new mobile interfaces. Currently, &lt;a href="https://gregoryalexander.com/blog/2019/12/16/Playing-your-own-video-with-Galaxie-Blog"&gt;Galaxie Blogs Plyr&lt;/a&gt; control can cast video from the iPhone to an enabled airplay device for example, but I want to develop new interfaces improving native Andriod and iPhone functionality.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;TBD&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;Better code syntax highlighting. Currently I use an older Java based library created by Jason Delmore to wrap up the code in a GUI, but there are other more modern open-source libraries such as &lt;a href="https://prismjs.com/"&gt;Prism&lt;/a&gt;.&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/tbody&gt;<char code='0d'/><char code='0a'/>&lt;/table&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;attachScript type="deferjs"&gt;<char code='0d'/><char code='0a'/><char code='09'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>$("#2020roadMap").kendoGrid({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>sortable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>scrollable:false,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>reorderable: true,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>resizable: true<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>});<char code='0d'/><char code='0a'/><char code='09'/>});<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Note: this list is not complete, but represent some of the major milestones and goals that I want to incorporate into Galaxie Blog in the coming year.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you would like to suggest any new features, or just make a general comment; please feel free to do so! I could always use any feedback or additional help!&lt;p/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I hope that everyone had a good holiday season- &lt;b&gt;Happy Hanukkah, Merry Christmas, and all that jazz&lt;/b&gt;!</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:There are numerous reasons why you should add a dummy record as the first row of a record. However, the best way to add a record coming from a database is in the SQL query itself.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2020/1/15/Galaxie-Blog-Winter-Update-and-Roadmap"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2020/5/6/Adding-a-dummy-record-in-the-first-row-of-a-recordset",<char code='0d'/><char code='0a'/>  "headline": "Adding a dummy record in the first row of a recordset",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/SQL.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/SQL.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/SQL.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "There are numerous reasons why you should add a dummy record as the first row of a record. You may want to add a choice for the user to &lt;b&gt;select none&lt;/b&gt; for example or change the first row of a dropdown that is populated by a SQL query that has a unique label, such as &lt;b&gt;select...&lt;/b&gt;. However, the best way to add a record coming from a database is in the SQL query itself. ",<char code='0d'/><char code='0a'/>  "datePublished": "2020-5-06",<char code='0d'/><char code='0a'/>  "dateModified": "2020-5-06"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are numerous reasons why you should add a dummy record as the first row of a record. You may want to add a choice for the user to &lt;b&gt;select none&lt;/b&gt; for example, or change the first row of a dropdown that is populated by a SQL query that has a unique label, such as &lt;b&gt;select...&lt;/b&gt;. However, the best way to add a record coming from a database is in the SQL query itself. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Here, I want to add a new row at the top of the recordset that allows the user to choose &lt;b&gt;none&lt;/b&gt;. I don't want to have to create a new SubCategory record into the database, and even if I could, the new &lt;b&gt;None&lt;/b&gt; value would not be sorted correctly in the first row. Instead, we will create a dummy record as the first record using SQL.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>In the inner query, the first select statement will create a new dummy record using SQL, and the second query is appending the data from the database to this record using a &lt;b&gt;UNION ALL&lt;/b&gt;. We are also going to alias the column that we are displaying, in this case, the SubCategory, as a new column that we will sort by (SubCategorySort). <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The dummy record at the top will have a &lt;b&gt;0&lt;/b&gt; string as the SubCategorySort value. A zero value will make the dummy record with &lt;b&gt;None&lt;/b&gt; appear at the top of the dropdown list.  We will then use the SubCategory database column value as the SubCategorySort psuedo column in the subsequent SELECT statement in order to sort the rest of the data by the SubCategory, and will use an &lt;b&gt;order by statement&lt;/b&gt; using our dummy SubCategorySort column &lt;b&gt;outside&lt;/b&gt; of the inner query to sort the results like so:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>SELECT * <char code='0d'/><char code='0a'/>FROM (<char code='0d'/><char code='0a'/><char code='09'/>SELECT <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>NULL as ResourceSubCategoryId, <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>'None' as SubCategory,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>'0' as SubCategorySort<char code='0d'/><char code='0a'/><char code='09'/>UNION ALL<char code='0d'/><char code='0a'/><char code='09'/>SELECT        <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>ResourceSubCategoryId, <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>SubCategory,<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>SubCategory as SubCategorySort<char code='0d'/><char code='0a'/><char code='09'/>FROM            <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>ResourceSubCategory<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>) InnerQuery<char code='0d'/><char code='0a'/>ORDER BY <char code='0d'/><char code='0a'/><char code='09'/>SubCategorySort<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:Despite the lack of updates or releases in the last several months, I have been working on Galaxie Blog. I have incorporated the software for several clients now, and have been working on quite a few features, such as perfecting an independent blog &lt;b&gt;page&lt;/p&gt; that takes on the characteristics of the blog's theme and serves as a landing page. I still am working on rewriting the software to use ColdFusion ORM, and completely overhauling the original BlogCfc Interface.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2020/8/4/Galaxie-Blog-Status-Update"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/images/logo/logoZionMobileTheme.gif"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2020/8/4/Galaxie-Blog-Status-Update",<char code='0d'/><char code='0a'/>  "headline": "Galaxie Blog Update",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/neowise.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/neowise.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/neowise.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "Despite the lack of updates or releases in the last several months, &lt;b&gt;I have been working on Galaxie Blog&lt;/b&gt;. I have incorporated the software for several clients now, and have been working on quite a few features, such as perfecting an independent blog &lt;b&gt;page&lt;/p&gt; that takes on the characteristics of the blog's theme and serves as a landing page. I still am working on rewriting the software to use ColdFusion ORM, and completely overhauling the original BlogCfc Interface.",<char code='0d'/><char code='0a'/>  "datePublished": "2020-8-04",<char code='0d'/><char code='0a'/>  "dateModified": "2020-8-04"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;It's been a while since I have posted or released a new version of Galaxie Blog. I have been busy at work, working with new clients, going on photography road trips and enjoying spending time with my family this summer.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Despite the lack of updates or releases in the last several months, &lt;b&gt;I have been working on Galaxie Blog&lt;/b&gt;. I have incorporated the software for several clients now, and have been working on quite a few features, such as perfecting an independent blog &lt;b&gt;page&lt;/b&gt; that takes on the characteristics of the blog's theme and serves as a landing page. I still am working on rewriting the software to use ColdFusion ORM, and completely overhauling the original BlogCfc Interface.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I hope all of you are safe,&lt;/p&gt;</string><string>I hope that everyone has a wonderful New Year and I wanted to provide a status update on Galaxie Blog. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>While I have not been blogging lately as I want to dedicate all of my time right now for development; I have been working like crazy to complete the next major version of the blog. The new blog has been &lt;b&gt;completely&lt;/b&gt; overhauled. All of the database code has been stripped out and replaced with ColdFusion ORM. This allows the blog to use any modern database, SQL Server, Oracle, MySql, etc. Also, the entire administrative section of the site has been re-written from scratch and will support mobile devices. its a mobile first responsive design and is a single page application built with HTML5. It is my goal to be able to go out into a National Park with nothing more than my camera and phone, take some lovely snapshots, and be able to upload the images, and create a blog post using nothing but my iPhone. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>There are a slew of other major features, such as incorporating a WYSIWYG editor. I have been creating my own custom plug-ins for the editor to allow the users to upload and &lt;b&gt;edit&lt;/b&gt; images, create sophisticated galleries, and link and upload videos, again- using nothing but your phone. There are also new HTML5 grids that have been incorporated to allow you to find and edit information quickly. All of the new user interfaces are themed, so if you choose a particular theme the theme will also be used in the new user interfaces, i.e. the new grids, editors, and image editing tools. its also my goal to improve loading performance by using sophisticated caching.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I can't promise any release date at this time. I want to make sure that everything is done right. Since I had to completely overhaul the entire code-base, it is a good time to revisit some of the original approaches. I'll try to keep everyone updated during the course of this New Year. Once I am in final testing, I assure you that I will be blogging again. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Thank you for your interest!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Gregory</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:One of the most frustrating things that I have had to deal with in ColdFusion is trying to create an external application that is open to the general public and having to secure a portion of that site with an application within a subfolder and extending the logic from base application.cfc. I'll walk you through the current approach that developers use to solve this as well as showing you how to additionally use mapping when there may be a hosting provider that uses virtual directories.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2021/1/30/Extending-Applicationcfcs-using-mappings-and-proxies"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/2021/1/30/Extending-Applicationcfcs-using-mappings-and-proxies"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2020/8/4/Galaxie-Blog-Status-Update",<char code='0d'/><char code='0a'/>  "headline": "Extending Application.cfc's using mappings and proxies",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/mappingAndProxies.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/mappingAndProxies.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/mappingAndProxies.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "One of the most frustrating things that I have had to deal with in ColdFusion is trying to create an external application that is open to the general public and having to secure a portion of that site with an application within a subfolder and extending the logic from base application.cfc. I'll walk you through the current approach that developers use to solve this as well as showing you how to additionally use mapping when there may be a hosting provider that uses virtual directories.",<char code='0d'/><char code='0a'/>  "datePublished": "2021-1-30",<char code='0d'/><char code='0a'/>  "dateModified": "2021-1-30"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>One of the most frustrating things that I have had to deal with in ColdFusion is trying to create an external application that is open to the general public and having to secure a portion of that site with an application within a subfolder and extending the logic from base application.cfc. I'll walk you through the current approach that developers use to solve this as well as showing you how to additionally use mapping when there may be a hosting provider that uses virtual directories.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This is a rather long article, if you want to jump to the condensed summary, scroll down to the bottom of this page.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Many years ago, the first time that I tried to perform this, I received the following message no matter what I tried: &lt;b&gt;"Could not find the ColdFusion component or interface xxx'&lt;/b&gt;. In a nutshell, the problem using this approach is that both the root and the subfolders have the same name, i.e. Application.cfc, and ColdFusion can't properly identify what component to extend. Finally, after some serious investigation, someone came up with the idea to create a proxy.cfc that resides in the same root directory as the root Application.cfc, and the Application.cfc in the subfolder extends an empty proxy.cfc that extends the root cfc like so:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;root directory: Application.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>This root Application.cfc &lt;b&gt;does not extend anything&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Also in the root directory: Proxy.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Proxy.cfc has the following code, its &lt;b&gt;essentially empty&lt;/b&gt;. The &lt;b&gt;only&lt;/b&gt; thing that the &lt;b&gt;Proxy.cfc&lt;/b&gt; does is to extend the Application.cfc that is in the same directory:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent extends="Application"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;Subdirectory&lt;/b&gt; such as a folder named admin.&lt;br/&gt;<char code='0d'/><char code='0a'/>This subdirectory has another &lt;b&gt;Application.cfc&lt;/b&gt;. Let's say that this component is responsible for securing the application and has login logic as well as debugging settings for example. &lt;b&gt;This Application.cfc&lt;/b&gt; will extend the &lt;b&gt;Proxy.cfc&lt;/b&gt; to gain the methods and properties of the Application.cfc in the root directory like so:&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayname="Admin" extends="Proxy.cfc"&gt;<char code='0d'/><char code='0a'/>&lt;!--- Lots of code ---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/>This approach was a godsend and it was heavily blogged about. &lt;b&gt;Ben Nadel&lt;/b&gt; has made a number of very helpful posts which I will share at the bottom of this article. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This works quite well unless you're on a hosted domain or a server that uses &lt;b&gt;virtual directories&lt;/b&gt;. In this case, we are in the same original boat in which we started from. Now we are back into the &lt;b&gt;"Could not find the ColdFusion component or interface xxx' hell!&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;There is a solution for this tricky problem though, we need to also use mapping!&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>It is a common misnomer that you can't use mapping to extend components. I am not quite sure where this misconception originally came about, but it has been proven that this is just not true. There are occasions where we &lt;b&gt;must&lt;/b&gt; use mapping to solve some annoying problems, like here. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>This particular site is hosted by &lt;a href="https://www.hostek.com"&gt;hostek.com&lt;/a&gt;. &lt;b&gt;They are a fine company to deal with&lt;/b&gt;, but the server that my site is hosted on has some idiosyncrasies due to the directory structure. Here, when I use the Proxy.cfc method to extend the logic from the base Application.cfc to the Application.cfc in the admin folder I receive the dreaded 'could not find the ... component' error. When I first saw it I was dismayed thinking not this again, so I turned to ColdFusion CFC mapping. Mapping tells ColdFusion where to find the file and what the file relationships are. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/>Let's review CFC structure that was just discussed. For example, imagine the following directory structure:&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>root directory: i.e. www.gregoryalexander.com/&lt;br/&gt;<char code='0d'/><char code='0a'/>subdirectory: www.gregoryalexander.com/admin/&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>As discussed, we have an &lt;b&gt;Application.cfc&lt;/b&gt; and the &lt;b&gt;Proxy.cfc&lt;/b&gt; in the &lt;b&gt;root directory&lt;/b&gt;, and we have the &lt;b&gt;Application.cfc&lt;/b&gt; in the 'admin' &lt;b&gt;subdirectory&lt;/b&gt;. <char code='0d'/><char code='0a'/>The Proxy.cfc extends the Application.cfc, also in the root directory, and the Application.cfc in the subdirectory (admin) extends the Proxy.cfc in the root directory.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>root directory: contains both Application.cfc and Proxy.cfc (that extends the root Application.cfc).&lt;br/&gt;<char code='0d'/><char code='0a'/>subdirectory: Application.cfc (that extends Proxy.cfc).&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Now we need to also add the following mapping in the root Application.cfc. This mapping logic should be near &lt;b&gt;the top of the &lt;u&gt;root&lt;/u&gt; Application.cfc&lt;/b&gt;, and it &lt;b&gt;should not&lt;/b&gt; be within any of the Application.cfc event handlers (onApplicationStart, onApplicationRequest, etc). This mapping code does not need to be anywhere else other than the root Application.cfc:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- Define application-specific mappings. These will be used to point to this application.cfc when we extend it in the admin/Administrator.cfc template using the Proxy.cfc that resides in the same folder as this Application.cfc. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings = structNew() /&gt;<char code='0d'/><char code='0a'/>&lt;!--- Mapping for the ROOT Application.cfc ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings["rootCfc"] = getDirectoryFromPath(getCurrentTemplatePath()) /&gt;<char code='0d'/><char code='0a'/>&lt;!--- Mapping for the admin SUBDIRECTORY Application.cfc. Note the admin prefix is attached at the end of this line. This points to the admin folder. ---&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings["adminCfc"] = getDirectoryFromPath( getCurrentTemplatePath() &amp; "/admin" ) /&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>I used rootCfc to identify the Application.cfc in the root directory, whereas adminCfc applies to the Application in the admin directory. These variables can be named anything. Note that the "/admin" string at the end of the adminCfc mapping points to the 'admin' folder, which is a subdirectory. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Now that we have the mappings in the root Application.cfc, we need to apply them to the extends statement in Application.cfc located in the subdirectory. In the /admin/Application.cfc template use:&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;/admin/Application.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayname="xxx" sessionmanagement="xx" clientmanagement="xx" extends="rootCfc.Proxy"&gt;<char code='0d'/><char code='0a'/>&lt;!--- Logic ---&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Of course, rootCfc tells the Application.cfc in the subdirectory to look for the Proxy.cfc template in the root directory. Like other 'extend' statements, you don't need to specify '.cfc' at the end of Proxy. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>You don't need to use this 'extend' mapping in either the root Proxy.cfc or Application.cfc templates. They can already find each other as they are both in the same root directory. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;/Proxy.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent extends="Application"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;hr noshade&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Summary&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>For the sake of absolute clarity:&lt;br/&gt;<char code='0d'/><char code='0a'/>&lt;b&gt;root Application.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>Contains the mapping logic. Has the mappings for both of the root and subdirectory.&lt;br/&gt;<char code='0d'/><char code='0a'/>This mapping logic should be near &lt;b&gt;the top of the &lt;u&gt;root&lt;/u&gt; Application.cfc&lt;/b&gt;, and it &lt;b&gt;should not&lt;/b&gt; be within any of the Application.cfc event handlers (onApplicationStart, onApplicationRequest, etc).&lt;br/&gt;<char code='0d'/><char code='0a'/>Does not use an 'extend' statement&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings = structNew() /&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings["rootCfc"] = getDirectoryFromPath(getCurrentTemplatePath()) /&gt;<char code='0d'/><char code='0a'/>&lt;cfset this.mappings["adminCfc"] = getDirectoryFromPath( getCurrentTemplatePath() &amp; "/admin" ) /&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;root Proxy.cfm&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>A simple 'extends="Application" works.&lt;br/&gt;<char code='0d'/><char code='0a'/>No mapping logic.&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent extends="Application"&gt;<char code='0d'/><char code='0a'/>&lt;/cfcomponent&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;b&gt;subdirectory Application.cfc&lt;/b&gt;&lt;br/&gt;<char code='0d'/><char code='0a'/>The extends statement must be the mapping variable name of the folder (rootCfc), a dot (.), and finally the name of the Proxy.cfc template without the .cfc prefix (Proxy)&lt;br/&gt;<char code='0d'/><char code='0a'/>No mapping logic.&lt;br/&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;cfcomponent displayname="Admin" sessionmanagement="yes" clientmanagement="yes" extends="rootCfc.Proxy"&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>My apologies for being so verbose. I annoyed myself while writing this- but not as annoyed when I was while trying to solve this problem!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Take care!<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Related External Posts:<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://www.bennadel.com/blog/2115-extending-the-application-cfc-coldfusion-framework-component-with-a-relative-path-proxy.htm"&gt;Ben Nadel: Extending The Application.cfc ColdFusion Framework Component With A Relative-Path Proxy&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://www.bennadel.com/blog/1608-coldfusion-8-application-specific-mappings-work-with-the-cfcomponent-extends-attribute.htm"&gt;ColdFusion 8 Application Specific Mappings Work With The CFComponent Extends Attribute&lt;/a&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://www.bennadel.com/blog/2014-extending-the-application-cfc-coldfusion-framework-component-with-cfinclude.htm"&gt;Ben Nadel: Extending The Application.cfc ColdFusion Framework Component With CFInclude&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/307423/extending-application-cfc-in-a-subdirectory"&gt;Stack Overflow post by Edward M Smith&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;</string><string>&lt;postData&gt;<char code='0d'/><char code='0a'/>&lt;descMetaTag:CfBlogs.org is meant to replace the popular ColdFusion Bloggers blog aggregator that was so popular in the ColdFusion community in the last ten years. Unfortunately, the ColdFusion Bloggers platform is no longer active at this time due to the unfortunate demise of Wil Genovese, who maintained CfBloggers after Raymond Camden provided Wil with the keys.&gt;&lt;/descMetaTag&gt;<char code='0d'/><char code='0a'/>&lt;attachScript type="application/ld+json"&gt;<char code='0d'/><char code='0a'/>{<char code='0d'/><char code='0a'/>  "@context" : "http://schema.org",<char code='0d'/><char code='0a'/>  "@type" : "Article",<char code='0d'/><char code='0a'/>  "mainEntityOfPage": {<char code='0d'/><char code='0a'/>      "@type": "Article",<char code='0d'/><char code='0a'/>      "@id": "https://gregoryalexander.com/blog/2021/2/13/CfBlog-Feeds--A-New-ColdFusion-Blog-Aggregator"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "author" : {<char code='0d'/><char code='0a'/>    "@type" : "Person",<char code='0d'/><char code='0a'/>    "name" : "by Gregory Alexander"<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>"publisher": {<char code='0d'/><char code='0a'/>    "@type": "Organization",<char code='0d'/><char code='0a'/>    "name": "Gregory's Blog",<char code='0d'/><char code='0a'/>    "logo": {<char code='0d'/><char code='0a'/>      "@type": "ImageObject",<char code='0d'/><char code='0a'/>      "url": "https://gregoryalexander.com/blog/2021/2/13/CfBlog-Feeds--A-New-ColdFusion-Blog-Aggregator"<char code='0d'/><char code='0a'/>    }<char code='0d'/><char code='0a'/>  },<char code='0d'/><char code='0a'/>  "url": "https://gregoryalexander.com/blog/2021/2/13/CfBlog-Feeds--A-New-ColdFusion-Blog-Aggregator",<char code='0d'/><char code='0a'/>  "headline": "Extending Application.cfc's using mappings and proxies",<char code='0d'/><char code='0a'/>  "image": [<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/16_9/cgBlogsBanner.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/4_3/cgBlogsBanner.jpg",<char code='0d'/><char code='0a'/>    "https://gregoryalexander.com/blog/enclosures/google/1_1/cgBlogsBanner.jpg"<char code='0d'/><char code='0a'/>  ],<char code='0d'/><char code='0a'/>  "articleBody": "CfBlogs is meant to replace the popular ColdFusion Bloggers blog aggregator that was so popular in the ColdFusion community in the last ten years. Unfortunately, the ColdFusion Bloggers platform is no longer active at this time due to the unfortunate demise of Wil Genovese, who maintained CfBloggers after Raymond Camden provided Wil with the keys.",<char code='0d'/><char code='0a'/>  "datePublished": "2021-2-13",<char code='0d'/><char code='0a'/>  "dateModified": "2021-2-13"<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/attachScript&gt;<char code='0d'/><char code='0a'/>&lt;/postData&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;&lt;a href="https://www.gregoryalexander.com/cfblogs/" target="new"&gt;www.cfblogs.org&lt;/a&gt;&lt;/b&gt; is meant to replace the popular 'ColdFusion Bloggers' blog aggregator that was so popular in the ColdFusion community in the last ten years. Unfortunately, the ColdFusion Bloggers platform is no longer active at this time due to the unfortunate demise of &lt;a href="https://www.coldfusionmuse.com/index.cfm/2020/12/8/Remembering-Wil-Genovese" target="new"&gt;Wil Genovese&lt;/a&gt;, who maintained Cfbloggers after Raymond Camden &lt;a href="https://www.raymondcamden.com/2018/05/22/rip-coldfusion-bloggers"&gt;provided Wil with the keys&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The new &lt;b&gt;cfblogs.org&lt;/b&gt; aggregator can be found here: &lt;b&gt;&lt;a href="https://www.gregoryalexander.com/cfblogs/" target="new"&gt;http://www.cfblogs.org&lt;/a&gt;&lt;/b&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;History&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I have always wanted to get involved in this project. The aggregator that Raymond developed was an integral part of our ColdFusion community, and it is a core requirement for my continued efforts in developing &lt;a href="https://gregoryalexander.com/blog"&gt;&lt;b&gt;Galaxy Blog&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;When I noticed that the CfBloggers site went down, I immediately contacted Raymond Camden and asked him for the most recent code. Raymond entrusted me with his most recent ColdFusion codebase, but it was from 2013. In the last two weeks, I was able to rewrite and modernize Raymonds' original CfBloggers code, and I believe that I have all of the original functionality intact.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The following features are available in this version of the code:<char code='0d'/><char code='0a'/>&lt;ul&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Updated server side logic in ColdFusion using modern API's and twitter post sharing functionality&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Vastly improved mobile device handling&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;A modern responsive HTML5 single page application with Kendo grids&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Full search capabilities&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;All of the current feeds have been personally reviewed and are current&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Blog Posts are posted on the &lt;a href="https://twitter.com/CfBlogsFeed" target="new"&gt;&lt;/a&gt;CfBlogs twitter feed &lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Twitter logic has been completely rewritten in ColdFusion 2018 &lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;RSS options from google &lt;a href="http://feeds.feedburner.com/CfblogsFeed" target="new"&gt;Feedburner&lt;/a&gt;&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;&lt;a href="http://gregoryalexander.com/cfblogs/rss.cfm?max=50" target="new"&gt;CfBlogs RSS&lt;/a&gt; feed allowing the user to extract a certain amount of posts&lt;/li&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;li&gt;Blog posts are aggregated every 20 minutes or so.&lt;/li&gt;<char code='0d'/><char code='0a'/>&lt;/ul&gt;<char code='0d'/><char code='0a'/>&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;CfBlog RSS options&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/>&lt;p&gt;&lt;b&gt;&lt;a href="http://www.cfblogs.org" target="new"&gt;CfBlogs&lt;/a&gt;&lt;/b&gt; uses the &lt;b&gt;&lt;a href="http://feeds.feedburner.com/CfblogsFeed" target="new"&gt;CfBlogs FeedBurner&lt;/a&gt;&lt;/b&gt; for the main RSS feed. You can find it here: &lt;a href="http://feeds.feedburner.com/CfblogsFeed" target="new"&gt;http://feeds.feedburner.com/CfblogsFeed&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;You may also use our local &lt;b&gt;&lt;a href="http://gregoryalexander.com/cfblogs/rss.cfm?max=50"&gt;CfBlogs feed&lt;/a&gt;&lt;/b&gt; located at &lt;a href="http://gregoryalexander.com/cfblogs/rss.cfm?max=50"&gt;http://gregoryalexander.com/cfblogs/rss.cfm?max=50&lt;/a&gt;.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Our local CfBlogs feed allows for options:&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;By default the local RSS feed will return the last 50 items. You can change this by adding ?max=N to the URL, where N is a number from 1 to 100. To show the last 5 entries, use:&lt;br/&gt;<char code='0d'/><char code='0a'/>http://gregoryalexander.com/cfblogs/rss.cfm?max=5&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Filtering the local feed has not been implemented at this time. If requested, I will gladly implement it at a later time.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;How to add your own site to this feed&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;If you wish to send me feedback about the site or get your blog added, please send me an email at gregory at gregoryalexander dot com. Include your blog's name, URL, and RSS URL if you want me to include your blog.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I can also work with other blog owners to see if we can archive &lt;b&gt;all&lt;/b&gt; of their existing blog posts. Contact me if you're interested.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Please follow us on Twitter&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;CfBlogs tweets any new blog postings on the &lt;b&gt;&lt;a href="https://twitter.com/CfBlogsFeed" target="new"&gt;CfBlogs Twitter feed&lt;/a&gt;&lt;/b&gt; found at &lt;a href="https://twitter.com/CfBlogsFeed" target="new"&gt;https://twitter.com/CfBlogsFeed&lt;/a&gt;. The twitter functionality should mirror the original twitter functionality of the ColdFusion Bloggers site.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I hope to also develop simiar functionality with Facebook soon.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;CfBlogs Future&lt;/h4&gt; <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;In the future, I hope to add Facebook social media sharing, make major improvements and fix some of the bugs that were found, and to contact Hostek, CfWebTools, and other potential partners to see if they will sponsor this site. I also hope to gather a few other folks and provide them the keys so that our ColdFusion community will be able to rely upon this site if one of us goes down.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;I also hope to put the new full codebase into an upcoming Galaxie Blog version so that other blog owners can adopt this type of functionality.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;The &lt;a href="https://www.cfwebtools.com/"&gt;CfWebTools&lt;/a&gt; team may be able to resurrect the original ColdFusion Bloggers code (in node.js). If they are able to do so, I hope that the resurrected site can be complimentary. That said, I fully intend on making this code much more functional in the future.&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Please don't hesitate to contact me if you have any ideas or suggestions!&lt;/p&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;h4&gt;Special Thanks&lt;/h4&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;p&gt;Many thanks go out to Raymond Camden, who assisted me and provided me his updated code, Adam Euans who helped compile a new active feed list, and Charlie Arehart who is, as always, a trusted person to bounce ideas off of and to ask for advice.&lt;/p&gt;</string></field><field name='POSTED'><dateTime>2018-10-30T02:13:00-05:00</dateTime><dateTime>2018-11-10T00:42:00-06:00</dateTime><dateTime>2018-12-09T01:15:00-06:00</dateTime><dateTime>2018-12-14T00:44:00-06:00</dateTime><dateTime>2018-12-14T14:34:00-06:00</dateTime><dateTime>2019-01-01T02:50:00-06:00</dateTime><dateTime>2019-01-02T01:04:00-06:00</dateTime><dateTime>2019-02-10T00:38:00-06:00</dateTime><dateTime>2019-02-12T18:01:00-06:00</dateTime><dateTime>2019-03-01T19:34:00-06:00</dateTime><dateTime>2019-03-29T16:16:00-05:00</dateTime><dateTime>2019-04-16T21:57:00-05:00</dateTime><dateTime>2019-04-19T02:15:00-05:00</dateTime><dateTime>2019-04-24T21:51:00-05:00</dateTime><dateTime>2019-05-08T23:10:00-05:00</dateTime><dateTime>2019-05-09T01:35:00-05:00</dateTime><dateTime>2019-05-09T16:55:00-05:00</dateTime><dateTime>2019-05-18T04:26:00-05:00</dateTime><dateTime>2019-05-18T19:13:00-05:00</dateTime><dateTime>2019-05-25T02:31:00-05:00</dateTime><dateTime>2019-05-27T03:53:00-05:00</dateTime><dateTime>2019-06-01T21:41:00-05:00</dateTime><dateTime>2019-06-02T16:32:00-05:00</dateTime><dateTime>2019-06-03T04:49:00-05:00</dateTime><dateTime>2019-06-08T01:48:00-05:00</dateTime><dateTime>2019-06-10T14:30:00-05:00</dateTime><dateTime>2019-06-13T22:10:00-05:00</dateTime><dateTime>2019-06-24T18:40:00-05:00</dateTime><dateTime>2019-06-28T14:11:00-05:00</dateTime><dateTime>2019-06-28T20:42:00-05:00</dateTime><dateTime>2019-07-01T01:53:00-05:00</dateTime><dateTime>2019-07-12T16:18:00-05:00</dateTime><dateTime>2019-07-16T00:15:00-05:00</dateTime><dateTime>2019-09-01T02:50:00-05:00</dateTime><dateTime>2019-09-01T03:00:00-05:00</dateTime><dateTime>2019-09-09T05:29:00-05:00</dateTime><dateTime>2019-09-13T14:29:00-05:00</dateTime><dateTime>2019-09-16T14:50:00-05:00</dateTime><dateTime>2019-09-17T02:31:00-05:00</dateTime><dateTime>2019-10-05T15:02:00-05:00</dateTime><dateTime>2019-10-05T22:52:00-05:00</dateTime><dateTime>2019-10-06T19:13:00-05:00</dateTime><dateTime>2019-10-06T21:13:00-05:00</dateTime><dateTime>2019-10-07T16:10:00-05:00</dateTime><dateTime>2019-10-07T23:06:00-05:00</dateTime><dateTime>2019-10-14T22:15:00-05:00</dateTime><dateTime>2019-10-26T19:24:00-05:00</dateTime><dateTime>2019-10-28T13:29:00-05:00</dateTime><dateTime>2019-10-29T01:21:00-05:00</dateTime><dateTime>2019-11-01T03:07:00-05:00</dateTime><dateTime>2019-11-02T01:45:00-05:00</dateTime><dateTime>2019-11-03T01:07:00-06:00</dateTime><dateTime>2019-11-04T17:40:00-06:00</dateTime><dateTime>2019-11-15T16:37:00-06:00</dateTime><dateTime>2019-11-17T16:47:00-06:00</dateTime><dateTime>2019-11-18T14:00:00-06:00</dateTime><dateTime>2019-11-19T20:07:00-06:00</dateTime><dateTime>2019-11-22T13:44:00-06:00</dateTime><dateTime>2019-11-28T12:30:00-06:00</dateTime><dateTime>2019-12-13T16:24:00-06:00</dateTime><dateTime>2019-12-14T16:14:00-06:00</dateTime><dateTime>2019-12-15T22:12:00-06:00</dateTime><dateTime>2019-12-15T23:02:00-06:00</dateTime><dateTime>2019-12-16T15:32:00-06:00</dateTime><dateTime>2019-12-28T20:30:00-06:00</dateTime><dateTime>2019-12-28T20:44:00-06:00</dateTime><dateTime>2019-12-28T21:15:00-06:00</dateTime><dateTime>2020-01-15T20:35:00-06:00</dateTime><dateTime>2020-05-06T16:15:00-05:00</dateTime><dateTime>2020-08-04T14:19:00-05:00</dateTime><dateTime>2021-01-22T15:51:00-06:00</dateTime><dateTime>2021-01-30T00:31:00-06:00</dateTime><dateTime>2021-02-13T02:56:00-06:00</dateTime></field><field name='MOREBODY'><null/><null/><null/><null/><null/><null/><null/><null/><null/><string>Javascript:<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>$(document).ready(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='0d'/><char code='0a'/><char code='09'/>// Validation.<char code='0d'/><char code='0a'/><char code='09'/>// Preset our sessionStorage var. This is set to '' initially to indicate that server side validation has not yet occurred.<char code='0d'/><char code='0a'/><char code='09'/>sessionStorage.setItem("captchaValidated", "");<char code='0d'/><char code='0a'/><char code='09'/>// Set the initial value of the captchaValidatedValue form element. We need to store this in order to know when to hit the server with a new validation request. We don't want to hit the server 3 times a second unless the text value has actually changed.<char code='0d'/><char code='0a'/><char code='09'/>sessionStorage.setItem("captchaValidatedValue", "");<char code='0d'/><char code='0a'/><char code='09'/>// Since the kendo validator occurs so quickly, it may send an erroneous value to the server the a few times before it picks up the new value that was entered. We need to allow several attempts to occur when we hit the server. This is a numeric value that will be incremented.<char code='0d'/><char code='0a'/><char code='09'/>sessionStorage.setItem("captchaValidatedAttempts", "0");<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Invoked when the submit button is clicked. Instead of using '$("form").submit(function(event) {' and 'event.preventDefault();', We are using direct binding here to speed up the event.<char code='0d'/><char code='0a'/><char code='09'/>var addCommentSubmit = $('#addCommentSubmit');<char code='0d'/><char code='0a'/><char code='09'/>addCommentSubmit.on('click', function(e){      <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Prevent any other action.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>e.preventDefault();   <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Set the attempts var to 0<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>sessionStorage.setItem("captchaValidatedAttempts", 0);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Note: when using server side logic, this function may not post the data to the server due to the time required to return the validation from the server. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// If the form has been successfully validated.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>if (addCommentFormValidator.validate()) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Submit the form. We need to have a quick timeout function as the captcha resonse does not come back for 150 milliseconds.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Note: when testing the ui validator, comment out the post line below. It will only validate and not actually do anything when you post.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>postCommentSubscribe(&lt;cfoutput&gt;'#URL.Id#'&lt;/cfoutput&gt;, &lt;cfoutput&gt;'#URL.uiElement#'&lt;/cfoutput&gt;);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}, 300);//..setTimeout(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}//..if (addCommentFormValidator.validate()) {<char code='0d'/><char code='0a'/><char code='09'/>});//..addCommentSubmit.on('click', function(e){ <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// !!! Note on the validators, all forms need a name attribute, otherwise the positioning of the messages will not work. Also data attributes that are dash separated become camel cased when retrieved using jQuery. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/>addCommentFormValidator = $("#addCommentSubscribe").kendoValidator({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>// Set up custom validation rules <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>rules: {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Name of custom rule. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// This can be any name, but I typically put the name of the field and a verb to indicate what I am enforcing ('nameIsRequired'). Note: if you just want to check to see if something was entered you can specify 'required' in the form element.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// This rule is quite different as it relies upon server side processing. I used https://www.telerik.com/blogs/extending-the-kendo-ui-validator-with-custom-rules as an example to build this.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>captcha: <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>function(input) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (input.is("[id='captchaText']")){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// The captchaValidated value is set in storage session and set in the function below. Note, until the form loses focus, this function is constantly being validated until validation passes. Be careful not to go into an endless loop without exits.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>var captchaValidated = getCapthchaValidated();<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// If the captcha has not been validated on the server...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (captchaValidated == ''){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Check the captcha<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>captchaText.check(input);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// And stop...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>return false;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// If the server validation failed, try again...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (captchaValidated == 'no'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Check the captcha<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>captchaText.check(input);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// And stop...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>return false;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='09'/><char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (captchaValidated == 'yes'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// The captha text was succuessfully validated. Exit this function. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>return true;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}//..if (input.is("[id='captchaText']")){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// This rule does not apply to the captha text input.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>return true;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}//..function(input) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>//..captcha:<char code='0d'/><char code='0a'/><char code='09'/>}).data("kendoValidator");<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>// Create a variable for this function as we will use the properties in the captch validation function above when it returns results.<char code='0d'/><char code='0a'/><char code='09'/>var captchaText = {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>check: function(element) {<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Note: the validator will fire off a new request 3 times a second, and we need to make sure that we are not hitting the server with stale data every time. We are going to see if the value has changed before firing off a new request to the server.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>// Compare the input value to the value that was stored in sessionStorage. If the data has changed, and there has been fewer than 5 validation attempts that have failed, hit the server.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>if (element.val() != getCapthchaValidatedValue() || getCaptchaValidatedAttempts() &amp;lt;= 5){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Post to the server side method that will validate the captcha text.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>$.ajax({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>url: "&lt;cfoutput&gt;#application.proxyController#&lt;/cfoutput&gt;?method=validateCaptcha",<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>dataType: 'json', // Use json for same domain posts. Use jsonp for crossdomain. <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>data: { <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Send in the arguments.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>captchaText: element.val(), <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>captchaHash: $( "#captchaHash" ).val()<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>},<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>success: function(data) { // The `data` object is a boolean value that is returned from the server.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>var captchaValidated = getCapthchaValidated();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (data){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// debugging alert('Yes!');<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Set the value on the cache object so that it can be referenced in the next validation run. Note: sessionStorage can only store strings.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>sessionStorage.setItem("captchaValidated", "yes");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// At the tail end of the validation process, when the validated data is complete, post the data. Since we have passed validation, we don't need to hit the 'captcha' custom rule above again.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (addCommentFormValidator.validate()) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Hide the custom window message<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>kendo.ui.ExtAlertDialog.hide;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// submit the form. We need to have a quick timeout function as the captcha resonse does not come back for 150 milliseconds.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Note: when testing the ui validator, comment out the post line below. It will only validate and not actually do anything when you post.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>postCommentSubscribe(&lt;cfoutput&gt;'#URL.Id#'&lt;/cfoutput&gt;, &lt;cfoutput&gt;'#URL.uiElement#'&lt;/cfoutput&gt;);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}, 300);//..setTimeout(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>} else {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Get the number of validation attempts.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>var captchaValidatedAttempts = getCaptchaValidatedAttempts();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Increment the validation attempt.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>var currentCaptchaValidatedAttempt = (captchaValidatedAttempts + 1);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Store the number of validation attempts in sessionStorage.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>sessionStorage.setItem("captchaValidatedAttempts", currentCaptchaValidatedAttempt);<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// After the 5th bad attempt, set the validation var and use a quick set timeout in order for the data to come back and be validated on the server before launching our custom error popup. Otherwise, if there was a previous captch error from the server, this custom error will pop up as the new data has not had a chance to be returned from the server yet.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (currentCaptchaValidatedAttempt  == 6){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Store that we tried to validate, but it was not correct.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>sessionStorage.setItem("captchaValidated", "no");<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Load a new captcha image (this is my own custom requirement and it has no bearing to the validator logic).<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>reloadCaptcha();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Popup an error message.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>if (getCapthchaValidated() == 'no'){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Note: this is a custom library that I am using. The ExtAlertDialog is not a part of Kendo but an extension.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>$.when(kendo.ui.ExtAlertDialog.show({ title: "The text did not match", message: "We have reloaded a new captcha image. If you're having issues with the captcha text, click on the 'new captcha' button to and enter the new text.", icon: "k-ext-warning", width: "&lt;cfoutput&gt;#application.kendoExtendedUiWindowWidth#&lt;/cfoutput&gt;", height: "215px" }) // or k-ext-error, k-ext-question<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>).done(function () {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Do nothing<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>});//..$.when(kendo.ui.ExtAlertDialog.show...<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}//..if (addCommentFormValidator.validate()) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}, 500);// A half of a second should allow the server to validate the captcha and return the result.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Store the validated value. We will use this to determine when to hit the server for validation again if the value was not correctly typed in.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>sessionStorage.setItem("captchaValidatedValue", element.val());<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Trigger the validation routine again. We need to validate each time, even if the value is validated on the server as we need to eliminate the error message raised in the validation script and will be popped up when the form loses focus on the onBlue event.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>setTimeout(function() {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>addCommentFormValidator.validate();<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}, 2000);// Wait 2 seconds to hit the server again.<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>}//..success: function(data) {<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>// Notes: success() only gets called if your webserver responds with a 200 OK HTTP header - basically when everything is fine. However, complete() will always get called no matter if the ajax call was successful or not. its worth mentioning that .complete() will get called after .success() gets called - if it matters to you.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>});//..$.ajax({<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>}//..if (element.val() != getCapthchaValidatedValue()){<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>}//..check: function(element, settings) {<char code='0d'/><char code='0a'/><char code='09'/>};//..var captchaText = {<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>});//...document.ready<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Validation helper functions. These must be oustide of the document ready block in order to work.<char code='0d'/><char code='0a'/>// Note: due to the latency of the data coming back from the server, we need to have two points to post a completely validated form to the server for processing. The first point is when the user clicks the submit form button, and the second point is at the tail end of the processing when the server has validated data. <char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// I am using sessionStorage to store the value from the server in order to effect the captach widget that I developed. I don't want to have to ask the user to go thru the captha validation process multiple times within the same session and don't want to have to write out the logic every time.<char code='0d'/><char code='0a'/>function getCapthchaValidated(){<char code='0d'/><char code='0a'/><char code='09'/>return sessionStorage.getItem("captchaValidated");<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Prior to validation, what did the user enter?<char code='0d'/><char code='0a'/>function getCapthchaValidatedValue(){<char code='0d'/><char code='0a'/><char code='09'/>// Since sessionStorage only stores strings reliably, this will be either: '', 'no', or 'yes'.<char code='0d'/><char code='0a'/><char code='09'/>return sessionStorage.getItem("captchaValidatedValue");<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>// Returns the number of attempts that the server tried to validate the data. This only gets incremented when the server comes back with a false (not validated).<char code='0d'/><char code='0a'/>function getCaptchaValidatedAttempts(){<char code='0d'/><char code='0a'/><char code='09'/>var attemps = sessionStorage.getItem("captchaValidatedAttempts");<char code='0d'/><char code='0a'/><char code='09'/>return(parseInt(attemps));<char code='0d'/><char code='0a'/>}<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>Server side ColdFusion:<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>5) The server side logic that determines if the text that the user entered matches the text that is shown in the captcha image.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>5a) Does the text match the captcha image? Will return a boolean value (true/false).<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>5b) We need to eliminate any chance that a positive result is not overwritten. The client is firing off server side ajax requests 3 times a second, and we need to be careful not to allow a subsequent ajax request overwrite our value. We are using a server side cookie to ensure that this does not happen.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!--- 5) Helper functions for interfaces (addComments, addSub, etc.). Important note on function tags- they must have a returnFormat="json". Otherwise, ColdFusion will return the value wraped in a wddx tag.---&gt;<char code='0d'/><char code='0a'/>&lt;cffunction name="validateCaptcha" access="remote" returnType="boolean" returnFormat="json" output="false" hint="Remote method accessed via ajax. Returns a boolean value to determine if the users entered value matches the captcha image."&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="captchaText" required="yes" hint="What did the user enter into the form?" /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="captchaHash" required="yes" hint="The hashed value of the proper answer. This must match the captcha text in order to pass true." /&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfargument name="debugging" required="no" type="boolean" default="false" hint="For testing purposes, we may need to not use the session.captchValidated value to prevent a true value from being incorreclty reset." /&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!---5a) Does the text that the user entered match the hashed value?---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfif application.captcha.validateCaptcha(arguments.captchaHash,arguments.captchaText)&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfset captchaPass  = true /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Set the captcha validated cookie to true. It will expire in one minute. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfcookie name="captchaValidated" expires="#dateAdd('n', 1, now())#" value="true"&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- 5b) Note: the captcha will only be validated true one time as the encryption tokens get changed on true. However, the kendo validator validates quickly on blur, so there many be a true value overwritten by a false a millisecond later. We don't want to ever change a true value to false and will use session vars to prevent this behavior. You can override this behavior by setting debugging to true. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfif not debugging and isDefined("cookie.captchaValidated")&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset captchaPass  = true /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;cfelse&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;cfset captchaPass  = false /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/cfif&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/><char code='09'/>&lt;!---Return it.---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;cfreturn captchaPass /&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>&lt;/cffunction&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>The HTML is rather simple, the key here are the custom messages are displayed in the   'data-required-msg="Captcha text is required."' and 'data-captcha-msg="The text does not match."'. These tags will pop up the required message when the captcha text has not been filled out, and when the text that the user has entered does not match the text in the captcha image. I am not dealing with any other custom messages here. The rest of the code does not apply, but I am including it for reference.<char code='0d'/><char code='0a'/><char code='0d'/><char code='0a'/>HTML:<char code='0d'/><char code='0a'/>6) The captcha HTML input.<char code='0d'/><char code='0a'/>&lt;code&gt;<char code='0d'/><char code='0a'/>&lt;!-- Captcha --&gt;<char code='0d'/><char code='0a'/>&lt;tr height="35px" class="k-alt"&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;!--- Captcha logic in its own table. This is a Kendo Mvvm template.  ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;div id="captchaImage" class="container k-alt"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;table align="left" class="k-alt" width="100%" cellpadding="0" cellspacing="0"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- The source refers to the javascript code that will be used to populate the control, the template is the UI and it is not associated with the javascript code. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;tbody data-bind="source: captchaTextObj" data-template="captchaTemplate" data-visible="true"&gt;&lt;/tbody&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;/table&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- Create a Kendo template. We will use this to refresh the captcha hash and image on the page.---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;InvalidTag type="text/x-kendo-template" id="captchaTemplate"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;tr class='k-alt'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;&lt;label for="captchaText"&gt;Enter image text:&lt;/label&gt;&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;tr class='k-alt'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;input type="hidden" id="captchaHash" name="captchaHash" value="#: captchaHashReference #" /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;!--- 6) Create the captcha input with the custom messages. ---&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;input type="text" name="captchaText" id="captchaText" size="6" class="k-textbox" style="width: 250px" <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>placeholder="Enter Captcha Text" required <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>data-required-msg="Captcha text is required." <char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>data-captcha-msg="The text does not match." /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;tr class='k-alt'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;img src="#: captchaImageUrl #" alt="Captcha" align="left" vspace="5" border="1" /&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;tr class='k-alt'&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;button type="button" class="k-button" onClick="reloadCaptcha()"&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;i class="fas fa-redo" style="alignment-baseline:middle;"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;New Captcha<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/button&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/><char code='09'/>&lt;/tr&gt;<char code='09'/><char code='0d'/><char code='0a'/><char code='09'/><char code='09'/><char code='09'/>&lt;/script&gt;<char code='0d'/><char code='0a'/><char code='09'/><char code='09'/>&lt;/div&gt;&lt;!---&lt;div id="captchaImage" class="container"&gt;---&gt;<char code='0d'/><char code='0a'/><char code='09'/>&lt;/td&gt;<char code='0d'/><char code='0a'/>&lt;/tr&gt;<char code='0d'/><char code='0a'/>&lt;/code&gt;</string><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/><null/></field><field name='ALIAS'><string>Introductory-purpose</string><string>Digging-in-to-a-major-redesign</string><string>Localization-Support-Dropped</string><string>BlogCfc-administration</string><string>Shorthand-struct-return</string><string>Video-Test</string><string>Done-with-the-draft-version-of-Gregorys-blog</string><string>Kendo-Responsive-Panel</string><string>Responsive-Web-Design</string><string>Kendo-Server-Side-Validation</string><string>How-to-add-additional-descriptive-elements-to-an-element-with-data</string><string>Kendo-scrollview-button-size</string><string>Reopening-existing-Kendo-window-to-solve-a-weird-error</string><string>Kendo-template-with-void-in-an-anchor-link</string><string>Kendo-tooltips-with-multiple-classes-and-styles</string><string>How-to-get-all-of-the-images-with-the-imagesLoaded-library</string><string>Set-active-kendo-tab</string><string>JSON-Parse-Error-in-jQuery-when-using-a-Coldfusion-function-inside-a-cfm-page</string><string>Data-types-returned-in-structures-may-behave-differently</string><string>ColdFusion-arrays-cant-use-zero-as-an-index</string><string>Social-Media-Sharing-with-Gregorys-Blog</string><string>Gregorys-Blog-default-user-name-and-password-after-fresh-installation</string><string>The-current-user-is-not-authorized-to-invoke-this-method</string><string>Kendo-UI-in-Gregorys-Blog</string><string>Using-the-Kendo-pager-anywhere-in-a-page</string><string>Installing-Gregorys-Blog-on-your-own-website</string><string>Immediate-steps-after-installation</string><string>Theme-Settings-in-the-administrative-web-interface</string><string>Using-a-dynamic-variable-to-set-a-dynamic-path-variable-when-dropping-a-cookie</string><string>Fine-tuning-your-theme-with-Kendo-Theme-Builder</string><string>Explorer-Search</string><string>Using-verticalalign-middle-top-auto-margintop-50-will-not-work-when-vertically-aligning-tex</string><string>Introducing-Gregorys-Blog</string><string>My-biggest-SEO-problem</string><string>Galaxie-Blog-status-update</string><string>How-to-speed-up-your-site-with-lazy-loading</string><string>Google-Lighthouse-Metrics-for-Galaxie-Blog-Version-135</string><string>Galaxie-Blog-135-Animated-Blurb</string><string>Demonstrating-the-benefits-of-the-new-webp-image-format</string><string>Disqus-has-been-incorporated-into-Galaxie-Blog</string><string>Incorporate-Disqus-into-Galaxie-Blog--part-1</string><string>Obtaining-a-Disqus-API-Key--Disqus--part-2</string><string>Incorporate-Disqus-into-Galaxy-Blog--Part-3</string><string>Adding-multiple-Disqus-comments-on-one-page</string><string>Building-your-own-Disqus-Recent-Comments-Widget</string><string>Pressure-cooked-KFC-style-chicken-with-the-Magfesa-star-pressure-cookers</string><string>Enabling-Search-Engine-Friendly-Links-with-Url-Rewrite-in-Galaxie-Blog</string><string>How-to-make-the-perfect-social-media-sharing-image--part-1-Background</string><string>How-to-make-the-perfect-social-media-sharing-image--part-2-Getting-the-Size-Right</string><string>How-to-make-the-perfect-social-media-sharing-image--part-3-Get-the-code</string><string>How-to-make-the-perfect-social-media-sharing-image--part-4-Image-Examples</string><string>How-to-make-the-perfect-social-media-sharing-image--part-5-Essential-Meta-Tags</string><string>How-to-make-the-perfect-social-media-sharing-image--part-6-Validation-tools-and-tips</string><string>Plyr-a-HTML5-media-player-is-incorporated-into-Galaxie-Blog</string><string>Integrating-a-HTML5-Media-Player-using-Plyr</string><string>Sharing-Videos-to-Facebook-and-Twitter</string><string>Plyr-Themes-now-match-Galaxie-Blogs-Kendo-UI-themes</string><string>ColdFusion-Orm-a-fantastic-book-by-John-Whish</string><string>ColdFusion-ORM-Error--javalangInteger-etc</string><string>How-to-make-a-round-Kendo-UI-button</string><string>Galaxie-Blog-XML-Post-Directives</string><string>Embedding-a-video-from-YouTube-in-Galaxie-Blog</string><string>Embedding-a-Video-from-Vimeo-in-Galaxie-Blog</string><string>Playing-your-own-video-with-Galaxie-Blog</string><string>Introducing-ColdFusion-ORM</string><string>Understanding-ColdFusion-ORM-Relationships</string><string>Using-ColdFusion-ORM-to-Populate-the-Database</string><string>Galaxie-Blog-Winter-Update-and-Roadmap</string><string>Adding-a-dummy-record-in-the-first-row-of-a-recordset</string><string>Galaxie-Blog-Status-Update</string><string>Happy-New-Year</string><string>Extending-Applicationcfcs-using-mappings-and-proxies</string><string>CfBlog-Feeds--A-New-ColdFusion-Blog-Aggregator</string></field><field name='USERNAME'><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string><string>admin</string></field><field name='ALLOWCOMMENTS'><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number></field><field name='ENCLOSURE'><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/creation.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/proxy.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/languages.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/procrastinate.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/code.jpg</string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/newYear.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/responsivePanel.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/responsiveSite.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/serverSideValidate.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/yellowStoneTooltip.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/kendoScroll.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/window.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/link.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/toolTipHeader.png</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/loadImages.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/tab.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/challengeAjax.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/womanDatatype.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/array.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/socialMediaWoman1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanInstall4.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/frustratedGirl11.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/openSourceHeader.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/kendoPager.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanInstall2.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanInstall1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/kendoThemeHeaderBig1.gif</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/bakingCookies.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/kendoThemeHeaderBig.gif</string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/css2.gif</string><string></string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/8_31.png</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/performance1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/9_13.png</string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/futureGirl.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment151.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment141.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment13.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment12.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment11.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/prettyWomanComment1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/gregorysFriedChicken1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/urlRewrite1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/socialMediaImage11.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/aspectRatio1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/usingColdFusionGenerateImage11.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/toby1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/essentialTags.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/womanValidate1.jpg</string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/mediaPlayer.jpg</string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/mediaPlayer.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/coldFusionOrmJohnWhish.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/coldfuisonOrm.jpg</string><string></string><string></string><string></string><string></string><string></string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/ormPart1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/ormPart21.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/ormPart3.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/delicateArch1.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/SQL.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/neowise.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/happyNewYear2021.jpg</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/mappingAndProxies.png</string><string>D:\home\gregoryalexander.com\wwwroot\blog\enclosures/cgBlogsBanner.jpg</string></field><field name='FILESIZE'><number>163626.0</number><number>210794.0</number><number>193791.0</number><number>96920.0</number><number>157076.0</number><number>0.0</number><number>186312.0</number><number>200376.0</number><number>80494.0</number><number>692828.0</number><number>213860.0</number><number>189712.0</number><number>103011.0</number><number>188884.0</number><number>50720.0</number><number>234564.0</number><number>68518.0</number><number>231298.0</number><number>65713.0</number><number>291941.0</number><number>77632.0</number><number>9843212.0</number><number>85338.0</number><number>634922.0</number><number>147541.0</number><number>9843212.0</number><number>77719.0</number><number>339993.0</number><number>80736.0</number><number>339993.0</number><number>0.0</number><number>238953.0</number><number>0.0</number><number>0.0</number><number>795736.0</number><number>666121.0</number><number>660121.0</number><number>0.0</number><number>103838.0</number><number>73240.0</number><number>73240.0</number><number>73240.0</number><number>73240.0</number><number>73240.0</number><number>73240.0</number><number>148923.0</number><number>559733.0</number><number>546309.0</number><number>368717.0</number><number>311712.0</number><number>848322.0</number><number>253523.0</number><number>110370.0</number><number>0.0</number><number>1614952.0</number><number>0.0</number><number>161254.0</number><number>143254.0</number><number>156398.0</number><number>0.0</number><number>0.0</number><number>0.0</number><number>0.0</number><number>0.0</number><number>170994.0</number><number>176421.0</number><number>176255.0</number><number>3589276.0</number><number>683846.0</number><number>825961.0</number><number>9124422.0</number><number>8852316.0</number><number>389086.0</number></field><field name='MIMETYPE'><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string></string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/png</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/gif</string><string>image/jpeg</string><string>image/gif</string><string></string><string>image/gif</string><string></string><string></string><string>image/png</string><string>image/jpeg</string><string>image/png</string><string></string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string></string><string>image/jpeg</string><string></string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string></string><string></string><string></string><string></string><string></string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/jpeg</string><string>image/png</string><string>image/jpeg</string></field><field name='VIEWS'><number>572.0</number><number>716.0</number><number>628.0</number><number>918.0</number><number>781.0</number><number>873.0</number><number>881.0</number><number>1841.0</number><number>470.0</number><number>1106.0</number><number>463.0</number><number>855.0</number><number>2547.0</number><number>622.0</number><number>2057.0</number><number>649.0</number><number>1011.0</number><number>840.0</number><number>525.0</number><number>768.0</number><number>757.0</number><number>932.0</number><number>1598.0</number><number>919.0</number><number>1633.0</number><number>1152.0</number><number>983.0</number><number>1099.0</number><number>860.0</number><number>1684.0</number><number>0.0</number><number>896.0</number><number>2561.0</number><number>947.0</number><number>1239.0</number><number>1856.0</number><number>1259.0</number><number>1391.0</number><number>1436.0</number><number>786.0</number><number>943.0</number><number>1052.0</number><number>810.0</number><number>1588.0</number><number>911.0</number><number>970.0</number><number>948.0</number><number>998.0</number><number>1100.0</number><number>688.0</number><number>1179.0</number><number>930.0</number><number>1086.0</number><number>1157.0</number><number>3786.0</number><number>902.0</number><number>653.0</number><number>1090.0</number><number>867.0</number><number>1706.0</number><number>704.0</number><number>809.0</number><number>645.0</number><number>722.0</number><number>1360.0</number><number>1528.0</number><number>1609.0</number><number>1115.0</number><number>1152.0</number><number>1338.0</number><number>544.0</number><number>831.0</number><number>2545.0</number></field><field name='RELEASED'><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>0.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number></field><field name='MAILED'><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>0.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>0.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number><number>1.0</number></field></recordset></data></wddxPacket>
